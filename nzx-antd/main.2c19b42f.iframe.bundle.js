(self.webpackChunknzx_antd=self.webpackChunknzx_antd||[]).push([[179],{"./lib sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./between-datetime/BetweenDatetime.stories.ts":"./lib/between-datetime/BetweenDatetime.stories.ts","./between-input/BetweenInput.stories.ts":"./lib/between-input/BetweenInput.stories.ts","./between-time/BetweenTime.stories.ts":"./lib/between-time/BetweenTime.stories.ts","./between/Between.stories.ts":"./lib/between/Between.stories.ts","./button/Button.stories.ts":"./lib/button/Button.stories.ts","./checkbox/Checkbox.stories.ts":"./lib/checkbox/Checkbox.stories.ts","./table/Table.stories.ts":"./lib/table/Table.stories.ts"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./lib sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$"},"./lib sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./http-interceptor/HttpInterceptor.stories.mdx":"./lib/http-interceptor/HttpInterceptor.stories.mdx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./lib sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.mdx)$"},"./lib/between-datetime/between-datetime.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{q:()=>NzxBetweenDatetimeComponent});var NzxBetweenDatetimeComponent_1,tslib__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_between_datetime_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./lib/between-datetime/between-datetime.component.html?ngResource"),_angular_core__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_angular_forms__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),_xmagic_nzx_antd_between__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./lib/between/index.ts"),_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./lib/util/index.ts"),_datetime_utils__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./lib/between-datetime/datetime-utils.ts");let NzxBetweenDatetimeComponent=NzxBetweenDatetimeComponent_1=class NzxBetweenDatetimeComponent extends _xmagic_nzx_antd_between__WEBPACK_IMPORTED_MODULE_1__._{constructor(cdr){super(),this.cdr=cdr,this.nzxValue={},this.defaultDisabledTime={nzDisabledHours:()=>[],nzDisabledMinutes:()=>[],nzDisabledSeconds:()=>[]},this.nzMode="date",this.nzxStartPlaceholder="起始值",this.nzxEndPlaceholder="结束值",this.nzxStartReName="start",this.nzxEndReName="end",this.nzAllowClear=!0,this.nzxStartShowNow=!0,this.nzxEndShowNow=!0,this.nzShowToday=!0,this.nzShowTime=!1,this.nzxStartOnOpenChange=new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter,this.nzxEndOnOpenChange=new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter,this.nzxStartOnOk=new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter,this.nzxEndOnOk=new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter,this.nzxStartOnCalendarChange=new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter,this.nzxEndOnCalendarChange=new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter,this.nzxStartOnPanelChange=new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter,this.nzxEndOnPanelChange=new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter,this.nzxStartDisabledTime=current=>{if(!this.startDisabledTime||!current)return this.defaultDisabledTime;const date=current,minValue=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.BF)(date,this.startMinDateTime),maxValue=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.BF)(date,void 0===this.startMaxDateTime?this._defaultStartMaxDateTime:this.startMaxDateTime);return minValue||maxValue?this.getDisabledTime(date,minValue,maxValue):this.defaultDisabledTime},this.nzxEndDisabledTime=current=>{if(!this.endDisabledTime||!current)return this.defaultDisabledTime;const date=current,minValue=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.BF)(date,void 0===this.endMinDateTime?this._defaultEndMinDateTime:this.endMinDateTime),maxValue=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.BF)(date,this.endMaxDateTime);return minValue||maxValue?this.getDisabledTime(date,minValue,maxValue):this.defaultDisabledTime},this.nzxStartDisabledDate=date=>{if(!date)return!1;const minValue=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.BF)(date,this.startMinDateTime),maxValue=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.BF)(date,void 0===this.startMaxDateTime?this._defaultStartMaxDateTime:this.startMaxDateTime);return!(!maxValue&&!minValue)&&(!(!minValue||!this.getDisabledMinDate(date,minValue))||!(!maxValue||!this.getDisabledMaxDate(date,maxValue)))},this.nzxEndDisabledDate=date=>{if(!date)return!1;const minValue=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.BF)(date,void 0===this.endMinDateTime?this._defaultEndMinDateTime:this.endMinDateTime),maxValue=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.BF)(date,this.endMaxDateTime);return!(!maxValue&&!minValue)&&(!(!maxValue||!this.getDisabledMaxDate(date,maxValue))||!(!minValue||!this.getDisabledMinDate(date,minValue)))},this.onChange=()=>null,this.onTouched=()=>null}get _defaultStartMaxDateTime(){return this.nzxValue[this.nzxEndReName]}get _defaultEndMinDateTime(){return this.nzxValue[this.nzxStartReName]}get startDisabledTime(){return null==this.nzxStartShowTime?this.nzShowTime:this.nzxStartShowTime}get endDisabledTime(){return null==this.nzxEndShowTime?this.nzShowTime:this.nzxEndShowTime}getDisabledTime(date,minValue,maxValue){const start=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.UM)(date,minValue);let hours=[],minutes=[],seconds=[];if(start){const equalsHour=start.hour===date.getHours();hours=_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_2__.M3.range(0,start.hour),minutes=equalsHour?_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_2__.M3.range(0,start.minute):[],seconds=equalsHour&&start.minute===date.getMinutes()?_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_2__.M3.range(0,start.second):[]}const end=(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.UM)(date,maxValue);if(end){const equalsHour=end.hour===date.getHours();hours=hours.concat(_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_2__.M3.range(end.hour+1,24)),minutes=equalsHour?minutes.concat(_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_2__.M3.range(end.minute+1,60)):minutes,seconds=equalsHour&&end.minute===date.getMinutes()?seconds.concat(_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_2__.M3.range(end.second+1,60)):seconds}return{nzDisabledHours:()=>hours,nzDisabledMinutes:hour=>hour===(null==start?void 0:start.hour)||hour===(null==end?void 0:end.hour)?minutes:[],nzDisabledSeconds:(hour,minute)=>hour===(null==start?void 0:start.hour)&&minute===(null==start?void 0:start.minute)||hour===(null==end?void 0:end.hour)&&minute===(null==end?void 0:end.minute)?seconds:[]}}getDisabledMaxDate(date,maxValue){if("date"===this.nzMode){if((0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.Nh)(date)>maxValue.getTime())return!0}else if("week"===this.nzMode){if((0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.jc)(date)>maxValue.getTime())return!0}else if("month"===this.nzMode){if((0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.fM)(date)>maxValue.getTime())return!0}else{if("year"!==this.nzMode)return date>maxValue;if((0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.$l)(date)>maxValue.getTime())return!0}return!1}getDisabledMinDate(date,minValue){if("date"===this.nzMode){if(minValue.getTime()>(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.v3)(date))return!0}else if("week"===this.nzMode){if(minValue.getTime()>(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.Te)(date))return!0}else if("month"===this.nzMode){if(minValue.getTime()>(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.pb)(date))return!0}else{if("year"!==this.nzMode)return minValue>date;if(minValue.getTime()>(0,_datetime_utils__WEBPACK_IMPORTED_MODULE_3__.Bd)(date))return!0}return!1}ngModelChange(){this.onChange(this.nzxValue)}writeValue(value){this.nzxValue=value||{},this.cdr.markForCheck()}setDisabledState(isDisabled){this.nzxDisabled=isDisabled}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}};NzxBetweenDatetimeComponent.ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef}],NzxBetweenDatetimeComponent.propDecorators={nzMode:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartPlaceholder:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndPlaceholder:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartReName:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndReName:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartId:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndId:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartAllowClear:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzAllowClear:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndAllowClear:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartAutoFocus:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndAutoFocus:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartBackdrop:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndBackdrop:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartDefaultPickerValue:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndDefaultPickerValue:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartShowNow:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndShowNow:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzShowToday:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartShowToday:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndShowToday:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzShowTime:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartShowTime:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndShowTime:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartDropdownClassName:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndDropdownClassName:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzFormat:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartInputReadOnly:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndInputReadOnly:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzLocale:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartPopupStyle:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndPopupStyle:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartRenderExtraFooter:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndRenderExtraFooter:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartSuffixIcon:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndSuffixIcon:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartDateRender:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxEndDateRender:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],nzxStartOnOpenChange:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Output}],nzxEndOnOpenChange:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Output}],nzxStartOnOk:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Output}],nzxEndOnOk:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Output}],nzxStartOnCalendarChange:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Output}],nzxEndOnCalendarChange:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Output}],nzxStartOnPanelChange:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Output}],nzxEndOnPanelChange:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Output}],startMinDateTime:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],endMaxDateTime:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],startMaxDateTime:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],endMinDateTime:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}]},NzxBetweenDatetimeComponent=NzxBetweenDatetimeComponent_1=(0,tslib__WEBPACK_IMPORTED_MODULE_5__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({selector:"nzx-between-datetime",exportAs:"nzxBetweenDatetime",template:_between_datetime_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,preserveWhitespaces:!1,encapsulation:_angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewEncapsulation.None,changeDetection:_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,providers:[{provide:_angular_forms__WEBPACK_IMPORTED_MODULE_6__.NG_VALUE_ACCESSOR,useExisting:(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.forwardRef)((()=>NzxBetweenDatetimeComponent_1)),multi:!0}]})],NzxBetweenDatetimeComponent)},"./lib/between-datetime/datetime-utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{$l:()=>getStartYearDate,BF:()=>getRealDateTime,Bd:()=>getEndYearDate,Nh:()=>getStartDate,Te:()=>getEndWeekDate,UM:()=>getTimeValue,fM:()=>getStartMonthDate,jc:()=>getStartWeekDate,pb:()=>getEndMonthDate,v3:()=>getEndDate});var _xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./lib/util/index.ts");function getStartDate(date){const time=new Date(date.getTime());return time.setHours(0,0,0,0),time.getTime()}function getEndDate(date){const time=new Date(date.getTime());return time.setHours(23,59,59,999),time.getTime()}function getStartWeekDate(date){const time=new Date(date.getTime()),day=time.getDay();return time.setDate(time.getDate()-(0===day?7:day)),time.setHours(0,0,0,0),time.getTime()}function getEndWeekDate(date){const time=new Date(date.getTime()),day=time.getDay();return time.setDate(time.getDate()+7-(0===day?7:day)),time.setHours(23,59,59,999),time.getTime()}function getStartMonthDate(date){const time=new Date(date.getTime());return time.setDate(1),time.setHours(0,0,0,0),time.getTime()}function getEndMonthDate(date){const time=new Date(date.getTime());return time.setDate(0),time.setHours(23,59,59,999),time.getTime()}function getStartYearDate(date){const time=new Date(date.getTime());return time.setMonth(1,1),time.setHours(0,0,0,0),time.getTime()}function getEndYearDate(date){const time=new Date(date.getTime());return time.setMonth(12,0),time.setHours(23,59,59,999),time.getTime()}function getTimeValue(date,value){return value&&getStartDate(value)===getStartDate(date)?{hour:value.getHours(),minute:value.getMinutes(),second:value.getSeconds()}:null}function getRealDateTime(date,disabledDateType){return disabledDateType?_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_0__.M3.isFunction(disabledDateType)?disabledDateType(date):_xmagic_nzx_antd_util__WEBPACK_IMPORTED_MODULE_0__.M3.isDate(disabledDateType)?disabledDateType:new Date(disabledDateType):null}},"./lib/between/between.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{_:()=>NzxBetweenComponent});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_between_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./lib/between/between.component.html?ngResource"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let NzxBetweenComponent=class NzxBetweenComponent{constructor(){this.nzxDisabled=!1,this.nzxSize="default",this.nzxStartDisabled=!1,this.nzxEndDisabled=!1}};NzxBetweenComponent.ctorParameters=()=>[],NzxBetweenComponent.propDecorators={nzxDisabled:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],nzxSize:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],nzxStartDisabled:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],nzxEndDisabled:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}]},NzxBetweenComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({selector:"nzx-between",exportAs:"nzxBetween",template:_between_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,preserveWhitespaces:!1,encapsulation:_angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.None,changeDetection:_angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectionStrategy.OnPush})],NzxBetweenComponent)},"./lib/between/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{_:()=>between_component._,s:()=>NzxBetweenModule});var between_component=__webpack_require__("./lib/between/between.component.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),ng_zorro_antd_input=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-input.mjs");let NzxBetweenModule=class NzxBetweenModule{};NzxBetweenModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[between_component._],imports:[common.ez,ng_zorro_antd_input.o7],exports:[between_component._]})],NzxBetweenModule)},"./lib/util/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Xp:()=>BaseControl,M3:()=>NzxUtils});var ng_zorro_antd_core_util=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-core-util.mjs"),Observable=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js");const toStr=Object.prototype.toString,hasOwn=Object.prototype.hasOwnProperty,defineProperty=Object.defineProperty,gOPD=Object.getOwnPropertyDescriptor;const NzxUtils=new class UtilsClass{constructor(){this.assign=this.extend}defaultIfy(obj,defaultValue){return(0,ng_zorro_antd_core_util.kK)(obj)?defaultValue:obj}get(obj,path,defaultValue){if(!obj||null==path||0===path.length)return defaultValue;if(Array.isArray(path)||(path=path.indexOf(".")?path.split("."):[path]),1===path.length){const checkObj=obj[path[0]];return void 0===checkObj?defaultValue:checkObj}return path.reduce(((o,k)=>(o||{})[k]),obj)||defaultValue}trim(string){return(string||"").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g,"")}getUUID(){return Date.now()+Math.random().toString().replace("0.","")}clone(target){const _target=NzxUtils.isArray(target)?[]:{};return this.extend(_target,target)}setProperty(target,options){defineProperty&&"__proto__"===options.name?defineProperty(target,options.name,{enumerable:!0,configurable:!0,value:options.newValue,writable:!0}):target[options.name]=options.newValue}getProperty(obj,name){if("__proto__"===name){if(!hasOwn.call(obj,name))return;if(gOPD)return gOPD(obj,name).value}return obj[name]}extend(target,...args){let copyIsArray,clone;for(const options of args)if(null!=options)for(const name in options){const src=this.getProperty(target,name),copy=this.getProperty(options,name);target!==copy&&void 0!==copy&&(NzxUtils.isPlainObject(copy)||(copyIsArray=NzxUtils.isArray(copy))?(copyIsArray?(copyIsArray=!1,clone=src&&NzxUtils.isArray(src)?src:[]):clone=src&&NzxUtils.isPlainObject(src)?src:{},this.setProperty(target,{name,newValue:this.extend(clone,copy)})):this.setProperty(target,{name,newValue:copy}))}return target}range(start,end,fill){const list=[],fn=null==fill?i=>i:this.isFunction(fill)?fill:()=>fill;let index=0;for(let i=start;i<end;i++)list.push(fn(i,index++));return list}forEachTree(treeNodes,accept,childrenName="children"){if(!treeNodes||!treeNodes.length)return;const getChildren="string"==typeof childrenName?node=>node[childrenName]:childrenName;let stack=[...treeNodes];const parents=[{count:treeNodes.length,level:0}];let counter=0;for(;stack.length;){const item=stack.shift(),parent=parents[0];if(++counter===parent.count&&(parents.shift(),counter=0),!1===accept(item,parent.parent,parent.level))return;const children=getChildren(item,parent.parent,parent.level);children&&children.length&&(stack=stack.concat(children),parents.push({count:children.length,parent:item,level:parent.level+1}))}}filterTree(treeNodes,predicate,childrenName="children"){const filter=(list,children)=>{var _a;for(const node of list){const newNode=Object.assign(Object.assign({},node),{[childrenName]:[]});(null===(_a=node[childrenName])||void 0===_a?void 0:_a.length)&&filter(node[childrenName],newNode[childrenName]),predicate(newNode)&&children.push(newNode)}},result=[];return filter(treeNodes,result),result}listToTree(list,idName="id",pidName="pid",childrenName="children"){if(!list||!list.length)return[];const nodeMap={};for(const node of list)nodeMap[node[idName]]=node,node[childrenName]=[];const treeNodes=[];for(const node of list){const pid=node[pidName],parent=nodeMap[node[pidName]];pid&&parent?parent[childrenName].push(node):treeNodes.push(node)}return treeNodes}getAjaxValue(observable){let value;return observable.subscribe((result=>value=result)).unsubscribe(),value}getElement(target){if(!target)return null;if(target instanceof HTMLElement)return target;const eleRef=target;return eleRef.nativeElement?eleRef.nativeElement:"string"==typeof target?document.querySelector(target):null}format(template,data){return null!=template&&data?template.replace(/\{([\w\.]*)\}/g,((str,key)=>{const path=key.split(".");let v=data[path.shift()];for(let i=0,size=path.length;i<size&&null!==v;i++)v=v[path[i]];return null==v?"":v.toString()})):template||""}formatDate(srcDate,fmt){if(!srcDate)return"";const o={"M+":srcDate.getMonth()+1,"d+":srcDate.getDate(),"h+":srcDate.getHours()%12==0?12:srcDate.getHours()%12,"H+":srcDate.getHours(),"m+":srcDate.getMinutes(),"s+":srcDate.getSeconds(),"q+":Math.floor((srcDate.getMonth()+3)/3),"S+":srcDate.getMilliseconds(),"e+":srcDate.getDay(),E:{0:"日",1:"一",2:"二",3:"三",4:"四",5:"五",6:"六"}[srcDate.getDay()],"w+":(date=>{const date2=new Date(date.getFullYear(),0,1),day=(date2.getDay()?date2.getDay():7)-(date.getDay()?date.getDay():7);return Math.ceil(Math.round((date.getTime()-date2.getTime()+864e5*day)/864e5)/7)+1})(srcDate)};/(y+)/.test(fmt)&&(fmt=fmt.replace(RegExp.$1,(srcDate.getFullYear()+"").substr(4-RegExp.$1.length)));for(const k in o)new RegExp("("+k+")").test(fmt)&&(fmt=fmt.replace(RegExp.$1,1===RegExp.$1.length?o[k]:("00"+o[k]).substr((""+o[k]).length)));return fmt}is(val,type){return toStr.call(val)===`[object ${type}]`}isDef(val){return void 0!==val}isUnDef(val){return!this.isDef(val)}isObject(val){return null!==val&&this.is(val,"Object")}isEmpty(val){return null==val||0===val.length}isDate(val){return this.is(val,"Date")}isNull(val){return null===val}isNil(val){return this.isUnDef(val)&&this.isNull(val)}isNotNil(val){return!this.isNil(val)}isNumber(val){return this.is(val,"Number")}isPromise(val){return this.is(val,"Promise")||this.isObject(val)&&this.isFunction(val.then)&&this.isFunction(val.catch)}isObservable(obj){return obj instanceof Observable.y||obj&&"function"==typeof obj.subscribe}isString(val){return this.is(val,"String")}isFunction(val){return"function"==typeof val}isBoolean(val){return this.is(val,"Boolean")}isRegExp(val){return this.is(val,"RegExp")}isArray(val){return"function"==typeof Array.isArray?Array.isArray(val):"[object Array]"===toStr.call(val)}isWindow(val){return"undefined"!=typeof window&&this.is(val,"Window")}isElement(val){return this.isObject(val)&&!!val.tagName}isMap(val){return this.is(val,"Map")}isMobile(value){return/^(0|\\+?86|17951)?1[0-9]{10}$/.test(value)}isIp(ip){return/^(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)$/.test(ip)}isUrl(path){return/(((^https?:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+(?::\d+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)$/.test(path)}isChinese(value){return/^[\u4e00-\u9fa5]+$/.test(value)}isNum(value,minus,fraction){return new RegExp((minus?"^-?":"^")+"(([1-9]{1}\\d*)|(0{1}))"+(fraction&&fraction>0?`(\\.\\d{1,${fraction}})?$`:"$")).test(value)}isEmail(value){return/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/.test(value)}isPlainObject(obj){if(!obj||"[object Object]"!==toStr.call(obj))return!1;const hasOwnConstructor=hasOwn.call(obj,"constructor"),hasIsPrototypeOf=obj.constructor&&obj.constructor.prototype&&hasOwn.call(obj.constructor.prototype,"isPrototypeOf");if(obj.constructor&&!hasOwnConstructor&&!hasIsPrototypeOf)return!1;let key;for(key in obj);return void 0===key||hasOwn.call(obj,key)}toDate(date){if(null==date)return null;if(this.isDate(date))return date;if(this.isNumber(date))return new Date(date);if(this.isString(date)){const value=Date.parse(date);if(isNaN(value)){const match=date.match(/\d+/g);if(match)return new Date(...match)}}return null}mergeFormData(form,obj){const list=this.serializeParams(obj);for(const it of list)form.append(it.key,it.value)}serialize(obj){const list=this.serializeParams(obj);let query="";for(const it of list)query+=encodeURIComponent(it.key)+"="+encodeURIComponent(it.value)+"&";return""===query?query:query.substr(0,query.length-1)}serializeParams(obj){if(!obj)return[];const query=[];return this.buildParam(obj,query),query}buildParam(inObj,list){let value,subName,innerObj;for(const name in inObj)if(value=inObj[name],value instanceof Array)for(let i=0;i<value.length;++i)if(value[i]instanceof Array||value[i]instanceof Object){if(value[i].toJSON){list.push({key:name,value:value[i].toJSON()});continue}innerObj={},innerObj[name+"["+i+"]"]=value[i],this.buildParam(innerObj,list)}else void 0!==value[i]&&null!==value[i]&&list.push({key:name,value:value[i]});else if(value instanceof Object){if(value.toJSON){list.push({key:name,value:value.toJSON()});continue}for(subName of Object.keys(value))innerObj={},innerObj[name+"."+subName]=value[subName],this.buildParam(innerObj,list)}else null!=value&&list.push({key:name,value})}};var fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs");new class FormUtilsClass{forEachFormControl(form,callback){if(form instanceof fesm2020_forms.FormGroup){callback(form);for(const i in form.controls){const ctrl=form.controls[i];ctrl instanceof fesm2020_forms.FormControl?callback(ctrl):this.forEachFormControl(ctrl,callback)}}else if(form instanceof fesm2020_forms.FormArray){callback(form);for(let i=0;i<form.length;i++){const ctrl=form.at(i);ctrl instanceof fesm2020_forms.FormControl?callback(ctrl):this.forEachFormControl(ctrl,callback)}}else form instanceof fesm2020_forms.FormControl&&callback(form)}validate(form,opts={updateValueAndValidity:!1}){return this.forEachFormControl(form,(ctrl=>{ctrl.markAsDirty(opts),opts.updateValueAndValidity&&ctrl.updateValueAndValidity(opts)})),form.valid}clearError(form){this.forEachFormControl(form,(ctrl=>ctrl.setErrors(null)))}getMessage(control){var _a;if(!control.errors)return null;for(const key in control.errors)return(null===(_a=control.errors[key])||void 0===_a?void 0:_a.message)||"输入不正确";return null}required(message="不能为空",hasValue=(value=>!!value)){return control=>hasValue(control.value)?null:{required:{message,value:control.value}}}singleValidator(operator,errMessage){return control=>null==control.value||0===control.value.length||operator(control.value)?null:errMessage}pattern(exp,message){const reg=NzxUtils.isString(exp)?new RegExp(exp,"mig"):exp;return this.singleValidator((v=>reg.test(v)),{pattern:{message}})}lt(num,message){return this.singleValidator((v=>Number(v)<num),{lt:{message}})}lte(num,message){return this.singleValidator((v=>Number(v)<=num),{lte:{message}})}gt(num,message){return this.singleValidator((v=>Number(v)>num),{gt:{message}})}gte(num,message){return this.singleValidator((v=>Number(v)>=num),{gte:{message}})}contains(str,ignore,message){const newStr=ignore?str.toLowerCase():str;return this.singleValidator((v=>-1!==(ignore?v.toLowerCase():v).indexOf(newStr)),{contains:{message}})}between(min,max,message){return this.singleValidator((value=>{const v=Number(value);return v>=min&&v<=max}),{between:{message}})}number(minus,fraction,message="数字格式错误"){return this.singleValidator((value=>NzxUtils.isNum(value,minus,fraction)),{number:{message}})}mobile(message="手机号格式错误"){return this.singleValidator((value=>NzxUtils.isMobile(value)),{mobile:{message}})}email(message="邮箱格式错误"){return this.singleValidator((value=>NzxUtils.isEmail(value)),{email:{message}})}ip(message="IP格式错误"){return this.singleValidator((value=>NzxUtils.isIp(value)),{ip:{message}})}url(message="URL格式错误"){return this.singleValidator((value=>NzxUtils.isUrl(value)),{url:{message}})}chinese(message="只允许输入中文字符"){return this.singleValidator((value=>NzxUtils.isChinese(value)),{chinese:{message}})}twoControl(form,otherField,compare,errMessage){const fn=NzxUtils.isFunction(form)?form:()=>form;return control=>{if(!(null==control?void 0:control.value))return null;const other=fn().get(otherField);return(null==other?void 0:other.value)?compare(null==other?void 0:other.value,null==control?void 0:control.value)?(other.valid||other.updateValueAndValidity(),null):errMessage:null}}equalControl(form,otherField,message){const errMessage={equalValidator:{message}};return this.twoControl(form,otherField,((v1,v2)=>v1===v2),errMessage)}gtControl(form,otherField,message){const errMessage={gtValidator:{message}};return this.twoControl(form,otherField,((v1,v2)=>Number(v1)>Number(v2)),errMessage)}gteControl(form,otherField,message){const errMessage={gteValidator:{message}};return this.twoControl(form,otherField,((v1,v2)=>Number(v1)>=Number(v2)),errMessage)}ltControl(form,otherField,message){const errMessage={ltValidator:{message}};return this.twoControl(form,otherField,((v1,v2)=>Number(v1)<Number(v2)),errMessage)}lteControl(form,otherField,message){const errMessage={lteValidator:{message}};return this.twoControl(form,otherField,((v1,v2)=>Number(v1)<=Number(v2)),errMessage)}unique(form,message="不允许重复"){return control=>{if(!control.value)return null;for(const c in form.controls){const ctl=form.get(c);if(control!==ctl&&control.value===(null==ctl?void 0:ctl.value))return{uniqueValidator:{message}}}return null}}};class BaseControl{constructor(){this.onChange=()=>null,this.onTouched=()=>null}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}setDisabledState(isDisabled){this.nzxDisabled=isDisabled}}},"./lib/between-datetime/BetweenDatetime.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,EndMaxDateTime:()=>EndMaxDateTime,NzAllowClear:()=>NzAllowClear,NzMode:()=>NzMode,NzxDisabled:()=>NzxDisabled,NzxEndDisabled:()=>NzxEndDisabled,NzxSize:()=>NzxSize,NzxStartDisabled:()=>NzxStartDisabled,ShowTime:()=>ShowTime,ShowTimeEnd:()=>ShowTimeEnd,ShowTimeStart:()=>ShowTimeStart,ShowToday:()=>ShowToday,ShowTodayEnd:()=>ShowTodayEnd,ShowTodayStart:()=>ShowTodayStart,StartMinDate:()=>StartMinDate,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),_between_datetime_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./lib/between-datetime/between-datetime.component.ts"),ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-form.mjs"),ng_zorro_antd_date_picker__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-date-picker.mjs"),_xmagic_nzx_antd_between__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./lib/between/index.ts"),_stories__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./stories/index.ts"),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/esm/index.js");const __WEBPACK_DEFAULT_EXPORT__={title:"组件/BetweenDatetime 日期区间",component:_between_datetime_component__WEBPACK_IMPORTED_MODULE_1__.q,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({declarations:[_between_datetime_component__WEBPACK_IMPORTED_MODULE_1__.q],imports:[ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_5__.U5,_xmagic_nzx_antd_between__WEBPACK_IMPORTED_MODULE_2__.s,ng_zorro_antd_date_picker__WEBPACK_IMPORTED_MODULE_6__.Hb]})],argTypes:Object.assign({nzxSize:_stories__WEBPACK_IMPORTED_MODULE_3__.w,nzMode:{control:"select",options:["date","week","month","year"]},defaultDisabledTime:{table:{disable:!0}},nzShowTime:{control:{type:"boolean"},type:"boolean"},nzxStartShowTime:{control:{type:"boolean"},type:"boolean"},nzxEndShowTime:{control:{type:"boolean"},type:"boolean"},nzLocale:{control:!1}},(0,_stories__WEBPACK_IMPORTED_MODULE_3__.uQ)("nzxStartOnOpenChange","nzxEndOnOpenChange","nzxStartOnOk","nzxEndOnOk","nzxStartOnCalendarChange","nzxEndOnCalendarChange","nzxStartOnPanelChange","nzxEndOnPanelChange")),args:{nzxStartOnOpenChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__.action)("nzxStartOnOpenChange"),nzxEndOnOpenChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__.action)("nzxEndOnOpenChange"),nzxStartOnOk:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__.action)("nzxStartOnOk"),nzxEndOnOk:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__.action)("nzxEndOnOk"),nzxStartOnCalendarChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__.action)("nzxStartOnCalendarChange"),nzxEndOnCalendarChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__.action)("nzxEndOnCalendarChange"),nzxStartOnPanelChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__.action)("nzxStartOnPanelChange"),nzxEndOnPanelChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_4__.action)("nzxEndOnPanelChange")},parameters:{controls:{exclude:["nzxStartDisabledDate","nzxEndDisabledDate","nzxStartDisabledTime","nzxEndDisabledTime","getDisabledMaxDate","getDisabledMinDate","getDisabledTime",..._stories__WEBPACK_IMPORTED_MODULE_3__.Ol]}}},Template=_stories__WEBPACK_IMPORTED_MODULE_3__.hM,Default=Template(),NzxSize=Template({nzxSize:"large"}),NzxDisabled=Template({nzxDisabled:!0}),NzxStartDisabled=Template({nzxStartDisabled:!0}),NzxEndDisabled=Template({nzxEndDisabled:!0}),start=new Date;start.setDate(start.getDate()-2);const StartMinDate=Template({startMinDateTime:start}),EndMaxDateTime=Template({endMaxDateTime:new Date}),ShowTimeStart=Template({nzxStartShowTime:!0}),ShowTimeEnd=Template({nzxEndShowTime:!0}),ShowTime=Template({nzShowTime:!0}),ShowToday=Template({nzShowToday:!0}),ShowTodayStart=Template({nzxStartShowToday:!0}),ShowTodayEnd=Template({nzxEndShowToday:!0}),NzMode=Template({nzMode:"week"}),NzAllowClear=Template({nzAllowClear:!0})},"./lib/between-input/BetweenInput.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,NzxDisabled:()=>NzxDisabled,NzxEndDisabled:()=>NzxEndDisabled,NzxSize:()=>NzxSize,NzxStartDisabled:()=>NzxStartDisabled,NzxType:()=>NzxType,default:()=>BetweenInput_stories});var NzxBetweenInputComponent_1,client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),between_input_componentngResource=__webpack_require__("./lib/between-input/between-input.component.html?ngResource"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),between=__webpack_require__("./lib/between/index.ts");let NzxBetweenInputComponent=NzxBetweenInputComponent_1=class NzxBetweenInputComponent extends between._{constructor(cdr){super(),this.cdr=cdr,this.nzxValue={},this.nzxType="input",this.nzxStartPlaceholder="起始值",this.nzxEndPlaceholder="结束值",this.nzxStartMax=1/0,this.nzxEndMax=1/0,this.nzxStartMin=-1/0,this.nzxEndMin=-1/0,this.nzxStarStep=1,this.nzxEndStep=1,this.nzxStartFormatter=v=>v,this.nzxEndFormatter=v=>v,this.onChange=()=>null,this.onTouched=()=>null}ngModelChange(){this.onChange(this.nzxValue)}writeValue(value){this.nzxValue=value||{},this.cdr.markForCheck()}setDisabledState(isDisabled){this.nzxDisabled=isDisabled}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}};NzxBetweenInputComponent.ctorParameters=()=>[{type:core.ChangeDetectorRef}],NzxBetweenInputComponent.propDecorators={nzxType:[{type:core.Input}],nzxStartPlaceholder:[{type:core.Input}],nzxEndPlaceholder:[{type:core.Input}],nzxStartMax:[{type:core.Input}],nzxEndMax:[{type:core.Input}],nzxStartMin:[{type:core.Input}],nzxEndMin:[{type:core.Input}],nzxStarPrecision:[{type:core.Input}],nzxEndPrecision:[{type:core.Input}],nzxStarStep:[{type:core.Input}],nzxEndStep:[{type:core.Input}],nzxStarId:[{type:core.Input}],nzxEndId:[{type:core.Input}],nzxStartReName:[{type:core.Input}],nzxEndReName:[{type:core.Input}],nzxStartFormatter:[{type:core.Input}],nzxEndFormatter:[{type:core.Input}]},NzxBetweenInputComponent=NzxBetweenInputComponent_1=(0,tslib_es6.gn)([(0,core.Component)({selector:"nzx-between-input",template:between_input_componentngResource,preserveWhitespaces:!1,encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,providers:[{provide:fesm2020_forms.NG_VALUE_ACCESSOR,useExisting:(0,core.forwardRef)((()=>NzxBetweenInputComponent_1)),multi:!0}]})],NzxBetweenInputComponent);var stories=__webpack_require__("./stories/index.ts"),ng_zorro_antd_input=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-input.mjs"),ng_zorro_antd_input_number=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-input-number.mjs");const BetweenInput_stories={title:"组件/BetweenInput 输入框区间",component:NzxBetweenInputComponent,decorators:[(0,client.moduleMetadata)({declarations:[NzxBetweenInputComponent],imports:[between.s,ng_zorro_antd_input.o7,ng_zorro_antd_input_number.Zf]})],args:{nzxStartFormatter:v=>v,nzxEndFormatter:v=>v,nzxStartMax:1/0,nzxEndMax:1/0,nzxStartMin:-1/0,nzxEndMin:-1/0},argTypes:{nzxSize:stories.w,nzxType:{control:"inline-radio"},nzxStartMax:{control:"number"},nzxEndMax:{control:"number"},nzxStartMin:{control:"number"},nzxEndMin:{control:"number"}},parameters:{controls:{exclude:stories.Ol}}},Template=stories.hM,Default=Template(),NzxSize=Template({nzxSize:"large"}),NzxDisabled=Template({nzxDisabled:!0}),NzxStartDisabled=Template({nzxStartDisabled:!0}),NzxEndDisabled=Template({nzxEndDisabled:!0}),NzxType=Template({nzxType:"number"})},"./lib/between-time/BetweenTime.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,NzxDisabled:()=>NzxDisabled,NzxEndDisabled:()=>NzxEndDisabled,NzxSize:()=>NzxSize,NzxStartDisabled:()=>NzxStartDisabled,default:()=>BetweenTime_stories});var client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),between_time_componentngResource=__webpack_require__("./lib/between-time/between-time.component.html?ngResource"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),ng_zorro_antd_core_util=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-core-util.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),between=__webpack_require__("./lib/between/index.ts"),between_datetime_component=__webpack_require__("./lib/between-datetime/between-datetime.component.ts"),datetime_utils=__webpack_require__("./lib/between-datetime/datetime-utils.ts"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),ng_zorro_antd_date_picker=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-date-picker.mjs");let NzxBetweenDatetimeModule=class NzxBetweenDatetimeModule{};NzxBetweenDatetimeModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[between_datetime_component.q],imports:[common.ez,fesm2020_forms.FormsModule,between.s,ng_zorro_antd_date_picker.Hb],exports:[between_datetime_component.q]})],NzxBetweenDatetimeModule);var NzxBetweenTimeComponent_1,util=__webpack_require__("./lib/util/index.ts");let NzxBetweenTimeComponent=NzxBetweenTimeComponent_1=class NzxBetweenTimeComponent extends between._{constructor(cdr){super(),this.cdr=cdr,this.nzxValue={},this.nzxStartReName="start",this.nzxEndReName="end",this.nzxStartId=null,this.nzxStartStatus="",this.nzxStartHourStep=1,this.nzxStartMinuteStep=1,this.nzxStartSecondStep=1,this.nzxStartPlaceholder="起始值",this.nzFormat="HH:mm:ss",this.nzxStartUse12Hours=!1,this.nzxStartOpenChange=new core.EventEmitter,this.nzxEndId=null,this.nzxEndStatus="",this.nzxEndHourStep=1,this.nzxEndMinuteStep=1,this.nzxEndSecondStep=1,this.nzxEndPlaceholder="结束值",this.nzxEndUse12Hours=!1,this.nzxEndOpenChange=new core.EventEmitter,this.nzxStartDisabledHours=()=>this.getDisabledHour(this.startMinDateTime,this.getDefaultMaxValue(this.startMaxDateTime)),this.nzxStartDisabledMinutes=hour=>this.getDisabledMinutes(hour,this.startMinDateTime,this.getDefaultMaxValue(this.startMaxDateTime)),this.nzxStartDisabledSeconds=(hour,minute)=>this.getDisabledSeconds(hour,minute,this.startMinDateTime,this.getDefaultMaxValue(this.startMaxDateTime)),this.nzxEndDisabledHours=()=>this.getDisabledHour(this.getDefaultMinValue(this.endMinDateTime),this.endMaxDateTime),this.nzxEndDisabledMinutes=hour=>this.getDisabledMinutes(hour,this.getDefaultMinValue(this.endMinDateTime),this.endMaxDateTime),this.nzxEndDisabledSeconds=(hour,minute)=>this.getDisabledSeconds(hour,minute,this.endMinDateTime,this.endMaxDateTime),this.onChange=()=>null,this.onTouched=()=>null}get nzDefaultOpenValue(){return new Date}ngModelChange(){this.onChange(this.nzxValue)}writeValue(value){this.nzxValue=value||{},this.cdr.markForCheck()}setDisabledState(isDisabled){this.nzxDisabled=isDisabled}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}getDefaultMinValue(date){return void 0===date?this.nzxValue[this.nzxStartReName]:date}getDefaultMaxValue(date){return void 0===date?this.nzxValue[this.nzxEndReName]:date}getDisabledHour(minDateTime,maxDateTime){const minValue=(0,datetime_utils.BF)(new Date,minDateTime),maxValue=(0,datetime_utils.BF)(new Date,maxDateTime);if(!maxValue&&!minValue)return[];let hours=[];return minValue&&(hours=util.M3.range(0,minValue.getHours())),maxValue&&(hours=hours.concat(util.M3.range(maxValue.getHours()+1,24))),hours}getDisabledMinutes(hour,minDateTime,maxDateTime){const minValue=(0,datetime_utils.BF)(new Date,minDateTime),maxValue=(0,datetime_utils.BF)(new Date,maxDateTime);if(!maxValue&&!minValue)return[];let minutes=[];return minValue&&minValue.getHours()===hour&&(minutes=util.M3.range(0,minValue.getMinutes())),maxValue&&maxValue.getHours()===hour&&(minutes=minutes.concat(util.M3.range(maxValue.getMinutes()+1,60))),minutes}getDisabledSeconds(hour,minute,minDateTime,maxDateTime){const minValue=(0,datetime_utils.BF)(new Date,minDateTime),maxValue=(0,datetime_utils.BF)(new Date,maxDateTime);if(!maxValue&&!minValue)return[];let seconds=[];return minValue&&minValue.getHours()===hour&&minValue.getMinutes()===minute&&(seconds=util.M3.range(0,minValue.getSeconds())),maxValue&&maxValue.getHours()===hour&&maxValue.getMinutes()===minute&&(seconds=seconds.concat(util.M3.range(maxValue.getSeconds()+1,60))),seconds}};NzxBetweenTimeComponent.ctorParameters=()=>[{type:core.ChangeDetectorRef}],NzxBetweenTimeComponent.propDecorators={nzxStartReName:[{type:core.Input}],nzxEndReName:[{type:core.Input}],nzxStartId:[{type:core.Input}],nzxStartStatus:[{type:core.Input}],nzxStartHourStep:[{type:core.Input}],nzxStartMinuteStep:[{type:core.Input}],nzxStartSecondStep:[{type:core.Input}],nzxStartClearText:[{type:core.Input}],nzxStartNowText:[{type:core.Input}],nzxStartOkText:[{type:core.Input}],nzxStartPopupClassName:[{type:core.Input}],nzxStartPlaceholder:[{type:core.Input}],nzxStartAddOn:[{type:core.Input}],nzxStartDefaultOpenValue:[{type:core.Input}],nzFormat:[{type:core.Input}],nzxStartUse12Hours:[{type:core.Input}],nzxStartSuffixIcon:[{type:core.Input}],nzxStartHideDisabledOptions:[{type:core.Input}],nzxStartAllowEmpty:[{type:core.Input}],nzxStartAutoFocus:[{type:core.Input}],nzxStartBackdrop:[{type:core.Input}],nzxStartOpenChange:[{type:core.Output}],nzxEndId:[{type:core.Input}],nzxEndStatus:[{type:core.Input}],nzxEndHourStep:[{type:core.Input}],nzxEndMinuteStep:[{type:core.Input}],nzxEndSecondStep:[{type:core.Input}],nzxEndClearText:[{type:core.Input}],nzxEndNowText:[{type:core.Input}],nzxEndOkText:[{type:core.Input}],nzxEndPopupClassName:[{type:core.Input}],nzxEndPlaceholder:[{type:core.Input}],nzxEndAddOn:[{type:core.Input}],nzxEndDefaultOpenValue:[{type:core.Input}],nzxEndUse12Hours:[{type:core.Input}],nzxEndSuffixIcon:[{type:core.Input}],nzxEndHideDisabledOptions:[{type:core.Input}],nzxEndAllowEmpty:[{type:core.Input}],nzxEndAutoFocus:[{type:core.Input}],nzxEndBackdrop:[{type:core.Input}],nzxEndOpenChange:[{type:core.Output}],startMinDateTime:[{type:core.Input}],endMaxDateTime:[{type:core.Input}],startMaxDateTime:[{type:core.Input}],endMinDateTime:[{type:core.Input}]},(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],NzxBetweenTimeComponent.prototype,"nzxStartUse12Hours",void 0),(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],NzxBetweenTimeComponent.prototype,"nzxStartHideDisabledOptions",void 0),(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],NzxBetweenTimeComponent.prototype,"nzxStartAllowEmpty",void 0),(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],NzxBetweenTimeComponent.prototype,"nzxStartAutoFocus",void 0),(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],NzxBetweenTimeComponent.prototype,"nzxEndUse12Hours",void 0),(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],NzxBetweenTimeComponent.prototype,"nzxEndHideDisabledOptions",void 0),(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],NzxBetweenTimeComponent.prototype,"nzxEndAllowEmpty",void 0),(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],NzxBetweenTimeComponent.prototype,"nzxEndAutoFocus",void 0),NzxBetweenTimeComponent=NzxBetweenTimeComponent_1=(0,tslib_es6.gn)([(0,core.Component)({selector:"nzx-between-time",template:between_time_componentngResource,preserveWhitespaces:!1,encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,providers:[{provide:fesm2020_forms.NG_VALUE_ACCESSOR,useExisting:(0,core.forwardRef)((()=>NzxBetweenTimeComponent_1)),multi:!0}]})],NzxBetweenTimeComponent);var stories=__webpack_require__("./stories/index.ts"),ng_zorro_antd_time_picker=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-time-picker.mjs");const BetweenTime_stories={title:"组件/BetweenDatetime 时间区间",component:NzxBetweenTimeComponent,decorators:[(0,client.moduleMetadata)({declarations:[NzxBetweenTimeComponent],imports:[ng_zorro_antd_time_picker.wY,between.s]})],argTypes:Object.assign({nzxSize:stories.w,nzxStartStatus:{control:"inline-radio",options:["","error","warning"],defaultValue:""},nzxEndStatus:{control:"inline-radio",options:["","error","warning"],defaultValue:""}},(0,stories.uQ)("nzxEndOpenChange","nzxStartOpenChange")),parameters:{controls:{exclude:[...stories.Ol,"nzxStartDisabledHours","nzxStartDisabledMinutes","nzxStartDisabledSeconds","nzxEndDisabledHours","nzxEndDisabledMinutes","nzxEndDisabledSeconds","getDefaultMinValue","getDefaultMaxValue","getDisabledHour","getDisabledMinutes","getDisabledSeconds","nzDefaultOpenValue"]}}},Template=stories.hM,Default=Template(),NzxSize=Template({nzxSize:"large"}),NzxDisabled=Template({nzxDisabled:!0}),NzxStartDisabled=Template({nzxStartDisabled:!0}),NzxEndDisabled=Template({nzxEndDisabled:!0})},"./lib/between/Between.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DatePickerControl:()=>DatePickerControl,NzxDisabled:()=>NzxDisabled,NzxEndDisabled:()=>NzxEndDisabled,NzxSize:()=>NzxSize,NzxStartDisabled:()=>NzxStartDisabled,SelectControl:()=>SelectControl,WidthFormItem:()=>WidthFormItem,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),_between_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./lib/between/between.component.ts"),ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-input.mjs"),ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-select.mjs"),ng_zorro_antd_date_picker__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-date-picker.mjs"),ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-form.mjs"),_stories__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"组件/Between 区间",component:_between_component__WEBPACK_IMPORTED_MODULE_1__._,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({declarations:[_between_component__WEBPACK_IMPORTED_MODULE_1__._],imports:[ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_3__.o7,ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_4__.LV,ng_zorro_antd_date_picker__WEBPACK_IMPORTED_MODULE_5__.Hb,ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_6__.U5]})],argTypes:{nzxSize:_stories__WEBPACK_IMPORTED_MODULE_2__.w},parameters:{docs:{moduleName:"",importName:""}}},Template=args=>({props:args,template:'\n    <nzx-between\n      [nzxSize]="nzxSize"\n      [nzxDisabled]="nzxDisabled"\n      [nzxEndDisabled]="nzxEndDisabled"\n      [nzxStartDisabled]="nzxStartDisabled">\n       <input nz-input start placeholder="开始控件" [disabled]="nzxDisabled || nzxStartDisabled">\n       <input nz-input end placeholder="结束控件" [disabled]="nzxDisabled || nzxEndDisabled">\n    </nzx-between>\n    '}),NzxSize=Template.bind({});NzxSize.storyName="Nzx Size",NzxSize.args={nzxSize:"small"};const NzxDisabled=Template.bind({});NzxDisabled.args={nzxDisabled:!0};const NzxStartDisabled=Template.bind({});NzxStartDisabled.args={nzxStartDisabled:!0};const NzxEndDisabled=Template.bind({});NzxEndDisabled.args={nzxEndDisabled:!0};const SelectControl=args=>({props:args,template:'\n    <nzx-between  [nzxSize]="nzxSize"\n      [nzxDisabled]="nzxDisabled"\n      [nzxEndDisabled]="nzxEndDisabled"\n      [nzxStartDisabled]="nzxStartDisabled">\n       <nz-select start nzPlaceHolder="开始控件" [nzOptions]="nzOptions" [nzDisabled]="nzxDisabled || nzxStartDisabled"></nz-select>\n       <nz-select end nzPlaceHolder="结束控件" [nzOptions]="nzOptions" [nzDisabled]="nzxDisabled || nzxEndDisabled"></nz-select>\n    </nzx-between>\n    '});SelectControl.args={nzOptions:Array.from({length:10}).map(((it,i)=>({label:`选项-${i+1}`,value:i})))};const DatePickerControl=args=>({props:args,template:'\n    <nzx-between  [nzxSize]="nzxSize"\n      [nzxDisabled]="nzxDisabled"\n      [nzxEndDisabled]="nzxEndDisabled"\n      [nzxStartDisabled]="nzxStartDisabled">\n       <nz-date-picker start nzPlaceHolder="开始控件" [nzSize]="nzxSize" [nzDisabled]="nzxDisabled || nzxStartDisabled"></nz-date-picker>\n       <nz-date-picker end nzPlaceHolder="结束控件" [nzSize]="nzxSize" [nzDisabled]="nzxDisabled || nzxEndDisabled"></nz-date-picker>\n    </nzx-between>\n    '}),WidthFormItem=args=>({props:args,template:'\n    <nz-form-item>\n      <nz-form-label>label1</nz-form-label>\n      <nz-form-control>\n        <nzx-between  [nzxSize]="nzxSize"\n          [nzxDisabled]="nzxDisabled"\n          [nzxEndDisabled]="nzxEndDisabled"\n          [nzxStartDisabled]="nzxStartDisabled">\n            <input nz-input start placeholder="开始控件" [disabled]="nzxDisabled || nzxStartDisabled">\n            <input nz-input end placeholder="结束控件" [disabled]="nzxDisabled || nzxEndDisabled">\n        </nzx-between>\n      </nz-form-control>\n    </nz-form-item>\n    '})},"./lib/button/Button.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,NzGhost:()=>NzGhost,NzSize:()=>NzSize,NzType:()=>NzType,default:()=>Button_stories});var client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),stories=__webpack_require__("./stories/index.ts"),ng_zorro_antd_button=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-button.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let NzxButtonDirective=class NzxButtonDirective{constructor(renderer,elementRef){this.renderer=renderer,this.elementRef=elementRef}ngOnInit(){this.addButtonClass(this.nzxColor)}addButtonClass(className){const element=this.elementRef.nativeElement,classList=element.classList;classList.forEach((cls=>{0===cls.indexOf("nzx-button")&&classList.remove(cls)})),className&&this.renderer.addClass(element,`nzx-button-${className}`)}ngOnChanges(changes){changes.nzxColor&&!changes.nzxColor.isFirstChange()&&this.addButtonClass(this.nzxColor)}};NzxButtonDirective.ctorParameters=()=>[{type:core.Renderer2},{type:core.ElementRef}],NzxButtonDirective.propDecorators={nzxColor:[{type:core.Input}]},NzxButtonDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[nz-button]",exportAs:"nzxButton"})],NzxButtonDirective);var ng_zorro_antd_space=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-space.mjs");const Button_stories={title:"组件/Button 按钮",component:NzxButtonDirective,decorators:[(0,client.moduleMetadata)({imports:[ng_zorro_antd_button.sL,ng_zorro_antd_space.zf]})],argTypes:{nzSize:stories.w,disabled:{control:"boolean"},nzGhost:{control:"boolean"},nzxColor:{control:"select",options:["success","warning","info","error","gray","teal","cyan",""],defaultValue:"default"},nzType:{control:"select",options:["primary","default","dashed","link","text",""],defaultValue:"default"}},parameters:{docs:{moduleName:"",importName:""}}},Default=args=>({props:args,template:"\n    <div style=\"margin-bottom: 10px\">\n        <label class=\"doc-label\">nzxColor</label>\n        <button\n          nz-button\n          *ngFor=\"let color of ['success', 'warning', 'info', 'error', 'gray', 'teal', 'cyan']\"\n          [nzxColor]=\"color\" style=\"margin-right: 10px;\">\n          {{color}}\n        </button>\n      </div>\n\n      <div style=\"margin-bottom: 10px\">\n        <label class=\"doc-label\">nzGhost</label>\n        <button\n          nz-button\n          *ngFor=\"let color of ['success', 'warning', 'info', 'error', 'gray', 'teal', 'cyan']\"\n          nzGhost\n          [nzxColor]=\"color\" style=\"margin-right: 10px; \">\n          {{color}}\n        </button>\n      </div>\n\n      <div style=\"margin-bottom: 10px\">\n        <label class=\"doc-label\">dashed</label>\n        <button\n          nz-button\n          *ngFor=\"let color of ['success', 'warning', 'info', 'error', 'gray', 'teal', 'cyan']\"\n          nzType=\"dashed\"\n          nzGhost\n          [nzxColor]=\"color\" style=\"margin-right: 10px;\">\n          {{color}}\n        </button>\n      </div>\n\n       <div style=\"margin-bottom: 10px\">\n        <label class=\"doc-label\">text</label>\n        <button\n          nz-button\n          *ngFor=\"let color of ['success', 'warning', 'info', 'error', 'gray', 'teal', 'cyan']\"\n          nzType=\"text\"\n          [nzxColor]=\"color\" style=\"margin-right: 10px;\">\n          {{color}}\n        </button>\n      </div>\n\n      <div style=\"margin-bottom: 10px\">\n        <label class=\"doc-label\">link</label>\n        <button\n          nz-button\n          *ngFor=\"let color of ['success', 'warning', 'info', 'error', 'gray', 'teal', 'cyan']\"\n          nzType=\"link\"\n          [nzxColor]=\"color\" style=\"margin-right: 10px;\">\n          {{color}}\n        </button>\n      </div>\n\n      <div style=\"margin-bottom: 10px\">\n        <label class=\"doc-label\">disabled</label>\n        <button\n          nz-button\n          *ngFor=\"let color of ['success', 'warning', 'info', 'error', 'gray', 'teal', 'cyan']\"\n          disabled\n          [nzxColor]=\"color\" style=\"margin-right: 10px;\">\n          {{color}}\n        </button>\n      </div>\n\n      <div style=\"margin-bottom: 10px\">\n        <label class=\"doc-label\">disabled</label>\n        <button\n          nz-button\n          *ngFor=\"let color of ['success', 'warning', 'info', 'error', 'gray', 'teal', 'cyan']\"\n          nzType=\"dashed\"\n          nzGhost\n          disabled\n          [nzxColor]=\"color\" style=\"margin-right: 10px;\">\n          {{color}}\n        </button>\n      </div>\n    "}),Template=args=>({props:args,template:'\n    <button nz-button [nzSize]="nzSize" [disabled]="disabled" [nzType]="nzType" [nzGhost]="nzGhost" [nzxColor]="nzxColor">\n      测试按钮\n    </button>\n    '}),NzSize=Template.bind({});NzSize.args={nzSize:"small"};const NzType=Template.bind({});NzType.args={nzxColor:"success"};const NzGhost=args=>({props:args,template:'\n    <div style="padding: 8px; background: #bec8c8;">\n      <button nz-button [nzSize]="nzSize" [disabled]="disabled" [nzType]="nzType" [nzGhost]="nzGhost" [nzxColor]="nzxColor">\n        测试按钮\n      </button>\n    </div>\n    '});NzGhost.args={nzGhost:!0,nzxColor:"success"}},"./lib/checkbox/Checkbox.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Checked:()=>Checked,Default:()=>Default,DisabledOption:()=>DisabledOption,FakeComponent:()=>FakeComponent,HideOption:()=>HideOption,IndeterminateOption:()=>IndeterminateOption,LabelOption:()=>LabelOption,NgModelChangeOption:()=>NgModelChangeOption,NzxDisabled:()=>NzxDisabled,default:()=>Checkbox_stories});var NzxCheckboxComponent_1,tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),checkbox_componentngResource=__webpack_require__("./lib/checkbox/checkbox.component.html?ngResource"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),util=__webpack_require__("./lib/util/index.ts");let NzxCheckboxComponent=NzxCheckboxComponent_1=class NzxCheckboxComponent extends util.Xp{constructor(cdr){super(),this.cdr=cdr,this.nzxOptions=[],this.nzxDisabled=!1,this.nzxLayout="horizontal",this.nzxFocus=new core.EventEmitter,this.nzxBlur=new core.EventEmitter,this.nzxValue=[]}ngOnInit(){this.nzxValue=(this.nzxOptions||[]).filter((v=>v.checked)).map((v=>v.value))}ngOnChanges(changes){changes.nzxOptions&&!changes.nzxOptions.isFirstChange()&&this.writeValue(this.nzxValue)}ngModelChange(values){this.nzxValue=values,this.onTouched(),this.onChange(this.nzxValue)}writeValue(value){this.nzxValue=null==value?[]:Array.isArray(value)?value:[value],this.nzxOptions&&this.nzxOptions.length&&this.nzxOptions.forEach((v=>v.checked=-1!==this.nzxValue.indexOf(v.value))),this.cdr.markForCheck()}};NzxCheckboxComponent.ctorParameters=()=>[{type:core.ChangeDetectorRef}],NzxCheckboxComponent.propDecorators={nzxOptions:[{type:core.Input}],nzxDisabled:[{type:core.Input}],nzxLayout:[{type:core.Input}],nzxFocus:[{type:core.Output}],nzxBlur:[{type:core.Output}]},NzxCheckboxComponent=NzxCheckboxComponent_1=(0,tslib_es6.gn)([(0,core.Component)({selector:"nzx-checkbox",template:checkbox_componentngResource,preserveWhitespaces:!1,encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,providers:[{provide:fesm2020_forms.NG_VALUE_ACCESSOR,useExisting:(0,core.forwardRef)((()=>NzxCheckboxComponent_1)),multi:!0}]})],NzxCheckboxComponent);var stories=__webpack_require__("./stories/index.ts"),esm=__webpack_require__("./node_modules/@storybook/addon-actions/dist/esm/index.js"),ng_zorro_antd_checkbox=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-checkbox.mjs"),ng_zorro_antd_core_outlet=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-core-outlet.mjs");const Checkbox_stories={title:"组件/Checkbox 复选框",component:NzxCheckboxComponent,decorators:[(0,client.moduleMetadata)({declarations:[NzxCheckboxComponent],imports:[ng_zorro_antd_checkbox.Wr,ng_zorro_antd_core_outlet.T]})],argTypes:Object.assign({},(0,stories.uQ)("nzxBlur","nzxFocus")),args:{nzxBlur:(0,esm.action)("nzxBlur"),nzxFocus:(0,esm.action)("nzxFocus"),nzxValue:[]},parameters:{controls:{exclude:stories.Ol}}},Template=props=>(0,stories.hM)(props,'\n    <nzx-checkbox\n        [(ngModel)]="nzxValue"\n        (nzxBlur)="nzxBlur($event)"\n        (nzxFocus)="nzxFocus($event)"\n        [nzxDisabled]="nzxDisabled"\n        [nzxLayout]="nzxLayout"\n        [nzxOptions]="nzxOptions" >\n    </nzx-checkbox>');function getNzxOptions(){return Array(5).fill(0).map(((v,i)=>({label:`label-${i}`,value:`value-${i}`})))}const Default=Template({nzxOptions:getNzxOptions()}),Checked=Template({nzxValue:["value-1"],nzxOptions:getNzxOptions()}),NzxDisabled=Template({nzxOptions:getNzxOptions(),nzxDisabled:!0}),HideOption=Template({nzxOptions:getNzxOptions().map(((v,i)=>(i<3&&(v.hide=!0),v)))}),DisabledOption=Template({nzxOptions:getNzxOptions().map(((v,i)=>(1==i&&(v.disabled=!0),v)))}),IndeterminateOption=Template({nzxOptions:getNzxOptions().map(((v,i)=>(i<3&&(v.indeterminate=!0),v)))}),NgModelChangeOption=Template({nzxOptions:getNzxOptions().map(((v,i)=>(v.ngModelChange=(0,esm.action)("ngModelChange"),v)))});let FakeComponent=class FakeComponent{constructor(){this.nzxBlur=()=>{},this.nzxFocus=()=>{},this.nzxOptions=[]}ngOnInit(){this.nzxOptions.forEach(((v,i)=>{1===i&&(v.label=this.hello)}))}};FakeComponent.propDecorators={hello:[{type:core.ViewChild,args:["hello",{static:!0}]}],nzxValue:[{type:core.Input}],nzxBlur:[{type:core.Input}],nzxFocus:[{type:core.Input}],nzxDisabled:[{type:core.Input}],nzxOptions:[{type:core.Input}]},FakeComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"test",template:"\n    <ng-template #hello>Hello</ng-template>\n  "})],FakeComponent);const LabelOption=Template({nzxOptions:getNzxOptions()});LabelOption.decorators=[(0,client.moduleMetadata)({declarations:[FakeComponent],imports:[ng_zorro_antd_checkbox.Wr,ng_zorro_antd_core_outlet.T]}),(0,client.componentWrapperDecorator)(FakeComponent)]},"./lib/table/Table.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ColspanHead:()=>ColspanHead,Default:()=>Default,IsIndex:()=>IsIndex,IsIndexName:()=>IsIndexName,IsLoading:()=>IsLoading,NzShowCheckbox:()=>NzShowCheckbox,ScrollTemplate:()=>ScrollTemplate,default:()=>Table_stories});var client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),stories=__webpack_require__("./stories/index.ts"),ng_zorro_antd_button=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-button.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),table_componentngResource=__webpack_require__("./lib/table/table.component.html?ngResource"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),drag_drop=__webpack_require__("./node_modules/@angular/cdk/fesm2020/drag-drop.mjs"),util=__webpack_require__("./lib/util/index.ts");const FETCH_SETTING={pageIndexField:"pageIndex",pageSizeField:"pageSize",listField:"list",totalField:"total",method:"post",responseType:"json"};var Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),fromEvent=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js"),takeUntil=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js"),debounceTime=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js"),switchMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),http=__webpack_require__("./node_modules/@angular/common/fesm2020/http.mjs");let NzxAntdService=class NzxAntdService{constructor(){}};NzxAntdService.ctorParameters=()=>[],NzxAntdService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],NzxAntdService);let NzxLoadingService=class NzxLoadingService{constructor(){this.loadingId="__MESSAGE_LOADING__"}show(type="message",message="加载中..."){this.showx(this.loadingId,type,(()=>"spin"===type?`\n        <div class="ant-modal-wrap" style="position: fixed; z-index: 999998; background-color: rgba(255, 255, 255, 0.35)"></div>\n        <div\n          class="ant-spin ant-spin-spinning ant-spin-show-text"\n          style="top: 45%; transform: translate(-50%); z-index: 999999; position: fixed; left: 50%"\n        >\n          <span class="ant-spin-dot ant-spin-dot-spin">\n            <i class="ant-spin-dot-item"></i>\n            <i class="ant-spin-dot-item"></i>\n            <i class="ant-spin-dot-item"></i>\n            <i class="ant-spin-dot-item"></i>\n          </span>\n          <div class="ant-spin-text">${message}</div>\n        </div>`:`\n      <div class="ant-modal-wrap" style="z-index: 999998;background-color: rgba(255, 255, 255,.35);"></div>\n      <div class="ant-message-notice ant-message" style="top: 45%; z-index: 999999;">\n        <div class="ant-message-notice-content" style="min-width: 150px;">\n          <div class="ant-message-loading">\n            <i class="anticon anticon-loading">\n              <svg viewBox="0 0 1024 1024" focusable="false" fill="currentColor" width="1em" height="1em"\n                   class="anticon-spin">\n                <path\n                  d="M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"></path>\n              </svg>\n            </i>\n            <span>${message}</span>\n          </div>\n        </div>\n      </div>`))}showx(id,type,html){const loading=document.getElementById(id);if(loading)return loading.getAttribute("type")!==type&&(loading.setAttribute("type",type),loading.innerHTML=html()),void(loading.style.display="block");const div=document.createElement("div");div.setAttribute("type",type),div.setAttribute("id",id),div.innerHTML=html(),document.body.append(div)}loading(show=!0){show?this.show():this.hide()}hide(){const loading=document.getElementById(this.loadingId);loading&&(loading.style.display="none")}};NzxLoadingService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],NzxLoadingService);new NzxLoadingService;var FetcherService_1,Observable=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js"),of=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/of.js");const SYNCED_ENABLED=new http.Xk((()=>!1)),LOADING_ENABLED=new http.Xk((()=>!0));let FetcherService=FetcherService_1=class FetcherService{constructor(http){this.http=http}static resolveParams(data){if(util.M3.isFunction(data)){const result=data();return result instanceof Observable.y?result:(0,of.of)(result)}return data instanceof Observable.y?data:(0,of.of)(data)}fetch(option){return FetcherService_1.resolveParams(option.data).pipe((0,switchMap.w)((value=>{const data=option.beforeSend?option.beforeSend(value||{}):value;return this.doFetch(Object.assign(Object.assign({},option),{data}))})))}fetchSync(option){return util.M3.getAjaxValue(this.fetch(Object.assign(Object.assign({},option),{async:!1})))}doFetch(options){const option={};options.responseType&&(option.responseType=options.responseType),options.observe&&(option.observe=options.observe),option.context||(option.context=new http.qT),!1===options.async&&option.context.set(SYNCED_ENABLED,!0),!1===options.loading&&option.context.set(LOADING_ENABLED,!1);const data=util.M3.isFunction(options.data)?options.data():options.data;return/^post|put$/i.test(options.method)?option.body=data:option.params=data,this.http.request(options.method||"get",options.url,option)}doFetchSync(options){return util.M3.getAjaxValue(this.doFetch(Object.assign(Object.assign({},options),{async:!1})))}remoteValidate(options){return control=>{if(null==control.value||!control.value.length)return null;if(options.beforeSend){const beforeSend=options.beforeSend;options.beforeSend=data=>beforeSend(data,control)}if(options.data&&util.M3.isFunction(options.data)){const dataFn=options.data;options.data=()=>dataFn(control)}const data=this.doFetchSync(options);return options.afterFetch?options.afterFetch(data):null==data?null:util.M3.isBoolean(data)?data?null:{remote:{message:options.message||"格式不正确"}}:data}}};FetcherService.ctorParameters=()=>[{type:http.eN}],FetcherService=FetcherService_1=(0,tslib_es6.gn)([(0,core.Injectable)()],FetcherService);let NzxDownloadService=class NzxDownloadService{constructor(fetcher){this.fetcher=fetcher}download(options){this.fetcher.fetch(Object.assign(Object.assign({},options),{responseType:"blob",observe:"response"})).subscribe((resp=>{const url=options.url,filename=this.getFilename(resp.headers,url);options.afterDownload&&!1===options.afterDownload(resp,filename)||(this.saveAs(resp.body,filename),options.downloadDone&&options.downloadDone(resp,filename))}))}saveAs(body,filename){void 0!==window.navigator.msSaveBlob&&window.navigator.msSaveBlob(body,filename);const blobURL=window.URL.createObjectURL(body),tempLink=document.createElement("a");tempLink.style.display="none",tempLink.href=blobURL,tempLink.setAttribute("download",filename),void 0===tempLink.download&&tempLink.setAttribute("target","_blank"),document.body.appendChild(tempLink),tempLink.click(),document.body.removeChild(tempLink),window.URL.revokeObjectURL(blobURL)}getFilename(headers,url){const disposition=headers.get("content-disposition"),filename=headers.get("filename");if(filename)return decodeURIComponent(filename);if(disposition)return disposition.split(";")[0].split("=")[1];{const start=url.lastIndexOf("/")+1,endIndex=url.lastIndexOf("?"),end=-1===endIndex?url.length:endIndex;return url.substring(start,end)}}};NzxDownloadService.ctorParameters=()=>[{type:FetcherService}],NzxDownloadService=(0,tslib_es6.gn)([(0,core.Injectable)()],NzxDownloadService);let NzxStorageService=class NzxStorageService{constructor(storage){this.storage=storage,storage||(this.storage=localStorage)}get length(){return this.storage.length}clear(){this.storage.clear()}getItem(key){const value=this.storage.getItem(key);return null==value?null:JSON.parse(value)}key(index){return this.storage.key(index)}removeItem(key){this.storage.removeItem(key)}setItem(key,value){this.storage.setItem(key,JSON.stringify(value))}};NzxStorageService.ctorParameters=()=>[{type:Storage,decorators:[{type:core.Optional}]}],NzxStorageService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],NzxStorageService);var router=__webpack_require__("./node_modules/@angular/router/fesm2020/router.mjs"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js");let NzxAuthGuardService=class NzxAuthGuardService{constructor(antdService,router,injector){this.antdService=antdService,this.router=router,this.injector=injector,this.hasAuth=()=>(0,of.of)(!0),this.antdService.hasAuth&&(this.hasAuth=this.antdService.hasAuth)}process(data){const guard=data.guard;return util.M3.isFunction(guard)?guard(this.router,this.injector,this.antdService):this.hasAuth(guard.auth).pipe((0,tap.b)((auth=>{const url=guard.noAuthUrl||this.antdService.noAuthUrl;!auth&&url&&this.router.navigateByUrl(url)})))}canLoad(route){return this.process(route.data)}canActivateChild(childRoute,state){return this.canActivate(childRoute,state)}canActivate(route,_state){return this.process(route.data)}};NzxAuthGuardService.ctorParameters=()=>[{type:NzxAntdService},{type:router.F0},{type:core.Injector}],NzxAuthGuardService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],NzxAuthGuardService);var shareReplay=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),finalize=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/finalize.js");let DicService=class DicService{constructor(http,antdService){this.http=http,this.antdService=antdService,this.dicMap=new Map,this.dicMapData=new Map,this.dicSettings=Object.assign({labelName:"label",valueName:"value"},antdService.dic)}getDic(key,isNumber){if(this.dicMapData.has(key))return(0,of.of)(this.dicMapData.get(key));if(this.dicMap.has(key))return this.dicMap.get(key);const dic$=this.fetchDic(key,!1,isNumber).pipe((0,shareReplay.d)(1),(0,tap.b)((data=>this.dicMapData.set(key,data))),(0,finalize.x)((()=>this.dicMap.delete(key))));return this.dicMap.set(key,dic$),dic$}getDicMap(key,isNumber){return this.getDic(key,isNumber).pipe((0,map.U)(this.listToMap))}getDicSync(key,isNumber){if(this.dicMapData.has(key))return this.dicMapData.get(key)||[];const data=util.M3.getAjaxValue(this.fetchDic(key,!0,isNumber));return this.dicMapData.set(key,data),data}getDicMapSync(key,isNumber){return this.listToMap(this.getDicSync(key,isNumber))}removeDic(key){this.dicMap.delete(key),this.dicMapData.delete(key)}clearDic(){this.dicMap.clear(),this.dicMapData.clear()}fetchDic(key,synced,isNumber){if(!this.dicSettings.url)throw new Error('未配置字典接口地址,请在NzxAntdService中配置"dic"属性的"url"值');const url="string"==typeof this.dicSettings.url?`${this.dicSettings.url}/${key}`:this.dicSettings.url(key);return this.http.get(url,{context:(new http.qT).set(SYNCED_ENABLED,synced).set(LOADING_ENABLED,!1)}).pipe((0,map.U)((list=>(list||[]).map((v=>{const value=v[this.dicSettings.valueName];return v.label=v[this.dicSettings.labelName],v.value=isNumber?+value:value,v})))))}listToMap(list){const data={};for(const v of list)data[v.value]=v.label;return data}};DicService.ctorParameters=()=>[{type:http.eN},{type:NzxAntdService}],DicService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],DicService);var common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs");let NzxServiceModule=class NzxServiceModule{};NzxServiceModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[],imports:[common.ez,http.JF],providers:[FetcherService,NzxDownloadService]})],NzxServiceModule);var ng_zorro_antd_core_util=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-core-util.mjs");let ClickOnceDirective=class ClickOnceDirective{constructor(){this.delay=500,this.disabled=!1,this.clickEvent=new core.EventEmitter,this.originClick=new core.EventEmitter,this._delayDisabled=!1}clickEventHandle(event){if(!this.disabled){if(this.originClick.emit({target:event,delay:this._delayDisabled}),this._delayDisabled)return event.preventDefault(),void event.stopPropagation();this._delayDisabled=!0,setTimeout((()=>this._delayDisabled=!1),this.delay),this.clickEvent.emit(event)}}};ClickOnceDirective.ctorParameters=()=>[],ClickOnceDirective.propDecorators={delay:[{type:core.Input}],disabled:[{type:core.Input}],clickEvent:[{type:core.Output,args:["click.once"]}],originClick:[{type:core.Output}],clickEventHandle:[{type:core.HostListener,args:["click",["$event"]]}]},(0,tslib_es6.gn)([(0,ng_zorro_antd_core_util.yF)()],ClickOnceDirective.prototype,"disabled",void 0),ClickOnceDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[click.once]"})],ClickOnceDirective);let NamedTemplate=class NamedTemplate{constructor(template){this.template=template}ngOnInit(){this.resolveName()}resolveName(){var _a;if(!this.named&&this.template){const tplRef=this.template;this.named=null===(_a=tplRef._declarationTContainer.localNames)||void 0===_a?void 0:_a[0]}}};NamedTemplate.ctorParameters=()=>[{type:core.TemplateRef}],NamedTemplate.propDecorators={named:[{type:core.Input}]},NamedTemplate=(0,tslib_es6.gn)([(0,core.Directive)({selector:"ng-template[named]",exportAs:"namedTemplate"})],NamedTemplate);let FaIconDirective=class FaIconDirective{constructor(render,element){this.render=render,this.element=element,this.type="fa"}ngOnInit(){this.renderIcon(this.icon),this.renderSize(this.size)}renderIcon(newIcon,oldIcon){oldIcon&&this.getIconClass(oldIcon).forEach((cls=>this.render.removeClass(this.element.nativeElement,cls))),newIcon&&this.getIconClass(newIcon).forEach((cls=>this.render.addClass(this.element.nativeElement,cls)))}getIconClass(icon){return icon?icon.split(/\s/):[]}renderSize(newSize,oldSize){const newSizeCls=newSize?`fa-${newSize}`:null,oldSizeCls=oldSize?`fa-${oldSize}`:null;this.renderIcon(newSizeCls,oldSizeCls)}ngOnChanges(changes){changes.icon&&!changes.icon.isFirstChange()&&this.renderIcon(changes.icon.currentValue,changes.icon.previousValue),changes.size&&!changes.size.isFirstChange()&&this.renderSize(changes.size.currentValue,changes.size.previousValue)}};FaIconDirective.ctorParameters=()=>[{type:core.Renderer2},{type:core.ElementRef}],FaIconDirective.propDecorators={icon:[{type:core.Input,args:["fa-icon"]}],type:[{type:core.Input}],spin:[{type:core.Input}],pulse:[{type:core.Input}],flip:[{type:core.Input}],pull:[{type:core.Input}],border:[{type:core.Input}],inverse:[{type:core.Input}],symbol:[{type:core.Input}],rotate:[{type:core.Input}],fixedWidth:[{type:core.Input}],stackItemSize:[{type:core.Input}],size:[{type:core.Input}]},FaIconDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[fa-icon]",exportAs:"faIcon",host:{"[class.fa]":"type === 'fa'","[class.far]":"type === 'far'","[class.fa-spin]":"spin === true","[class.fa-pulse]":"pulse === true","[class.fa-fw]":"fixedWidth === true","[class.fa-border]":"border === true","[class.fa-inverse]":"inverse === true","[class.fa-flip-horizontal]":"flip === 'horizontal'","[class.fa-flip-vertical]":"flip === 'vertical'","[class.fa-flip-both]":"flip === 'both'","[class.fa-pull-left]":"pull === 'left'","[class.fa-pull-right]":"pull === 'right'","[class.fa-rotate-90]":"rotate === 90","[class.fa-rotate-180]":"rotate === 180","[class.fa-rotate-270]":"rotate === 270","[class.fa-stack-1x]":"stackItemSize === '1x'","[class.fa-stack-2x]":"stackItemSize === '2x'"}})],FaIconDirective);let ClickOutsideDirective=class ClickOutsideDirective{constructor(_el,_ngZone,platformId){this._el=_el,this._ngZone=_ngZone,this.platformId=platformId,this.clickOutsideEnabled=!0,this.attachOutsideOnClick=!1,this.delayClickOutsideInit=!1,this.emitOnBlur=!1,this.clickOutside=new core.EventEmitter,this._nodesExcluded=[],this._events=["click"],this._initOnClickBody=this._initOnClickBody.bind(this),this._onClickBody=this._onClickBody.bind(this),this._onWindowBlur=this._onWindowBlur.bind(this)}ngOnInit(){(0,common.NF)(this.platformId)&&this._init()}ngOnDestroy(){(0,common.NF)(this.platformId)&&(this._removeClickOutsideListener(),this._removeAttachOutsideOnClickListener(),this._removeWindowBlurListener())}ngOnChanges(changes){(0,common.NF)(this.platformId)&&(changes.attachOutsideOnClick||changes.exclude||changes.emitOnBlur)&&this._init()}_init(){null!=this.clickOutsideEvents&&(this._events=this.clickOutsideEvents.split(",").map((e=>e.trim()))),this._excludeCheck(),this.attachOutsideOnClick?this._initAttachOutsideOnClickListener():this._initOnClickBody(),this.emitOnBlur&&this._initWindowBlurListener()}_initOnClickBody(){this.delayClickOutsideInit?setTimeout(this._initClickOutsideListener.bind(this)):this._initClickOutsideListener()}_excludeCheck(){if(this.exclude)try{const nodes=Array.from(document.querySelectorAll(this.exclude));nodes&&(this._nodesExcluded=nodes)}catch(err){console.error("[ng-click-outside] Check your exclude selector syntax.",err)}}_onClickBody(ev){this.clickOutsideEnabled&&(this.excludeBeforeClick&&this._excludeCheck(),this._el.nativeElement.contains(ev.target)||this._shouldExclude(ev.target)||(this._emit(ev),this.attachOutsideOnClick&&this._removeClickOutsideListener()))}_onWindowBlur(ev){setTimeout((()=>{document.hidden||this._emit(ev)}))}_emit(ev){this.clickOutsideEnabled&&this._ngZone.run((()=>this.clickOutside.emit(ev)))}_shouldExclude(target){for(const excludedNode of this._nodesExcluded)if(excludedNode.contains(target))return!0;return!1}_initClickOutsideListener(){this._ngZone.runOutsideAngular((()=>{this._events.forEach((e=>document.addEventListener(e,this._onClickBody)))}))}_removeClickOutsideListener(){this._ngZone.runOutsideAngular((()=>{this._events.forEach((e=>document.removeEventListener(e,this._onClickBody)))}))}_initAttachOutsideOnClickListener(){this._ngZone.runOutsideAngular((()=>{this._events.forEach((e=>this._el.nativeElement.addEventListener(e,this._initOnClickBody)))}))}_removeAttachOutsideOnClickListener(){this._ngZone.runOutsideAngular((()=>{this._events.forEach((e=>this._el.nativeElement.removeEventListener(e,this._initOnClickBody)))}))}_initWindowBlurListener(){this._ngZone.runOutsideAngular((()=>{window.addEventListener("blur",this._onWindowBlur)}))}_removeWindowBlurListener(){this._ngZone.runOutsideAngular((()=>{window.removeEventListener("blur",this._onWindowBlur)}))}};ClickOutsideDirective.ctorParameters=()=>[{type:core.ElementRef},{type:core.NgZone},{type:Object,decorators:[{type:core.Inject,args:[core.PLATFORM_ID]}]}],ClickOutsideDirective.propDecorators={clickOutsideEnabled:[{type:core.Input}],attachOutsideOnClick:[{type:core.Input}],delayClickOutsideInit:[{type:core.Input}],emitOnBlur:[{type:core.Input}],exclude:[{type:core.Input}],excludeBeforeClick:[{type:core.Input}],clickOutsideEvents:[{type:core.Input}],clickOutside:[{type:core.Output,args:["click.outside"]}]},ClickOutsideDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[click.outside]",exportAs:"clickOutside"})],ClickOutsideDirective);let LetDirective=class LetDirective{constructor(vc,ref){vc.createEmbeddedView(ref,new LetContext(this))}static ngTemplateContextGuard(_dir,_ctx){return!0}};LetDirective.ctorParameters=()=>[{type:core.ViewContainerRef,decorators:[{type:core.Inject,args:[core.ViewContainerRef]}]},{type:core.TemplateRef,decorators:[{type:core.Inject,args:[core.TemplateRef]}]}],LetDirective.propDecorators={let:[{type:core.Input}]},LetDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[let]"})],LetDirective);class LetContext{constructor(directive){this.directive=directive}get $implicit(){return this.directive.let}get let(){return this.directive.let}}let AuthDirective=class AuthDirective{constructor(_viewContainer,templateRef,antdService){this._viewContainer=_viewContainer,this.templateRef=templateRef,this.antdService=antdService,this._context=new AuthContext,this._thenTemplateRef=null,this._elseTemplateRef=null,this._thenViewRef=null,this._elseViewRef=null,this.hasAuth=()=>(0,of.of)(!0),this._thenTemplateRef=templateRef,this.antdService.authChange&&(this.changeSubscription=this.antdService.authChange().subscribe((()=>this._updateView()))),this.antdService.hasAuth&&(this.hasAuth=this.antdService.hasAuth)}static ngTemplateContextGuard(dir,ctx){return!0}set auth(condition){this._context.$implicit=this._context.auth=condition,this._updateView()}set authThen(templateRef){assertTemplate("authThen",templateRef),this._thenTemplateRef=templateRef,this._thenViewRef=null,this._updateView()}set authElse(templateRef){assertTemplate("authElse",templateRef),this._elseTemplateRef=templateRef,this._elseViewRef=null,this._updateView()}_updateView(){this.authSubscription&&(this.authSubscription.unsubscribe(),this.authSubscription=void 0),this.authSubscription=this.hasAuth(this._context.$implicit).subscribe((auth=>{this.canRender(auth,this._context.$implicit)?this._thenViewRef||(this._viewContainer.clear(),this._elseViewRef=null,this._thenTemplateRef&&(this._thenViewRef=this._viewContainer.createEmbeddedView(this._thenTemplateRef,this._context))):this._elseViewRef||(this._viewContainer.clear(),this._thenViewRef=null,this._elseTemplateRef&&(this._elseViewRef=this._viewContainer.createEmbeddedView(this._elseTemplateRef,this._context)))}))}canRender(hasAuth,value){return hasAuth}ngOnDestroy(){this.changeSubscription&&this.changeSubscription.unsubscribe(),this.authSubscription&&this.authSubscription.unsubscribe()}};AuthDirective.ctorParameters=()=>[{type:core.ViewContainerRef},{type:core.TemplateRef},{type:NzxAntdService}],AuthDirective.propDecorators={auth:[{type:core.Input}],authThen:[{type:core.Input}],authElse:[{type:core.Input}]},AuthDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[auth]"})],AuthDirective);class AuthContext{constructor(){this.$implicit=null,this.auth=null}}function assertTemplate(property,templateRef){if(!!(templateRef&&!templateRef.createEmbeddedView))throw new Error(`${property} must be a TemplateRef, but received '${templateRef}'.`)}let AuthNotDirective=class AuthNotDirective extends AuthDirective{constructor(_viewContainer,templateRef,antdService){super(_viewContainer,templateRef,antdService),this._viewContainer=_viewContainer,this.templateRef=templateRef,this.antdService=antdService}set authNot(condition){super.auth=condition}set authNotThen(templateRef){super.authThen=templateRef}set authNotElse(templateRef){super.authElse=templateRef}canRender(hasAuth,value){return!hasAuth}};AuthNotDirective.ctorParameters=()=>[{type:core.ViewContainerRef},{type:core.TemplateRef},{type:NzxAntdService}],AuthNotDirective.propDecorators={authNot:[{type:core.Input,args:["auth.not"]}],authNotThen:[{type:core.Input,args:["auth.notThen"]}],authNotElse:[{type:core.Input,args:["auth.notElse"]}]},AuthNotDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[auth.not]"})],AuthNotDirective);let DownFileDirective=class DownFileDirective{constructor(downloadService){this.downloadService=downloadService,this.disabled=!1,this.method="get"}clickEventHandler(event){event.preventDefault(),event.stopPropagation(),this.disabled||this.downloadService.download({url:this.url,method:this.method,data:this.data,beforeSend:this.beforeSend,afterDownload:this.afterDownload,downloadDone:this.downloadDone})}};DownFileDirective.ctorParameters=()=>[{type:NzxDownloadService}],DownFileDirective.propDecorators={url:[{type:core.Input,args:["down-file"]}],disabled:[{type:core.Input}],method:[{type:core.Input}],data:[{type:core.Input}],beforeSend:[{type:core.Input}],afterDownload:[{type:core.Input}],downloadDone:[{type:core.Input}],clickEventHandler:[{type:core.HostListener,args:["click",["$event"]]}]},DownFileDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[down-file]",exportAs:"downFile"})],DownFileDirective);const DIRECTIVE=[NamedTemplate,ClickOnceDirective,FaIconDirective,ClickOutsideDirective,LetDirective,DownFileDirective,AuthDirective,AuthNotDirective];let NzxDirectiveModule=class NzxDirectiveModule{};NzxDirectiveModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[DIRECTIVE],imports:[common.ez,NzxServiceModule],exports:[DIRECTIVE]})],NzxDirectiveModule);let NzxTableComponent=class NzxTableComponent{constructor(cdr,render,http,elementRef,antdService){this.cdr=cdr,this.render=render,this.http=http,this.elementRef=elementRef,this.antdService=antdService,this._currentPageData=[],this._headerColumns=[],this._bodyColumns=[],this._allColumns=[],this.defaultPageSizeOptions=[10,15,20,30,40,50,100],this.nzxRefreshVisible=!0,this.nzxResizeVisible=!0,this.nzxSettingVisible=!0,this.nzxStripe=!0,this.nzxColumns=[],this.nzxDefaultRenderHeader=!0,this.nzxResizable=!0,this.nzTableLayout="auto",this.nzVirtualItemSize=0,this.nzVirtualMaxBufferPx=200,this.nzVirtualMinBufferPx=100,this.nzLoadingDelay=0,this.nzPageIndex=1,this.nzTotal=0,this.nzWidthConfig=[],this.nzData=[],this.nzPaginationPosition="bottom",this.nzPaginationType="default",this.nzFrontPagination=!1,this.nzTemplateMode=!1,this.nzShowPagination=!0,this.nzLoading=!1,this.nzOuterBordered=!1,this.nzBordered=!1,this.nzSize="small",this.nzShowSizeChanger=!0,this.nzHideOnSinglePage=!1,this.nzShowQuickJumper=!0,this.nzSimple=!1,this.nzPageSizeChange=new core.EventEmitter,this.nzPageIndexChange=new core.EventEmitter,this.nzQueryParams=new core.EventEmitter,this.nzCurrentPageDataChange=new core.EventEmitter,this.rowClick=new core.EventEmitter,this.rowDblclick=new core.EventEmitter,this.rowContextmenu=new core.EventEmitter,this.cellClick=new core.EventEmitter,this.cellDblclick=new core.EventEmitter,this.cellContextmenu=new core.EventEmitter,this.headerClick=new core.EventEmitter,this.headerDblclick=new core.EventEmitter,this.headerContextmenu=new core.EventEmitter,this.resize$=new Subject.x}ngOnInit(){var _a;this.nzPageSize=this.nzPageSize||(null===(_a=this.antdService.table)||void 0===_a?void 0:_a.nzPageSize)||10,this.resolveColumns(),this.fetch()}getLinkHref(btn,row,data){if(btn.href)return"string"==typeof btn.href?btn.href:btn.href(row,data)}onResize({width},col){col.nzWidth=width+"px"}tableSizeChange(size,table){this.nzSize=size;const tableMainElement=table.elementRef.nativeElement.querySelector(".ant-table");tableMainElement&&("mini"===size?this.render.addClass(tableMainElement,"ant-table-mini"):this.render.removeClass(tableMainElement,"ant-table-mini"))}onRefreshClick(){this.fetch(!1)}refresh(reset=!0){this.fetch(reset)}fixedClick(column){const hasFixed=this._allColumns.filter((value=>value.fixed)).length;this.scrollX=hasFixed?"100vw":void 0}sortOrderChange(value,col){col.nzSortOrderChange&&col.nzSortOrderChange(value,col);const key=col.nzColumnKey||col.name;this.sortInfo={column:col,order:value,field:key},this.fetch(!1)}fetch(reset=!0){if(!this.api)return;const fetchSetting=Object.assign({},FETCH_SETTING,this.antdService.table,this.fetchSetting),setResult=res=>this.setFetchResult(res,fetchSetting,reset);util.M3.isString(this.api)?FetcherService.resolveParams(this.params).pipe((0,switchMap.w)((_params=>{const commonParams=this.mergeParams(reset,fetchSetting),data=Object.assign({},_params,commonParams);return this.beforeFetch?FetcherService.resolveParams(this.beforeFetch(data)).pipe((_data=>this.doFetch(this.api,fetchSetting.method,commonParams,_data))):this.doFetch(this.api,fetchSetting.method,commonParams,data)}))).subscribe(setResult):util.M3.isObservable(this.api)?this.api.subscribe(setResult):util.M3.isPromise(this.api)?this.api.then(setResult):setResult([])}onRowClick(info){this.rowClick.emit(info),!1!==this.nzxClickSelectedRow&&(this._selectRow=info.row)}doFetch(url,method,params,data){const option={};return method||(method="post"),/^post|put$/i.test(method)?(option.params=params,option.body=data):option.params=Object.assign({},data,params),this.http.request(method,url,option)}setFetchResult(res,fetchSetting,reset){let result={total:0,list:[]};if(this.afterFetch&&util.M3.isFunction(this.afterFetch)){const data=this.afterFetch(res,this.nzPageIndex);if(util.M3.isPromise(data))return void data.then((v=>this.setPageInfo(v)));result=data}else Array.isArray(res)?(result.list=res,result.total=res.length):(result.list=util.M3.get(res,fetchSetting.listField),result.total=util.M3.get(res,fetchSetting.totalField),result.pageIndex=reset?1:util.M3.get(res,fetchSetting.pageIndexField));this.formatColumnData(result.list),this.setPageInfo(result)}setPageInfo(pageInfo){this.nzData=pageInfo.list||[],this.nzTotal=pageInfo.total||0,null!=pageInfo.pageIndex&&(this.nzPageIndex=pageInfo.pageIndex),this.cdr.markForCheck()}formatColumnData(list){if(!list)return;const formatMap=this.nzxColumns.reduce(((prev,curr)=>(curr.name&&curr.format&&(prev[curr.name]=curr.format),prev)),{});list.forEach(((value,index)=>{value&&Object.keys(value).forEach((key=>{if(formatMap[key]){const formatValue=formatMap[key](value[key],value,index);this.isAsync(formatValue)?value["$ASYNC-"+key]=formatValue:value["$FORMAT-"+key]=formatValue}}))}))}mergeParams(reset=!0,fetchSetting){const params={[fetchSetting.pageIndexField]:reset?1:this.nzPageIndex,[fetchSetting.pageSizeField]:this.nzPageSize};if(this.sortInfo){const sortInfo=util.M3.isFunction(this.sortFn)?this.sortFn(this.sortInfo):this.sortInfo;delete sortInfo.column,Object.assign(params,sortInfo)}return params}isAsync(obj){return util.M3.isObservable(obj)||util.M3.isPromise(obj)}resolveColumns(){const{headerRows,bodyRows,allColumns}=this.getRowColumns(this.nzxColumns);this._headerColumns=headerRows,this._allColumns=allColumns,this._bodyColumns=headerRows.length?bodyRows:headerRows[0]}resolveTemplateColumn(){const nameTemplateMap={};for(const tpl of this.children)nameTemplateMap[tpl.named]=tpl.template;this.tplMap&&this.tplMap.forEach(((value,key)=>nameTemplateMap[key]=value)),this._allColumns.forEach((col=>Object.keys(col).filter((v=>/Template$/.test(v))).forEach((tplName=>this.stringToTemplate(col,tplName,nameTemplateMap))))),setTimeout((()=>this.cdr.markForCheck()))}stringToTemplate(col,key,nameTemplateMap){const newKey="_"+key;if("string"==typeof col[key]){const tpl=nameTemplateMap[col[key]];tpl&&(col[newKey]=tpl)}else col[key]instanceof core.TemplateRef&&(col[newKey]=col[key])}thCheckedChange(evt,col){!1!==col.enableCheckAll&&(col.checked=evt,col.nzIndeterminate=!1,this._currentPageData.forEach((v=>!v.disabled&&(v.checked=evt)))),col.thCheckedChange&&col.thCheckedChange(evt,col),this.cdr.markForCheck()}tdCheckedChange(evt,col,row,rowIndex){!1!==col.enableCheckAll&&this.refreshCheckedStatus(col),col.tdCheckedChange&&col.tdCheckedChange(evt,col,row,rowIndex),this.cdr.markForCheck()}onCurrentPageDataChange(list){this._currentPageData=list;const col=this._bodyColumns.filter((v=>v.nzShowCheckbox))[0];col&&this.refreshCheckedStatus(col),this.nzCurrentPageDataChange.emit(list),this.cdr.markForCheck()}refreshCheckedStatus(col){const list=this._currentPageData.filter((v=>!v.disabled));list.length?(col.checked=list.every((v=>v.checked)),col.nzIndeterminate=!col.checked&&list.some((v=>v.checked))):(col.checked=!1,col.nzIndeterminate=!1)}ngAfterContentInit(){this.children.changes.subscribe((()=>this.resolveTemplateColumn())),this.resolveTemplateColumn()}ngAfterViewInit(){if("mini"===this.nzSize&&this.tableSizeChange(this.nzSize,this.nzTable),this.scrollXFillParent||this.scrollYFillParent){const element=this.elementRef.nativeElement.parentElement,fixedAutoScroll=()=>{this.scrollXFillParent&&this.fixXFillParent(element),this.scrollYFillParent&&this.fixYFillParent(element)};(0,fromEvent.R)(window,"resize").pipe((0,takeUntil.R)(this.resize$),(0,debounceTime.b)(80)).subscribe((()=>fixedAutoScroll())),fixedAutoScroll()}}ngOnChanges(changes){(changes.nzxColumns&&!changes.nzxColumns.isFirstChange()||changes.tplMap&&!changes.tplMap.isFirstChange())&&(this.resolveColumns(),this.resolveTemplateColumn()),changes.api&&!changes.api.isFirstChange()&&this.fetch(!0),(changes.nzPageIndex&&!changes.nzPageIndex.isFirstChange()||changes.nzPageSize&&!changes.nzPageSize.isFirstChange())&&this.fetch()}sortedColumn(event){(0,drag_drop.bA)(this._headerColumns[0],event.previousIndex,event.currentIndex)}ngOnDestroy(){this.resize$.next(),this.resize$.complete()}getRowColumns(originColumns){let maxLevel=0;const allColumns=[];util.M3.forEachTree(originColumns,((node,parent,level)=>{if(this.normalProps(node),allColumns.push(node),node.colspan=node.children&&node.children.length?0:1,node.level=level,level>maxLevel&&(maxLevel=level),node.parent=parent,parent&&!node.children){let p=parent;for(;p;)p.colspan++,p=p.parent}}));const headerRows=Array.from({length:maxLevel+1}).fill(0).map((()=>[])),bodyRows=[];return allColumns.forEach((col=>{col.children?col.rowspan=1:(col.rowspan=maxLevel-col.level+1,bodyRows.push(col)),headerRows[col.level].push(col)})),{headerRows,bodyRows,allColumns}}normalProps(col){null==col.visible&&(col.visible=!0),null==col.thText&&col.isIndex&&(col.thText="序号")}fixXFillParent(element){element.clientWidth&&(this.minScrollX?this.scrollX=`${element.clientWidth>=this.minScrollX?element.clientWidth:this.minScrollX}px`:this.scrollX=`${element.clientWidth}px`)}fixYFillParent(element){element.clientHeight&&(this.minScrollY?this.scrollY=`${element.clientHeight>=this.minScrollY?element.clientHeight:this.minScrollY}px`:this.scrollY=`${element.clientHeight}px`)}};NzxTableComponent.ctorParameters=()=>[{type:core.ChangeDetectorRef},{type:core.Renderer2},{type:http.eN},{type:core.ElementRef},{type:NzxAntdService}],NzxTableComponent.propDecorators={api:[{type:core.Input}],params:[{type:core.Input}],nzxRefreshVisible:[{type:core.Input}],nzxResizeVisible:[{type:core.Input}],nzxSettingVisible:[{type:core.Input}],nzxStripe:[{type:core.Input}],beforeFetch:[{type:core.Input}],afterFetch:[{type:core.Input}],fetchSetting:[{type:core.Input}],sortFn:[{type:core.Input}],nzxColumns:[{type:core.Input}],nzxDefaultRenderHeader:[{type:core.Input}],title:[{type:core.Input}],nzxShowHeader:[{type:core.Input}],toolbarBefore:[{type:core.Input}],toolbar:[{type:core.Input}],nzxResizable:[{type:core.Input}],nzTableLayout:[{type:core.Input}],nzShowTotal:[{type:core.Input}],nzItemRender:[{type:core.Input}],nzTitle:[{type:core.Input}],nzFooter:[{type:core.Input}],nzNoResult:[{type:core.Input}],nzPageSizeOptions:[{type:core.Input}],nzVirtualItemSize:[{type:core.Input}],nzVirtualMaxBufferPx:[{type:core.Input}],nzVirtualMinBufferPx:[{type:core.Input}],nzLoadingDelay:[{type:core.Input}],nzPageIndex:[{type:core.Input}],nzPageSize:[{type:core.Input}],nzTotal:[{type:core.Input}],nzWidthConfig:[{type:core.Input}],nzData:[{type:core.Input}],nzPaginationPosition:[{type:core.Input}],scrollX:[{type:core.Input}],scrollY:[{type:core.Input}],minScrollX:[{type:core.Input}],minScrollY:[{type:core.Input}],scrollXFillParent:[{type:core.Input}],scrollYFillParent:[{type:core.Input}],nzPaginationType:[{type:core.Input}],nzFrontPagination:[{type:core.Input}],nzTemplateMode:[{type:core.Input}],nzShowPagination:[{type:core.Input}],nzLoading:[{type:core.Input}],nzOuterBordered:[{type:core.Input}],nzLoadingIndicator:[{type:core.Input}],nzBordered:[{type:core.Input}],nzSize:[{type:core.Input}],nzShowSizeChanger:[{type:core.Input}],nzHideOnSinglePage:[{type:core.Input}],nzShowQuickJumper:[{type:core.Input}],nzSimple:[{type:core.Input}],actionVisible:[{type:core.Input}],toolbarVisible:[{type:core.Input}],nzxClickSelectedRow:[{type:core.Input}],tplMap:[{type:core.Input}],nzVirtualForTrackBy:[{type:core.Input}],nzPageSizeChange:[{type:core.Output}],nzPageIndexChange:[{type:core.Output}],nzQueryParams:[{type:core.Output}],nzCurrentPageDataChange:[{type:core.Output}],rowClick:[{type:core.Output}],rowDblclick:[{type:core.Output}],rowContextmenu:[{type:core.Output}],cellClick:[{type:core.Output}],cellDblclick:[{type:core.Output}],cellContextmenu:[{type:core.Output}],headerClick:[{type:core.Output}],headerDblclick:[{type:core.Output}],headerContextmenu:[{type:core.Output}],children:[{type:core.ContentChildren,args:[NamedTemplate]}],nzTable:[{type:core.ViewChild,args:["basicTable"]}]},NzxTableComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"nzx-table",template:table_componentngResource,preserveWhitespaces:!1,encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,host:{"[class.nzx-table]":"true"}})],NzxTableComponent);var table_header_componentngResource=__webpack_require__("./lib/table/header/table-header/table-header.component.html?ngResource"),table_header_component=__webpack_require__("./lib/table/header/table-header/table-header.component.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=Omhvc3R7ZGlzcGxheTogYmxvY2t9!./lib/table/header/table-header/table-header.component.ts");let NzxTableHeaderComponent=class NzxTableHeaderComponent{constructor(){this.tableSize="small",this.tableSizeChange=new core.EventEmitter,this.refreshClick=new core.EventEmitter,this.tableSizeOptions=[{sizeName:"大号",selected:!1,value:"default"},{sizeName:"中等",selected:!1,value:"middle"},{sizeName:"紧凑",selected:!0,value:"small"},{sizeName:"迷你",selected:!0,value:"mini"}]}ngOnInit(){this.tableSizeOptions.forEach((v=>v.selected=v.value===this.tableSize))}ngOnChanges(changes){changes.tableSize&&!changes.tableSize.isFirstChange()&&this.ngOnInit()}};NzxTableHeaderComponent.ctorParameters=()=>[],NzxTableHeaderComponent.propDecorators={tableSize:[{type:core.Input}],actionVisible:[{type:core.Input}],refreshVisible:[{type:core.Input}],resizeVisible:[{type:core.Input}],tableSizeChange:[{type:core.Output}],refreshClick:[{type:core.Output}]},NzxTableHeaderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"nzx-table-header",template:table_header_componentngResource,preserveWhitespaces:!1,encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[table_header_component]})],NzxTableHeaderComponent);var column_setting_componentngResource=__webpack_require__("./lib/table/header/column-setting/column-setting.component.html?ngResource");let NzxColumnSettingComponent=class NzxColumnSettingComponent{constructor(renderer){this.renderer=renderer,this._nzxColumns=[],this.dragPreviewClass="nzx-column-setting__drag-preview",this.columnNameVisible=!0,this.columnCheckedChange=new core.EventEmitter,this.sortedColumn=new core.EventEmitter,this.columnNameCheckedChange=new core.EventEmitter,this.fixedClick=new core.EventEmitter}set nzxColumns(value){value&&(this._nzxColumns=value,this.refreshNameCheckedStatus())}get nzxColumns(){return this._nzxColumns}ngOnInit(){}columnVisible(item,checked){this.refreshNameCheckedStatus(),this.columnCheckedChange.emit(item)}fixedColumn(column,fixed){column.fixed!==fixed&&(column.fixed=fixed,this.fixedClick.emit(column))}dropColumn(event,list){(0,drag_drop.bA)(list,event.previousIndex,event.currentIndex),this.sortedColumn.emit(event)}cdkDragStarted(event){const preview=new core.ElementRef(document.querySelector(".cdk-drag.cdk-drag-preview"));this.renderer.addClass(preview.nativeElement,this.dragPreviewClass)}cdkDragReleased(event){const preview=new core.ElementRef(document.querySelector(".cdk-drag.cdk-drag-preview"));this.renderer.removeClass(preview.nativeElement,this.dragPreviewClass)}columnNameChange(checked){this._nzxColumns&&this._nzxColumns.length&&(this._columnNameChecked=checked,this._indeterminate=!1,this._nzxColumns.filter((v=>0!=v.settingVisible&&!0!==v.settingDisabled)).forEach((v=>v.visible=checked)),this.columnNameCheckedChange.emit(checked))}refreshNameCheckedStatus(){if(this._nzxColumns&&this._nzxColumns.length){const list=this._nzxColumns.filter((v=>0!=v.settingVisible&&!0!==v.settingDisabled));this._columnNameChecked=list.every((item=>item.visible)),this._indeterminate=!this._columnNameChecked&&list.some((item=>item.visible))}else this._columnNameChecked=!1,this._indeterminate=!1}};NzxColumnSettingComponent.ctorParameters=()=>[{type:core.Renderer2}],NzxColumnSettingComponent.propDecorators={dragPreviewClass:[{type:core.Input}],columnNameVisible:[{type:core.Input}],nzxColumns:[{type:core.Input}],columnCheckedChange:[{type:core.Output}],sortedColumn:[{type:core.Output}],columnNameCheckedChange:[{type:core.Output}],fixedClick:[{type:core.Output}]},NzxColumnSettingComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"nzx-column-setting",template:column_setting_componentngResource,preserveWhitespaces:!1,encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush})],NzxColumnSettingComponent);var ng_zorro_antd_table=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-table.mjs"),ng_zorro_antd_resizable=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-resizable.mjs"),ng_zorro_antd_icon=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-icon.mjs"),ng_zorro_antd_popover=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-popover.mjs"),ng_zorro_antd_checkbox=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-checkbox.mjs"),ng_zorro_antd_divider=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-divider.mjs"),ng_zorro_antd_dropdown=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-dropdown.mjs"),ng_zorro_antd_tooltip=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-tooltip.mjs");let DefaultifyPipe=class DefaultifyPipe{transform(value,defaultValue){return null==value?defaultValue||"--":value}};DefaultifyPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"defaultify"})],DefaultifyPipe);let FilterPipe=class FilterPipe{transform(array,matcher,searchText){if("string"==typeof matcher){if(util.M3.isEmpty(searchText))return array;const text=searchText.toLowerCase();return(array||[]).filter((v=>-1!==util.M3.get(v,matcher,"").toLowerCase().indexOf(text)))}return(array||[]).filter((v=>matcher(v)))}};FilterPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"filter"})],FilterPipe);var platform_browser=__webpack_require__("./node_modules/@angular/platform-browser/fesm2020/platform-browser.mjs");let TrustUrlPipe=class TrustUrlPipe{constructor(sanitizer){this.sanitizer=sanitizer}transform(url){return this.sanitizer.bypassSecurityTrustResourceUrl(url)}};TrustUrlPipe.ctorParameters=()=>[{type:platform_browser.DomSanitizer}],TrustUrlPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"trustUrl"})],TrustUrlPipe);let TrustHtmlPipe=class TrustHtmlPipe{constructor(sanitizer){this.sanitizer=sanitizer}transform(html,enabled=!0){return enabled?this.sanitizer.bypassSecurityTrustHtml(html):html}};TrustHtmlPipe.ctorParameters=()=>[{type:platform_browser.DomSanitizer}],TrustHtmlPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"trustHtml"})],TrustHtmlPipe);let TrustScriptPipe=class TrustScriptPipe{constructor(sanitizer){this.sanitizer=sanitizer}transform(script,enabled=!0){return enabled?this.sanitizer.bypassSecurityTrustScript(script):script}};TrustScriptPipe.ctorParameters=()=>[{type:platform_browser.DomSanitizer}],TrustScriptPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"trustScript"})],TrustScriptPipe);let TrustStylePipe=class TrustStylePipe{constructor(sanitizer){this.sanitizer=sanitizer}transform(style,enabled=!0){return enabled?this.sanitizer.bypassSecurityTrustStyle(style):style}};TrustStylePipe.ctorParameters=()=>[{type:platform_browser.DomSanitizer}],TrustStylePipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"trustStyle"})],TrustStylePipe);let MathPipe=class MathPipe{transform(value,fnName,fixed){if(null==value)return null;const n="string"==typeof value?Number(value):value,result=Math[fnName](n);return null==fixed?result:n.toFixed(fixed)}};MathPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"math"})],MathPipe);let TimeUnitPipe=class TimeUnitPipe{transform(value,unit){if(null==value)return null;const second="s"===unit?value:Math.floor(value/1e3),days=Math.floor(second/86400),hours=Math.floor(second%86400/3600),minutes=Math.floor(second%86400%3600/60),seconds=Math.floor(second%86400%3600%60),units=["天","小时","分","秒"];return[days,hours,minutes,seconds].reduce(((str,v,i)=>v?str+v+units[i]:str),"")||"0秒"}};TimeUnitPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"timeUnit"})],TimeUnitPipe);var from=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js");let ToAsyncPipe=class ToAsyncPipe{constructor(fetcher){this.fetcher=fetcher}transform(value,option){if(null==value)return(0,of.of)(null==option?void 0:option.defaultValue);const opt=option||{},mapFn=util.M3.isFunction(opt.map)?opt.map:data=>data;return"string"==typeof value?this.fetcher.fetch(Object.assign(Object.assign({},opt),{url:value})).pipe((0,map.U)((v=>util.M3.defaultIfy(v,null==option?void 0:option.defaultValue))),(0,map.U)(mapFn)):util.M3.isPromise(value)||util.M3.isObservable(value)?(0,from.D)(value).pipe((0,map.U)((v=>util.M3.defaultIfy(v,null==option?void 0:option.defaultValue))),(0,map.U)(mapFn)):(0,of.of)(value).pipe((0,map.U)(mapFn))}};ToAsyncPipe.ctorParameters=()=>[{type:FetcherService}],ToAsyncPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"toAsync"})],ToAsyncPipe);let DicPipe=class DicPipe{constructor(dicService){this.dicService=dicService}transform(key,isNumber,isMap){return null==key?null:isMap?this.dicService.getDicMap(key,isNumber):this.dicService.getDic(key,isNumber)}};DicPipe.ctorParameters=()=>[{type:DicService}],DicPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"dic"})],DicPipe);const PIPE=[MathPipe,DefaultifyPipe,TrustUrlPipe,TrustHtmlPipe,TrustScriptPipe,TrustStylePipe,TimeUnitPipe,ToAsyncPipe,FilterPipe,DicPipe];let NzxPipeModule=class NzxPipeModule{};NzxPipeModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[PIPE],imports:[common.ez],exports:[PIPE]})],NzxPipeModule);var ng_zorro_antd_core_outlet=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-core-outlet.mjs");const Table_stories={title:"组件/Table 表格",component:NzxTableComponent,decorators:[(0,client.moduleMetadata)({declarations:[NzxTableComponent,NzxTableHeaderComponent,NzxColumnSettingComponent],imports:[ng_zorro_antd_table.HQ,ng_zorro_antd_resizable.GS,ng_zorro_antd_icon.PV,ng_zorro_antd_popover.$6,ng_zorro_antd_checkbox.Wr,drag_drop._t,ng_zorro_antd_divider.S,ng_zorro_antd_dropdown.b1,ng_zorro_antd_tooltip.cg,NzxDirectiveModule,NzxPipeModule,NzxServiceModule,ng_zorro_antd_core_outlet.T,ng_zorro_antd_button.sL]})],argTypes:{api:{table:{type:{required:!0}}},nzData:{table:{type:{summary:"Record<string, any>[]"}},control:{type:"array"}},nzWidthConfig:{table:{type:{summary:"ReadonlyArray<string | null>"}},control:{type:"array"}},beforeFetch:{table:{type:{summary:"(params: Record<string, NzSafeAny>) => Record<string, NzSafeAny> | Promise<NzSafeAny>"}}},afterFetch:{table:{type:{summary:"(res: NzSafeAny, pageIndex: number) => PageInfo<T> | Promise<PageInfo<T>>"}}},actionVisible:{table:{defaultValue:"true"}},toolbarVisible:{table:{defaultValue:"true"}},nzPageSize:{table:{defaultValue:{summary:"10"}}}},args:{actionVisible:!0,toolbarVisible:!0,nzPageSize:10,nzData:[],nzWidthConfig:[],nzxClickSelectedRow:!0},parameters:{controls:{exclude:["_allColumns","_bodyColumns","_currentPageData","_headerColumns","defaultPageSizeOptions","sortInfo","ngOnChanges","ngOnInit","nzTable","children","_columnNameChecked","_indeterminate","_nzxColumns","_selectRow","resize$"]},docs:{moduleName:"",importName:""}}},Template=stories.hM,xing="赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨".split(""),nzData=Array(10).fill(0).map(((m,i)=>({name:xing[i%xing.length]+"三",org:"测试部门",firstName:xing[i%xing.length],lastName:"六"}))),Default=Template({nzxColumns:[{name:"name",thText:"姓名"},{name:"org",thText:"部门"}],nzData:util.M3.clone(nzData)}),IsLoading=Template({nzLoading:!0,nzxColumns:[{name:"name",thText:"姓名"},{name:"org",thText:"部门"}]}),IsIndex=Template({nzxColumns:[{isIndex:!0},{name:"name",thText:"姓名"},{name:"org",thText:"部门"}],nzData:util.M3.clone(nzData)}),IsIndexName=Template({nzxColumns:[{isIndex:!0,thText:"编号"},{name:"name",thText:"姓名"},{name:"org",thText:"部门"}],nzData:util.M3.clone(nzData)}),NzShowCheckbox=Template({nzxColumns:[{nzShowCheckbox:!0},{name:"name",thText:"姓名"},{name:"org",thText:"部门"}],nzData:util.M3.clone(nzData).map(((v,i)=>(v.checked=i%2==0,v)))}),ColspanHead=Template({nzBordered:!0,nzxColumns:[{nzShowCheckbox:!0,nzText:"测试"},{thText:"姓名",children:[{name:"firstName",thText:"FIRST_NAME"},{name:"lastName",thText:"LAST_NAME"}]},{name:"org",thText:"部门"}],nzData:util.M3.clone(nzData)}),ScrollTemplate=args=>({props:args,template:'\n    <div style="height: 50%; overflow: hidden;">\n        <nzx-table [nzData]="nzData" [nzxColumns]="nzxColumns" [nzFrontPagination]="false" scrollY="100%"></nzx-table>\n    </div>\n    '});ScrollTemplate.args={nzxColumns:[{name:"name",thText:"姓名"},{name:"org",thText:"部门"}],nzData:Array(100).fill(0).map(((m,i)=>({name:xing[i%xing.length]+"三",org:"测试部门",firstName:xing[i%xing.length],lastName:"六"})))}},"./.storybook/preview.js-generated-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,{__namedExportsOrder:()=>__namedExportsOrder,decorators:()=>decorators,parameters:()=>parameters});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var ClientApi=__webpack_require__("./node_modules/@storybook/client-api/dist/esm/ClientApi.js"),angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[{"name":"DefaultifyPipe","id":"pipe-DefaultifyPipe-b6cdd8d0351797bd7036c9e8744ecdf36b16e4456ba75b3b365c1635653645b7f20b7b55c1da8f43446a19b01fc537ba6482f5bc0e1dd54b314fc7a91110c6b9","file":"lib/pipe/defaultify.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"value","type":"T | undefined | null","deprecated":false,"deprecationMessage":""},{"name":"defaultValue","type":"T | string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"T | string","typeParameters":["T"],"line":8,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"T | undefined | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"defaultValue","type":"T | string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"ngname":"defaultify","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n@Pipe({\\r\\n  name: \'defaultify\'\\r\\n})\\r\\nexport class DefaultifyPipe implements PipeTransform {\\r\\n  transform<T = NzSafeAny>(value: T | undefined | null, defaultValue?: T | string): T | string {\\r\\n    return value == null ? defaultValue || \'--\' : value;\\r\\n  }\\r\\n}\\r\\n"},{"name":"DicPipe","id":"pipe-DicPipe-67efb1e87c195a1fe08ebde3322364a2ac38cbc0beb1006027a016c8db17aed5a0f3044a87f04a215b71a6199eef1705ce0551eb4468a100db1a77db43e13cae","file":"lib/pipe/dic.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"<p>字典管道</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\"></code></pre></div><div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">{{&#39;status&#39; | dic | async}}\\n\\n{{&#39;status&#39; | dic: true | async}}\\n\\n// 配置filter使用\\n\\n{{&#39;status&#39; | dic | async | filter: &#39;value&#39; : &#39;test value&#39; }}</code></pre></div>","rawdescription":"\\n\\n字典管道\\n```html\\n```\\n``` html\\n{{\'status\' | dic | async}}\\n\\n{{\'status\' | dic: true | async}}\\n\\n// 配置filter使用\\n\\n{{\'status\' | dic | async | filter: \'value\' : \'test value\' }}\\n```\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true},{"name":"isMap","type":"","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Observable | null","typeParameters":[],"line":31,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n字典管道\\n","description":"<p>字典管道</p>\\n","jsdoctags":[{"name":{"pos":538,"end":541,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":532,"end":537,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典key</p>\\n"},{"name":{"pos":561,"end":569,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isNumber"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":555,"end":560,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否数字</p>\\n"},{"name":{"pos":588,"end":593,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isMap"},"type":"","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":582,"end":587,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>返回数组结构</p>\\n"}]},{"name":"transform","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true},{"name":"isMap","type":"","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Observable | null","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n字典管道\\n","description":"<p>字典管道</p>\\n","jsdoctags":[{"name":{"pos":731,"end":734,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":725,"end":730,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典key</p>\\n"},{"name":{"pos":754,"end":762,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isNumber"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":748,"end":753,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否数字</p>\\n"},{"name":{"pos":781,"end":786,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isMap"},"type":"","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":775,"end":780,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>返回map结构</p>\\n"}]},{"name":"transform","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true},{"name":"isMap","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Observable | null","typeParameters":[],"line":40,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}},{"name":"isMap","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"ngname":"dic","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\nimport { DicItem, DicService } from \'@xmagic/nzx-antd/service\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n/**\\r\\n * 字典管道\\r\\n * @example\\r\\n *\\r\\n * ``` html\\r\\n * {{\'status\' | dic | async}}\\r\\n *\\r\\n * {{\'status\' | dic: true | async}}\\r\\n *\\r\\n * // 配置filter使用\\r\\n *\\r\\n * {{\'status\' | dic | async | filter: \'value\' : \'test value\' }}\\r\\n * ```\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'dic\'\\r\\n})\\r\\nexport class DicPipe implements PipeTransform {\\r\\n  constructor(protected dicService: DicService) {}\\r\\n\\r\\n  /**\\r\\n   * 字典管道\\r\\n   * @param key 字典key\\r\\n   * @param isNumber 是否数字\\r\\n   * @param isMap 返回数组结构\\r\\n   */\\r\\n  transform(key: string, isNumber?: boolean, isMap?: false): Observable<DicItem[]> | null;\\r\\n  /**\\r\\n   * 字典管道\\r\\n   * @param key 字典key\\r\\n   * @param isNumber 是否数字\\r\\n   * @param isMap 返回map结构\\r\\n   */\\r\\n  transform(key: string, isNumber?: boolean, isMap?: true): Observable<Record<string, string>> | null;\\r\\n\\r\\n  transform(key: string, isNumber?: boolean, isMap?: boolean): Observable<DicItem[] | Record<string, string>> | null {\\r\\n    if (key == null) {\\r\\n      return null;\\r\\n    }\\r\\n    return isMap ? this.dicService.getDicMap(key, isNumber) : this.dicService.getDic(key, isNumber);\\r\\n  }\\r\\n}\\r\\n"},{"name":"FilterPipe","id":"pipe-FilterPipe-25e76955ae34f28929417116920a874f0443e67412d818eec131d47264a4e82f90cf7854d6ac7c823ca325e7b120f809e97cfdd2f526c3d2915c1584c4a1c374","file":"lib/pipe/filter.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"array","type":"T[]","deprecated":false,"deprecationMessage":""},{"name":"matcher","type":"string","deprecated":false,"deprecationMessage":""},{"name":"searchText","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"T[]","typeParameters":["T"],"line":9,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"array","type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"matcher","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"searchText","type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"transform","args":[{"name":"array","type":"T[]","deprecated":false,"deprecationMessage":""},{"name":"matcher","type":"FilterMatcherFn<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"T[]","typeParameters":["T"],"line":10,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"array","type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"matcher","type":"FilterMatcherFn<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"transform","args":[{"name":"array","type":"T[]","deprecated":false,"deprecationMessage":""},{"name":"matcher","type":"FilterMatcherFn<T> | string","deprecated":false,"deprecationMessage":""},{"name":"searchText","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"T[]","typeParameters":["T"],"line":17,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nFilter array\\n\\n过滤数组\\n","description":"<p>Filter array</p>\\n<p>过滤数组</p>\\n","jsdoctags":[{"name":"array","type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"matcher","type":"FilterMatcherFn<T> | string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"searchText","type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"ngname":"filter","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\n\\r\\n@Pipe({\\r\\n  name: \'filter\'\\r\\n})\\r\\nexport class FilterPipe implements PipeTransform {\\r\\n  transform<T = NzSafeAny>(array: T[], matcher: string, searchText?: string): T[];\\r\\n  transform<T = NzSafeAny>(array: T[], matcher: FilterMatcherFn<T>): T[];\\r\\n\\r\\n  /**\\r\\n   * Filter array\\r\\n   *\\r\\n   * 过滤数组\\r\\n   */\\r\\n  transform<T = NzSafeAny>(array: T[], matcher: FilterMatcherFn<T> | string, searchText?: string): T[] {\\r\\n    if (typeof matcher === \'string\') {\\r\\n      if (NzxUtils.isEmpty(searchText)) {\\r\\n        return array;\\r\\n      }\\r\\n\\r\\n      // @ts-ignore\\r\\n      const text = searchText.toLowerCase();\\r\\n      return (array || []).filter(v => NzxUtils.get(v, matcher, \'\').toLowerCase().indexOf(text) !== -1);\\r\\n    }\\r\\n    return (array || []).filter(v => matcher(v));\\r\\n  }\\r\\n}\\r\\n\\r\\nexport type FilterMatcherFn<T> = (item: T) => boolean;\\r\\n"},{"name":"MathPipe","id":"pipe-MathPipe-e630c08dfe8ec38560675d0e5de92193aaca193e8e26f46c4d5160f0f95e7b82d2fa2d0b8702fc60ee03d0faa9c77b8c8a607fc74d893fb2df40a23b74443170","file":"lib/pipe/math.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"<p>调用数学函数 如{{ 5.1 | math: &#39;ceil&#39; }} =&gt; 6</p>\\n","rawdescription":"\\n\\n调用数学函数 如{{ 5.1 | math: \'ceil\' }} => 6\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"value","type":"string | number","deprecated":false,"deprecationMessage":""},{"name":"fnName","type":"","deprecated":false,"deprecationMessage":""},{"name":"fixed","type":"number","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"string | null","typeParameters":[],"line":10,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"string | number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"fnName","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"fixed","type":"number","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"ngname":"math","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\n\\r\\n/**\\r\\n * 调用数学函数 如{{ 5.1 | math: \'ceil\' }} => 6\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'math\'\\r\\n})\\r\\nexport class MathPipe implements PipeTransform {\\r\\n  transform(value: string | number, fnName: keyof Math, fixed?: number): string | null {\\r\\n    if (value == null) {\\r\\n      return null;\\r\\n    }\\r\\n    const n: number = typeof value === \'string\' ? Number(value) : value;\\r\\n    // @ts-ignore\\r\\n    const result = Math[fnName](n);\\r\\n    return fixed == null ? result : n.toFixed(fixed);\\r\\n  }\\r\\n}\\r\\n"},{"name":"TimeUnitPipe","id":"pipe-TimeUnitPipe-5b4a309155977d3375e8aaa20a52646528a523180642098a5aed0b16e6e3217063f85c270625154c8e3aa6ccde46927f50d837b7f8501b64636d79f9c45b33d2","file":"lib/pipe/time-unit.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"value","type":"number | undefined | null","deprecated":false,"deprecationMessage":""},{"name":"unit","type":"\\"s\\" | \\"ms\\"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string | null","typeParameters":[],"line":7,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"number | undefined | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"unit","type":"\\"s\\" | \\"ms\\"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"ngname":"timeUnit","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\n\\r\\n@Pipe({\\r\\n  name: \'timeUnit\'\\r\\n})\\r\\nexport class TimeUnitPipe implements PipeTransform {\\r\\n  transform(value: number | undefined | null, unit: \'s\' | \'ms\'): string | null {\\r\\n    if (value == null) {\\r\\n      return null;\\r\\n    }\\r\\n\\r\\n    const second = unit === \'s\' ? value : Math.floor(value / 1000);\\r\\n    const days = Math.floor(second / 86400);\\r\\n    const hours = Math.floor((second % 86400) / 3600);\\r\\n    const minutes = Math.floor(((second % 86400) % 3600) / 60);\\r\\n    const seconds = Math.floor(((second % 86400) % 3600) % 60);\\r\\n\\r\\n    const units = [\'天\', \'小时\', \'分\', \'秒\'];\\r\\n    const format = [days, hours, minutes, seconds].reduce((str, v, i) => (v ? str + v + units[i] : str), \'\');\\r\\n    return format || \'0秒\';\\r\\n  }\\r\\n}\\r\\n"},{"name":"ToAsyncPipe","id":"pipe-ToAsyncPipe-4719e346c930ed69b9aedd5b3683879a0980ee93bc12f6af21305397bd94cd459f1339643891d933a63616fa3b08933f76d8b4411038d899c0a7df181d1c20cc","file":"lib/pipe/to-async.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"<p>把请求信息转换为异步对象</p>\\n","rawdescription":"\\n\\n把请求信息转换为异步对象\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"value","type":"string | Observable<T> | Promise<T> | T","deprecated":false,"deprecationMessage":""},{"name":"option","type":"AsyncOption","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Observable | null","typeParameters":["T","U"],"line":21,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n转换为Observable\\n","description":"<p>转换为Observable</p>\\n","jsdoctags":[{"name":{"pos":491,"end":496,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string | Observable<T> | Promise<T> | T","deprecated":false,"deprecationMessage":"","tagName":{"pos":485,"end":490,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>可以是url或者Observable, Promise</p>\\n"},{"name":{"pos":538,"end":544,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"option"},"type":"AsyncOption","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":532,"end":537,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>配置项</p>\\n"}]}],"ngname":"toAsync","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\nimport { from, map, Observable, of } from \'rxjs\';\\r\\nimport { FetcherService, FetchOptions } from \'@xmagic/nzx-antd/service\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n/**\\r\\n * 把请求信息转换为异步对象\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'toAsync\'\\r\\n})\\r\\nexport class ToAsyncPipe implements PipeTransform {\\r\\n  constructor(private fetcher: FetcherService) {}\\r\\n\\r\\n  /**\\r\\n   * 转换为Observable\\r\\n   * @param value 可以是url或者Observable, Promise\\r\\n   * @param option 配置项\\r\\n   */\\r\\n  transform<T = NzSafeAny, U = NzSafeAny>(\\r\\n    value: string | Observable<T> | Promise<T> | T,\\r\\n    option?: AsyncOption\\r\\n  ): Observable<U> | null {\\r\\n    if (value == null) {\\r\\n      return of(option?.defaultValue as U);\\r\\n    }\\r\\n\\r\\n    const opt = option || ({} as AsyncOption);\\r\\n    const mapFn = NzxUtils.isFunction(opt.map) ? opt.map : (data: T) => data as unknown as U;\\r\\n    if (typeof value === \'string\') {\\r\\n      return this.fetcher.fetch<T>({ ...opt, url: value }).pipe(\\r\\n        map(v => NzxUtils.defaultIfy(v, option?.defaultValue)),\\r\\n        map<T, U>(mapFn)\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if (NzxUtils.isPromise(value) || NzxUtils.isObservable(value)) {\\r\\n      return from(value).pipe(\\r\\n        map(v => NzxUtils.defaultIfy(v, option?.defaultValue)),\\r\\n        map<T, U>(mapFn)\\r\\n      );\\r\\n    }\\r\\n\\r\\n    return of(value as T).pipe(map<T, U>(mapFn));\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 异步请求信息\\r\\n */\\r\\nexport type AsyncOption = Omit<FetchOptions, \'url\'> & {\\r\\n  /**\\r\\n   * 映射数据\\r\\n   * @param data\\r\\n   * @param index\\r\\n   */\\r\\n  map?: (data: NzSafeAny) => NzSafeAny;\\r\\n  /**\\r\\n   * 默认值\\r\\n   */\\r\\n  defaultValue?: NzSafeAny;\\r\\n};\\r\\n"},{"name":"TrustHtmlPipe","id":"pipe-TrustHtmlPipe-37678dcf3f360c63b8f086adf879a6c1f574701849f8b0366907941aade33c4667710ba3369c22a4eb6c753ee9fafdbd0c50a8b6aaf12da3f691c49a7f2cdf87","file":"lib/pipe/trust-resource.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"<p>非安全加载HTML</p>\\n","rawdescription":"\\n\\n非安全加载HTML\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"html","type":"string","deprecated":false,"deprecationMessage":""},{"name":"enabled","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"SafeHtml","typeParameters":[],"line":25,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"html","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"enabled","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}}]}],"ngname":"trustHtml","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from \'@angular/platform-browser\';\\r\\n\\r\\n/**\\r\\n * 非安全加载URL,比如加载iframe url\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustUrl\'\\r\\n})\\r\\nexport class TrustUrlPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(url: string): SafeResourceUrl {\\r\\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全加载HTML\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustHtml\'\\r\\n})\\r\\nexport class TrustHtmlPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(html: string, enabled = true): SafeHtml {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustHtml(html) : html;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全调用Script\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustScript\'\\r\\n})\\r\\nexport class TrustScriptPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(script: string, enabled = true): SafeScript {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustScript(script) : script;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全调用Style\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustStyle\'\\r\\n})\\r\\nexport class TrustStylePipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(style: string, enabled = true): SafeStyle {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustStyle(style) : style;\\r\\n  }\\r\\n}\\r\\n"},{"name":"TrustScriptPipe","id":"pipe-TrustScriptPipe-37678dcf3f360c63b8f086adf879a6c1f574701849f8b0366907941aade33c4667710ba3369c22a4eb6c753ee9fafdbd0c50a8b6aaf12da3f691c49a7f2cdf87","file":"lib/pipe/trust-resource.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"<p>非安全调用Script</p>\\n","rawdescription":"\\n\\n非安全调用Script\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"script","type":"string","deprecated":false,"deprecationMessage":""},{"name":"enabled","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"SafeScript","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"script","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"enabled","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}}]}],"ngname":"trustScript","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from \'@angular/platform-browser\';\\r\\n\\r\\n/**\\r\\n * 非安全加载URL,比如加载iframe url\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustUrl\'\\r\\n})\\r\\nexport class TrustUrlPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(url: string): SafeResourceUrl {\\r\\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全加载HTML\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustHtml\'\\r\\n})\\r\\nexport class TrustHtmlPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(html: string, enabled = true): SafeHtml {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustHtml(html) : html;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全调用Script\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustScript\'\\r\\n})\\r\\nexport class TrustScriptPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(script: string, enabled = true): SafeScript {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustScript(script) : script;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全调用Style\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustStyle\'\\r\\n})\\r\\nexport class TrustStylePipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(style: string, enabled = true): SafeStyle {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustStyle(style) : style;\\r\\n  }\\r\\n}\\r\\n"},{"name":"TrustStylePipe","id":"pipe-TrustStylePipe-37678dcf3f360c63b8f086adf879a6c1f574701849f8b0366907941aade33c4667710ba3369c22a4eb6c753ee9fafdbd0c50a8b6aaf12da3f691c49a7f2cdf87","file":"lib/pipe/trust-resource.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"<p>非安全调用Style</p>\\n","rawdescription":"\\n\\n非安全调用Style\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"style","type":"string","deprecated":false,"deprecationMessage":""},{"name":"enabled","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"SafeStyle","typeParameters":[],"line":51,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"style","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"enabled","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}}]}],"ngname":"trustStyle","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from \'@angular/platform-browser\';\\r\\n\\r\\n/**\\r\\n * 非安全加载URL,比如加载iframe url\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustUrl\'\\r\\n})\\r\\nexport class TrustUrlPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(url: string): SafeResourceUrl {\\r\\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全加载HTML\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustHtml\'\\r\\n})\\r\\nexport class TrustHtmlPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(html: string, enabled = true): SafeHtml {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustHtml(html) : html;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全调用Script\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustScript\'\\r\\n})\\r\\nexport class TrustScriptPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(script: string, enabled = true): SafeScript {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustScript(script) : script;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全调用Style\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustStyle\'\\r\\n})\\r\\nexport class TrustStylePipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(style: string, enabled = true): SafeStyle {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustStyle(style) : style;\\r\\n  }\\r\\n}\\r\\n"},{"name":"TrustUrlPipe","id":"pipe-TrustUrlPipe-37678dcf3f360c63b8f086adf879a6c1f574701849f8b0366907941aade33c4667710ba3369c22a4eb6c753ee9fafdbd0c50a8b6aaf12da3f691c49a7f2cdf87","file":"lib/pipe/trust-resource.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"<p>非安全加载URL,比如加载iframe url</p>\\n","rawdescription":"\\n\\n非安全加载URL,比如加载iframe url\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"SafeResourceUrl","typeParameters":[],"line":12,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"ngname":"trustUrl","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from \'@angular/platform-browser\';\\r\\n\\r\\n/**\\r\\n * 非安全加载URL,比如加载iframe url\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustUrl\'\\r\\n})\\r\\nexport class TrustUrlPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(url: string): SafeResourceUrl {\\r\\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全加载HTML\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustHtml\'\\r\\n})\\r\\nexport class TrustHtmlPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(html: string, enabled = true): SafeHtml {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustHtml(html) : html;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全调用Script\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustScript\'\\r\\n})\\r\\nexport class TrustScriptPipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(script: string, enabled = true): SafeScript {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustScript(script) : script;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 非安全调用Style\\r\\n */\\r\\n@Pipe({\\r\\n  name: \'trustStyle\'\\r\\n})\\r\\nexport class TrustStylePipe implements PipeTransform {\\r\\n  constructor(private sanitizer: DomSanitizer) {}\\r\\n  transform(style: string, enabled = true): SafeStyle {\\r\\n    return enabled ? this.sanitizer.bypassSecurityTrustStyle(style) : style;\\r\\n  }\\r\\n}\\r\\n"}],"interfaces":[{"name":"CellEventArg","id":"interface-CellEventArg-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport {NzTableFilterFn, NzTableSize, NzTableSortFn, NzTableSortOrder} from \'ng-zorro-antd/table\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\\r\\n  thText?: string;\\r\\n  /**\\r\\n   * th内容自定义, 不包含th标签本身\\r\\n   */\\r\\n  thTemplate?: string | TemplateRef<T>;\\r\\n\\r\\n  /**\\r\\n   * 字段名称\\r\\n   */\\r\\n  name?: string;\\r\\n  /**\\r\\n   * td自定义渲染模版, string\\r\\n   */\\r\\n  tdTemplate?: string | TemplateRef<T>;\\r\\n  /**\\r\\n   * 是否为序号\\r\\n   */\\r\\n  isIndex?: boolean;\\r\\n  /**\\r\\n   * 格式化列数据\\r\\n   * @param data 当前字段数据\\r\\n   * @param row 行数据\\r\\n   * @param index 行索引\\r\\n   */\\r\\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\\r\\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n\\r\\n  /**\\r\\n   * 用于分组表头\\r\\n   */\\r\\n  children?: NzxColumn<T>[];\\r\\n\\r\\n  /**\\r\\n   * nzShowCheckbox为true, 默认启用enableCheckAll\\r\\n   */\\r\\n  enableCheckAll?: boolean;\\r\\n  nzShowCheckbox?: boolean;\\r\\n  nzDisabled?: boolean;\\r\\n  nzIndeterminate?: boolean;\\r\\n  checked?: boolean;\\r\\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\\r\\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzShowRowSelection?: boolean;\\r\\n  nzSelections?: Array<{\\r\\n    text: string;\\r\\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\\r\\n  }>;\\r\\n  nzShowSort?: boolean;\\r\\n  nzSortPriority?: boolean;\\r\\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\\r\\n  nzSortDirections?: NzTableSortOrder[];\\r\\n  nzSortOrder?: NzTableSortOrder;\\r\\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\\r\\n  nzColumnKey?: string;\\r\\n\\r\\n  nzShowFilter?: boolean;\\r\\n  nzCustomFilter?: boolean;\\r\\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\\r\\n  nzFilterMultiple?: boolean;\\r\\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\\r\\n  nzFilterChange?: Array<T | T[]>;\\r\\n\\r\\n  nzWidth?: string | null;\\r\\n  thAlign?: \'left\' | \'right\' | \'center\';\\r\\n  tdAlign?: \'left\' | \'right\' | \'center\';\\r\\n  nzBreakWord?: boolean;\\r\\n  nzEllipsis?: boolean;\\r\\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzIndentSize?: number;\\r\\n\\r\\n  fixed?: \'left\' | \'right\';\\r\\n  /**\\r\\n   * 是否显示展开\\r\\n   */\\r\\n  showExpand?: boolean | null;\\r\\n  /**\\r\\n   * 是否显示列\\r\\n   */\\r\\n  visible?: boolean | null;\\r\\n  // column setting\\r\\n  /**\\r\\n   * 在设置中列显示的文本,如果为空 则使用thText\\r\\n   */\\r\\n  settingText?: string;\\r\\n  /**\\r\\n   *  在设置中是否显示该列\\r\\n   */\\r\\n  settingVisible?: boolean | null;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  settingDisabled?: boolean | null;\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport interface IndexAttr {\\r\\n  /**\\r\\n   * 当前条目的索引\\r\\n   */\\r\\n  readonly index: number;\\r\\n  /**\\r\\n   * 是否为第一条\\r\\n   */\\r\\n  readonly first: boolean;\\r\\n  /**\\r\\n   * 是否最后一条\\r\\n   */\\r\\n  readonly last: boolean;\\r\\n  /**\\r\\n   * 索引是否为偶数\\r\\n   */\\r\\n  readonly even: boolean;\\r\\n  /**\\r\\n   * 索引是否为奇数\\r\\n   */\\r\\n  readonly odd: boolean;\\r\\n}\\r\\n\\r\\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\\r\\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\\r\\n\\r\\nexport interface RowEventArg<T> {\\r\\n  row: T;\\r\\n  event: MouseEvent;\\r\\n  rowIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface CellEventArg<T> extends RowEventArg<T> {\\r\\n  column: NzxColumn;\\r\\n  columnIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface HeaderEventArg {\\r\\n  column: NzxColumn;\\r\\n  event: MouseEvent;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 排序\\r\\n */\\r\\nexport interface SorterResult {\\r\\n  column?: NzxColumn;\\r\\n  order: NzTableSortOrder;\\r\\n  field: string;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 合并单元格参数类型\\r\\n */\\r\\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\\r\\n\\r\\nexport type CellSpanArgType<T> = {\\r\\n  row: T;\\r\\n  column: NzxColumn<T>;\\r\\n  rowIndex: number;\\r\\n  columnIndex: number;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 分页信息\\r\\n */\\r\\nexport interface PageInfo<T> {\\r\\n  total: number;\\r\\n  /**\\r\\n   * 列表数据\\r\\n   */\\r\\n  list: T[];\\r\\n  /**\\r\\n   * 修正后的当前页码\\r\\n   */\\r\\n  pageIndex?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格大小\\r\\n */\\r\\nexport type NzxTableSize = NzTableSize | \'mini\';\\r\\n","properties":[{"name":"column","deprecated":false,"deprecationMessage":"","type":"NzxColumn","optional":false,"description":"","line":140},{"name":"columnIndex","deprecated":false,"deprecationMessage":"","type":"IndexAttr","optional":false,"description":"","line":141}],"indexSignatures":[],"kind":165,"methods":[],"extends":"RowEventArg"},{"name":"DicSetting","id":"interface-DicSetting-b19f6407c684222ed3ab612651efea570e69ac619c400949139449ca2cb73a8dcb447566f9b66d2d2cfc0a4b6fc3ab489ced975c023295cda0a42112c139f5a5","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpContext, HttpRequest, HttpResponse } from \'@angular/common/http\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxAntdService {\\r\\n  /**\\r\\n   * 默认请求数据类型, 默认 json\\r\\n   */\\r\\n  contentType?: \'form\' | \'json\';\\r\\n  /**\\r\\n   * 请求的根路径,例如/context\\r\\n   */\\r\\n  basePath?: string;\\r\\n  /**\\r\\n   * 响应的数据配置\\r\\n   */\\r\\n  response?: ResponseSetting;\\r\\n  /**\\r\\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\\r\\n   */\\r\\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\\r\\n\\r\\n  /**\\r\\n   * 是否有权限\\r\\n   */\\r\\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\\r\\n  /**\\r\\n   * 权限变更, 通常切换用户时需要\\r\\n   */\\r\\n  authChange?: () => Observable<void>;\\r\\n\\r\\n  /**\\r\\n   * 无权限时跳转路径\\r\\n   */\\r\\n  noAuthUrl?: string;\\r\\n\\r\\n  /**\\r\\n   * 表格分页配置\\r\\n   */\\r\\n  table?: TableSetting;\\r\\n\\r\\n  /**\\r\\n   * 字典配置\\r\\n   */\\r\\n  dic?: DicSetting;\\r\\n  constructor() {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * 默认配置\\r\\n */\\r\\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\\r\\n  code: \'code\',\\r\\n  message: \'message\',\\r\\n  data: \'result\',\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  success: response => response.body.code == 200,\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  timeout: error => error.code == 401,\\r\\n  forceLogout: () => false,\\r\\n  defaultError: error => error.code < 1024\\r\\n};\\r\\n\\r\\n/**\\r\\n * 默认状态错误信息\\r\\n */\\r\\nexport const DEFAULT_STATUS_MESSAGE_MAP: Record<string, string> = {\\r\\n  0: \'请求网络错误，请检查网络是否正常\',\\r\\n  404: \'请求的地址不存在，请检查地址是否正确\',\\r\\n  403: \'您没有操作权限\',\\r\\n  other: \'请求发生错误，请联系管理员\'\\r\\n};\\r\\n\\r\\n/**\\r\\n * 响应配置\\r\\n */\\r\\nexport interface ResponseSetting {\\r\\n  /**\\r\\n   * code字段名称, 支持路径属性\\r\\n   */\\r\\n  code?: string;\\r\\n  /**\\r\\n   * message字段名称, 支持路径属性\\r\\n   */\\r\\n  message?: string;\\r\\n  /**\\r\\n   * data字段名称, 支持路径属性\\r\\n   */\\r\\n  data?: string;\\r\\n  /**\\r\\n   * http错误码和错误信息映射,比如 `{404: \'请求的地址不存在，请检查地址是否正确\', 500: \'服务器错误\'}`\\r\\n   * other 表示不匹配任何错误时显示other信息\\r\\n   */\\r\\n  statusMessageMap?: { [status: string]: string; other: string };\\r\\n\\r\\n  /**\\r\\n   * 是否请求成功\\r\\n   * @param body 响应对象\\r\\n   */\\r\\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\\r\\n  /**\\r\\n   * 是否需要默认错误的错误\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  defaultError?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否登录超时\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  timeout?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否强制退出登录, 比如强制下线\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  forceLogout?: (error: HttpErrorBean) => boolean;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格配置\\r\\n */\\r\\nexport interface TableSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  /**\\r\\n   * 分页大小\\r\\n   */\\r\\n  nzPageSize?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求公共配置\\r\\n */\\r\\nexport interface HttpRequestOptions {\\r\\n  context?: HttpContext;\\r\\n  reportProgress?: boolean;\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  withCredentials?: boolean;\\r\\n  body?: NzSafeAny | null;\\r\\n  method?: string;\\r\\n  url?: string;\\r\\n  setHeaders?: Record<string, NzSafeAny>;\\r\\n  setParams?: Record<string, NzSafeAny>;\\r\\n}\\r\\n\\r\\nexport interface HttpErrorBean<T = NzSafeAny> {\\r\\n  httpError: boolean;\\r\\n  code: number;\\r\\n  message: string;\\r\\n  body: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字典配置信息\\r\\n */\\r\\nexport interface DicSetting {\\r\\n  /**\\r\\n   * 字典的URL,如果是string 将会自动在URL后追加key,如 url 为 /api/dic 真正请求的地址为 /api/dic/{dicKey}\\r\\n   */\\r\\n  url: ((key: string) => string) | string;\\r\\n  /**\\r\\n   * 后台返回的字典label的属性名称, 默认\'label\'\\r\\n   */\\r\\n  labelName?: string;\\r\\n  /**\\r\\n   * 后台返回的字典value的属性名称, 默认\'value\'\\r\\n   */\\r\\n  valueName?: string;\\r\\n}\\r\\n","properties":[{"name":"labelName","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>后台返回的字典label的属性名称, 默认&#39;label&#39;</p>\\n","line":189,"rawdescription":"\\n\\n后台返回的字典label的属性名称, 默认\'label\'\\n"},{"name":"url","deprecated":false,"deprecationMessage":"","type":" | string","optional":false,"description":"<p>字典的URL,如果是string 将会自动在URL后追加key,如 url 为 /api/dic 真正请求的地址为 /api/dic/{dicKey}</p>\\n","line":185,"rawdescription":"\\n\\n字典的URL,如果是string 将会自动在URL后追加key,如 url 为 /api/dic 真正请求的地址为 /api/dic/{dicKey}\\n"},{"name":"valueName","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>后台返回的字典value的属性名称, 默认&#39;value&#39;</p>\\n","line":193,"rawdescription":"\\n\\n后台返回的字典value的属性名称, 默认\'value\'\\n"}],"indexSignatures":[],"kind":165,"description":"<p>字典配置信息</p>\\n","rawdescription":"\\n\\n字典配置信息\\n","methods":[]},{"name":"FetchOptions","id":"interface-FetchOptions-c6e56f603948b079bf78b0dc545e48205bd49b8577ebddbc05edba799b245ba57297477f978fc979466e2a0685f7aa38fe2982e61374b4dce5d75694a45e30fb","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpClient, HttpContext, HttpContextToken } from \'@angular/common/http\';\\r\\nimport { Observable, of } from \'rxjs\';\\r\\nimport { switchMap } from \'rxjs/operators\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { AbstractControl, ValidationErrors, ValidatorFn } from \'@angular/forms\';\\r\\n\\r\\n/**\\r\\n * 模板字符串函数, 构造同步请求URL\\r\\n * @example\\r\\n * let value!: string;\\r\\n * this.http.get<string>(\'url\', { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res => (value = res));\\r\\n * console.log(value);\\r\\n */\\r\\nexport function synced(url: TemplateStringsArray, ...keys: string[]): string {\\r\\n  const strings = [];\\r\\n  for (let i = 0; i < url.length; i++) {\\r\\n    strings.push(url.raw[i], keys[i] == null ? \'\' : keys[i]);\\r\\n  }\\r\\n  const result = strings.join(\'\');\\r\\n  return result + (result.indexOf(\'?\') === -1 ? \'?\' : \'&\') + \'synced=true\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 启用同步请求\\r\\n * @example\\r\\n * let value!: string;\\r\\n * this.http.get<string>(\'url\', { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res => (value = res));\\r\\n * console.log(value);\\r\\n */\\r\\nexport const SYNCED_ENABLED = new HttpContextToken<boolean>(() => false);\\r\\n\\r\\n/**\\r\\n * 是否启用loading\\r\\n * @example\\r\\n * this.http.get<string>(\'url\', { context: new HttpContext().set(LOADING_ENABLED, false).set(...)});\\r\\n */\\r\\nexport const LOADING_ENABLED = new HttpContextToken<boolean>(() => true);\\r\\n\\r\\n@Injectable()\\r\\nexport class FetcherService {\\r\\n  constructor(protected http: HttpClient) {}\\r\\n\\r\\n  /**\\r\\n   * 处理异步参数\\r\\n   * @param data 参数\\r\\n   */\\r\\n  static resolveParams<T>(data?: FetchParams<T>): Observable<T | undefined> {\\r\\n    if (NzxUtils.isFunction(data)) {\\r\\n      const result = data();\\r\\n      if (result instanceof Observable) {\\r\\n        return result;\\r\\n      }\\r\\n      return of(result as T);\\r\\n    }\\r\\n\\r\\n    if (data instanceof Observable) {\\r\\n      return data;\\r\\n    }\\r\\n    return of(data as T);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 发起请求, 参数可以是异步对象或函数\\r\\n   * @param option 请求配置\\r\\n   */\\r\\n  fetch<T>(option: FetchOptions): Observable<T> {\\r\\n    return FetcherService.resolveParams(option.data).pipe(\\r\\n      switchMap(value => {\\r\\n        const data = option.beforeSend ? option.beforeSend(value || {}) : value;\\r\\n        return this.doFetch<T>({ ...option, data });\\r\\n      })\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 同步请求, 参数可以是异步对象或函数\\r\\n   * @param option 请求配置\\r\\n   */\\r\\n  fetchSync<T>(option: Omit<FetchOptions, \'async\'>): T {\\r\\n    return NzxUtils.getAjaxValue<T>(this.fetch({ ...option, async: false }));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 送请求\\r\\n   * @param options 参数不包含函数不进行二次处理\\r\\n   */\\r\\n  public doFetch<T>(options: FetchOptions): Observable<T> {\\r\\n    const option: Record<string, NzSafeAny> = {};\\r\\n    if (options.responseType) {\\r\\n      option.responseType = options.responseType;\\r\\n    }\\r\\n    if (options.observe) {\\r\\n      option.observe = options.observe;\\r\\n    }\\r\\n\\r\\n    option.context ||= new HttpContext();\\r\\n    if (options.async === false) {\\r\\n      option.context.set(SYNCED_ENABLED, true);\\r\\n    }\\r\\n\\r\\n    if (options.loading === false) {\\r\\n      option.context.set(LOADING_ENABLED, false);\\r\\n    }\\r\\n\\r\\n    const data = NzxUtils.isFunction(options.data) ? options.data() : options.data;\\r\\n    if (/^post|put$/i.test(options.method!)) {\\r\\n      option.body = data;\\r\\n    } else {\\r\\n      option.params = data;\\r\\n    }\\r\\n\\r\\n    return this.http.request<T>(options.method || \'get\', options.url, option);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 同步请求, 参数不包含函数不进行二次处理\\r\\n   * @param options\\r\\n   */\\r\\n  doFetchSync<T>(options: Omit<FetchOptions, \'async\'>): T {\\r\\n    return NzxUtils.getAjaxValue<T>(this.doFetch({ ...options, async: false }));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 使用同步方式进行远程校验\\r\\n   * @param options\\r\\n   */\\r\\n  remoteValidate<T = NzSafeAny>(options: ValidatorOption<T>): ValidatorFn {\\r\\n    return (control: AbstractControl): ValidationErrors | null => {\\r\\n      if (control.value == null || !control.value.length) {\\r\\n        return null;\\r\\n      }\\r\\n      if (options.beforeSend) {\\r\\n        const beforeSend = options.beforeSend;\\r\\n        options.beforeSend = data => {\\r\\n          return beforeSend(data, control);\\r\\n        };\\r\\n      }\\r\\n\\r\\n      if (options.data && NzxUtils.isFunction(options.data)) {\\r\\n        const dataFn = options.data;\\r\\n        options.data = () => {\\r\\n          return dataFn(control);\\r\\n        };\\r\\n      }\\r\\n\\r\\n      // @ts-ignore\\r\\n      const data = this.doFetchSync<T>(options);\\r\\n      if (options.afterFetch) {\\r\\n        return options.afterFetch(data);\\r\\n      }\\r\\n\\r\\n      if (data == null) {\\r\\n        return null;\\r\\n      }\\r\\n\\r\\n      if (NzxUtils.isBoolean(data)) {\\r\\n        return data ? null : { remote: { message: options.message || \'格式不正确\' } };\\r\\n      }\\r\\n      return data;\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求参数\\r\\n */\\r\\nexport type FetchParams<T = NzSafeAny> = (() => Promise<T> | T) | Promise<T> | T;\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchOptions {\\r\\n  url: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   * 请求参数\\r\\n   */\\r\\n  data?: FetchParams;\\r\\n  /**\\r\\n   * 发送之前的回调函数,仅URL 时有效\\r\\n   * @param params\\r\\n   */\\r\\n  beforeSend?: (params: NzSafeAny) => NzSafeAny;\\r\\n  /**\\r\\n   * 响应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  /**\\r\\n   * 订阅响应数据类型\\r\\n   */\\r\\n  observe?: \'body\' | \'events\' | \'response\';\\r\\n  /**\\r\\n   * http上下文\\r\\n   */\\r\\n  context?: HttpContext;\\r\\n  /**\\r\\n   * 是否异步, 默认true\\r\\n   */\\r\\n  async?: boolean;\\r\\n  /**\\r\\n   * 是否显示loading\\r\\n   */\\r\\n  loading?: boolean;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 验证器请求参数\\r\\n */\\r\\nexport type FetchValidatorParams<T = NzSafeAny> = ((control: AbstractControl) => Promise<T> | T) | Promise<T> | T;\\r\\n/**\\r\\n * 远程验证器配置\\r\\n */\\r\\nexport type ValidatorOption<T = NzSafeAny> = Omit<FetchOptions, \'beforeSend\' | \'async\' | \'data\'> & {\\r\\n  /**\\r\\n   * 错误信息描述\\r\\n   */\\r\\n  message: string;\\r\\n  /**\\r\\n   * 请求参数\\r\\n   */\\r\\n  data?: FetchValidatorParams;\\r\\n  /**\\r\\n   * 响应数据后的回调\\r\\n   * @param data\\r\\n   */\\r\\n  afterFetch?(data: T): ValidationErrors | null;\\r\\n  /**\\r\\n   * 请求之前的回调\\r\\n   * @param params\\r\\n   * @param control\\r\\n   */\\r\\n  beforeSend?(params: NzSafeAny, control: AbstractControl): NzSafeAny;\\r\\n};\\r\\n\\r\\n\\r\\nexport type Method =\\r\\n  | \'get\'\\r\\n  | \'GET\'\\r\\n  | \'delete\'\\r\\n  | \'DELETE\'\\r\\n  | \'head\'\\r\\n  | \'HEAD\'\\r\\n  | \'options\'\\r\\n  | \'OPTIONS\'\\r\\n  | \'post\'\\r\\n  | \'POST\'\\r\\n  | \'put\'\\r\\n  | \'PUT\'\\r\\n  | \'patch\'\\r\\n  | \'PATCH\'\\r\\n  | \'purge\'\\r\\n  | \'PURGE\'\\r\\n  | \'link\'\\r\\n  | \'LINK\'\\r\\n  | \'unlink\'\\r\\n  | \'UNLINK\';\\r\\n","properties":[{"name":"async","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>是否异步, 默认true</p>\\n","line":204,"rawdescription":"\\n\\n是否异步, 默认true\\n"},{"name":"beforeSend","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>发送之前的回调函数,仅URL 时有效</p>\\n","line":188,"rawdescription":"\\n\\n发送之前的回调函数,仅URL 时有效\\n","jsdoctags":[{"pos":4976,"end":4994,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":4977,"end":4982,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"","name":{"pos":4983,"end":4989,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"params"},"isNameFirst":true,"isBracketed":false}]},{"name":"context","deprecated":false,"deprecationMessage":"","type":"HttpContext","optional":true,"description":"<p>http上下文</p>\\n","line":200,"rawdescription":"\\n\\nhttp上下文\\n"},{"name":"data","deprecated":false,"deprecationMessage":"","type":"FetchParams","optional":true,"description":"<p>请求参数</p>\\n","line":183,"rawdescription":"\\n\\n请求参数\\n"},{"name":"loading","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>是否显示loading</p>\\n","line":208,"rawdescription":"\\n\\n是否显示loading\\n"},{"name":"method","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求方式</p>\\n","line":179,"rawdescription":"\\n\\n请求方式\\n"},{"name":"observe","deprecated":false,"deprecationMessage":"","type":"\\"body\\" | \\"events\\" | \\"response\\"","optional":true,"description":"<p>订阅响应数据类型</p>\\n","line":196,"rawdescription":"\\n\\n订阅响应数据类型\\n"},{"name":"responseType","deprecated":false,"deprecationMessage":"","type":"\\"arraybuffer\\" | \\"blob\\" | \\"json\\" | \\"text\\"","optional":true,"description":"<p>响应类型</p>\\n","line":192,"rawdescription":"\\n\\n响应类型\\n"},{"name":"url","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":175}],"indexSignatures":[],"kind":165,"description":"<p>请求配置</p>\\n","rawdescription":"\\n\\n请求配置\\n","methods":[]},{"name":"FetchSetting","id":"interface-FetchSetting-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport {NzTableFilterFn, NzTableSize, NzTableSortFn, NzTableSortOrder} from \'ng-zorro-antd/table\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\\r\\n  thText?: string;\\r\\n  /**\\r\\n   * th内容自定义, 不包含th标签本身\\r\\n   */\\r\\n  thTemplate?: string | TemplateRef<T>;\\r\\n\\r\\n  /**\\r\\n   * 字段名称\\r\\n   */\\r\\n  name?: string;\\r\\n  /**\\r\\n   * td自定义渲染模版, string\\r\\n   */\\r\\n  tdTemplate?: string | TemplateRef<T>;\\r\\n  /**\\r\\n   * 是否为序号\\r\\n   */\\r\\n  isIndex?: boolean;\\r\\n  /**\\r\\n   * 格式化列数据\\r\\n   * @param data 当前字段数据\\r\\n   * @param row 行数据\\r\\n   * @param index 行索引\\r\\n   */\\r\\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\\r\\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n\\r\\n  /**\\r\\n   * 用于分组表头\\r\\n   */\\r\\n  children?: NzxColumn<T>[];\\r\\n\\r\\n  /**\\r\\n   * nzShowCheckbox为true, 默认启用enableCheckAll\\r\\n   */\\r\\n  enableCheckAll?: boolean;\\r\\n  nzShowCheckbox?: boolean;\\r\\n  nzDisabled?: boolean;\\r\\n  nzIndeterminate?: boolean;\\r\\n  checked?: boolean;\\r\\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\\r\\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzShowRowSelection?: boolean;\\r\\n  nzSelections?: Array<{\\r\\n    text: string;\\r\\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\\r\\n  }>;\\r\\n  nzShowSort?: boolean;\\r\\n  nzSortPriority?: boolean;\\r\\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\\r\\n  nzSortDirections?: NzTableSortOrder[];\\r\\n  nzSortOrder?: NzTableSortOrder;\\r\\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\\r\\n  nzColumnKey?: string;\\r\\n\\r\\n  nzShowFilter?: boolean;\\r\\n  nzCustomFilter?: boolean;\\r\\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\\r\\n  nzFilterMultiple?: boolean;\\r\\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\\r\\n  nzFilterChange?: Array<T | T[]>;\\r\\n\\r\\n  nzWidth?: string | null;\\r\\n  thAlign?: \'left\' | \'right\' | \'center\';\\r\\n  tdAlign?: \'left\' | \'right\' | \'center\';\\r\\n  nzBreakWord?: boolean;\\r\\n  nzEllipsis?: boolean;\\r\\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzIndentSize?: number;\\r\\n\\r\\n  fixed?: \'left\' | \'right\';\\r\\n  /**\\r\\n   * 是否显示展开\\r\\n   */\\r\\n  showExpand?: boolean | null;\\r\\n  /**\\r\\n   * 是否显示列\\r\\n   */\\r\\n  visible?: boolean | null;\\r\\n  // column setting\\r\\n  /**\\r\\n   * 在设置中列显示的文本,如果为空 则使用thText\\r\\n   */\\r\\n  settingText?: string;\\r\\n  /**\\r\\n   *  在设置中是否显示该列\\r\\n   */\\r\\n  settingVisible?: boolean | null;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  settingDisabled?: boolean | null;\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport interface IndexAttr {\\r\\n  /**\\r\\n   * 当前条目的索引\\r\\n   */\\r\\n  readonly index: number;\\r\\n  /**\\r\\n   * 是否为第一条\\r\\n   */\\r\\n  readonly first: boolean;\\r\\n  /**\\r\\n   * 是否最后一条\\r\\n   */\\r\\n  readonly last: boolean;\\r\\n  /**\\r\\n   * 索引是否为偶数\\r\\n   */\\r\\n  readonly even: boolean;\\r\\n  /**\\r\\n   * 索引是否为奇数\\r\\n   */\\r\\n  readonly odd: boolean;\\r\\n}\\r\\n\\r\\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\\r\\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\\r\\n\\r\\nexport interface RowEventArg<T> {\\r\\n  row: T;\\r\\n  event: MouseEvent;\\r\\n  rowIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface CellEventArg<T> extends RowEventArg<T> {\\r\\n  column: NzxColumn;\\r\\n  columnIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface HeaderEventArg {\\r\\n  column: NzxColumn;\\r\\n  event: MouseEvent;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 排序\\r\\n */\\r\\nexport interface SorterResult {\\r\\n  column?: NzxColumn;\\r\\n  order: NzTableSortOrder;\\r\\n  field: string;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 合并单元格参数类型\\r\\n */\\r\\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\\r\\n\\r\\nexport type CellSpanArgType<T> = {\\r\\n  row: T;\\r\\n  column: NzxColumn<T>;\\r\\n  rowIndex: number;\\r\\n  columnIndex: number;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 分页信息\\r\\n */\\r\\nexport interface PageInfo<T> {\\r\\n  total: number;\\r\\n  /**\\r\\n   * 列表数据\\r\\n   */\\r\\n  list: T[];\\r\\n  /**\\r\\n   * 修正后的当前页码\\r\\n   */\\r\\n  pageIndex?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格大小\\r\\n */\\r\\nexport type NzxTableSize = NzTableSize | \'mini\';\\r\\n","properties":[{"name":"listField","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求结果列表字段  支持 a.b.c</p>\\n","line":164,"rawdescription":"\\n\\n请求结果列表字段  支持 a.b.c\\n"},{"name":"method","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求方式</p>\\n","line":172,"rawdescription":"\\n\\n请求方式\\n"},{"name":"pageIndexField","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求接口当前页数</p>\\n","line":156,"rawdescription":"\\n\\n请求接口当前页数\\n"},{"name":"pageSizeField","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>每页显示多少条</p>\\n","line":160,"rawdescription":"\\n\\n每页显示多少条\\n"},{"name":"responseType","deprecated":false,"deprecationMessage":"","type":"\\"arraybuffer\\" | \\"blob\\" | \\"json\\" | \\"text\\"","optional":true,"description":"<p> 相应类型</p>\\n","line":176,"rawdescription":"\\n\\n 相应类型\\n"},{"name":"totalField","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求结果总数字段  支持 a.b.c</p>\\n","line":168,"rawdescription":"\\n\\n请求结果总数字段  支持 a.b.c\\n"}],"indexSignatures":[],"kind":165,"description":"<p>请求配置</p>\\n","rawdescription":"\\n\\n请求配置\\n","methods":[]},{"name":"FileValidateError","id":"interface-FileValidateError-a17ae1d9e823ad87de17c85e3619c4074bb2b8f425a5bf5f73a61672de692d84b3881fbd1b69426e2637a2d0863a84e3c78846a21598c9f18a9b018b4a5d0865","file":"lib/upload/upload.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  OnChanges,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  SimpleChange,\\r\\n  SimpleChanges,\\r\\n  TemplateRef\\r\\n} from \'@angular/core\';\\r\\nimport {\\r\\n  NzIconRenderTemplate,\\r\\n  NzUploadChangeParam,\\r\\n  NzUploadFile,\\r\\n  NzUploadListType,\\r\\n  NzUploadTransformFileType,\\r\\n  NzUploadType,\\r\\n  NzUploadXHRArgs,\\r\\n  UploadFilter,\\r\\n  NzShowUploadList\\r\\n} from \'ng-zorro-antd/upload\';\\r\\nimport { Observable, Subscription } from \'rxjs\';\\r\\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\r\\nimport { BaseControl } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NzMessageService } from \'ng-zorro-antd/message\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NzBytesPipe } from \'ng-zorro-antd/pipes\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\nexport enum ErrorType {\\r\\n  /**\\r\\n   * 单文件大小限制,单位KB\\r\\n   */\\r\\n  FILE_SIZE = \'FILE_SIZE\',\\r\\n  /**\\r\\n   * 总文件大小限制\\r\\n   */\\r\\n  FILE_TOTAL_SIZE = \'FILE_TOTAL_SIZE\',\\r\\n  FILE_TYPE = \'FILE_TYPE\',\\r\\n  FILE_LIMIT = \'FILE_LIMIT\',\\r\\n  FILE_NAME_LENGTH = \'FILE_NAME_LENGTH\',\\r\\n  FILE_NAME_DUPLICATE = \'FILE_NAME_DUPLICATE\'\\r\\n}\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-upload\',\\r\\n  templateUrl: \'./upload.component.html\',\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NzxUploadComponent),\\r\\n      multi: true\\r\\n    },\\r\\n    NzBytesPipe\\r\\n  ]\\r\\n})\\r\\nexport class NzxUploadComponent extends BaseControl<NzUploadFile[]> implements ControlValueAccessor, OnInit, OnChanges {\\r\\n  nzFileList: NzUploadFile[] = [];\\r\\n  /**\\r\\n   * 自定义按钮或显示内容\\r\\n   */\\r\\n  @Input() nzxUploadButton?: string | TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * 上传的提示信息\\r\\n   */\\r\\n  @Input() nzxHint?: string;\\r\\n  /**\\r\\n   * 是否显示上传按钮, 如果是nzType=\\"drag\\" 隐藏按钮\\r\\n   */\\r\\n  @Input() nzxShowUploadButtonIcon?: boolean;\\r\\n  /**\\r\\n   * 上传按钮的图标\\r\\n   */\\r\\n  @Input() nzxUploadButtonIcon = \'cloud-upload\';\\r\\n  /**\\r\\n   * 错误信息映射\\r\\n   */\\r\\n  @Input() nzxValidateMessage?: { [validateKey: string]: string };\\r\\n  @Input() nzType: NzUploadType = \'select\';\\r\\n  /**\\r\\n   * 上传的文件个数限制\\r\\n   */\\r\\n  @Input() nzLimit = 0;\\r\\n  /**\\r\\n   * 文件名重复验证\\r\\n   */\\r\\n  @Input() nzxFileNameDuplicate?: boolean;\\r\\n  /**\\r\\n   * 文件名长度\\r\\n   */\\r\\n  @Input() nzxFileNameLength?: number;\\r\\n  /**\\r\\n   * 文件大小,单位kb\\r\\n   */\\r\\n  @Input() nzSize = 0;\\r\\n  /**\\r\\n   * 总文件大小,单位kb\\r\\n   */\\r\\n  @Input() nzTotalSize?: number;\\r\\n  @Input() nzFileType?: string | string[];\\r\\n  @Input() nzAccept?: string | string[];\\r\\n  @Input() nzAction?: string | ((file: NzUploadFile) => string | Observable<string>);\\r\\n  @Input() nzDirectory = false;\\r\\n  @Input() nzOpenFileDialogOnClick = true;\\r\\n  /**\\r\\n   * 是否显示验证错误提示信息\\r\\n   */\\r\\n  @Input() nzxShowValidateMessage?: boolean;\\r\\n  @Input() nzBeforeUpload?: (\\r\\n    file: NzUploadFile,\\r\\n    fileList: NzUploadFile[],\\r\\n    error: FileValidateError | null\\r\\n  ) => boolean | Observable<boolean>;\\r\\n  _nzBeforeUpload?: (file: NzUploadFile, fileList: NzUploadFile[]) => boolean | Observable<boolean>;\\r\\n  @Input() nzCustomRequest?: (item: NzUploadXHRArgs) => Subscription;\\r\\n  @Input() nzData?: {} | ((file: NzUploadFile) => {} | Observable<{}>);\\r\\n  @Input() nzFilter: UploadFilter[] = [];\\r\\n  @Input() nzDisabled?: boolean;\\r\\n  @Input() nzHeaders?: {} | ((file: NzUploadFile) => {} | Observable<{}>);\\r\\n  @Input() nzListType: NzUploadListType = \'text\';\\r\\n  @Input() nzMultiple?: boolean;\\r\\n  @Input() nzName = \'file\';\\r\\n  @Input() nzShowUploadList: boolean | NzShowUploadList = true;\\r\\n  @Input() nzShowButton = true;\\r\\n  @Input() nzWithCredentials?: boolean;\\r\\n  @Input() nzRemove?: (file: NzUploadFile) => boolean | Observable<boolean>;\\r\\n  @Input() nzPreview?: (file: NzUploadFile) => void;\\r\\n  @Input() nzPreviewFile?: (file: NzUploadFile) => Observable<string>;\\r\\n  @Input() nzPreviewIsImage?: (file: NzUploadFile) => boolean;\\r\\n  @Input() nzTransformFile?: (file: NzUploadFile) => NzUploadTransformFileType;\\r\\n  @Input() nzDownload?: (file: NzUploadFile) => void;\\r\\n  @Input() nzIconRender!: NzIconRenderTemplate | null;\\r\\n  @Input() nzFileListRender?: TemplateRef<void>;\\r\\n\\r\\n  @Output() readonly nzChange = new EventEmitter<NzUploadChangeParam>();\\r\\n  @Output() readonly nzFileListChange = new EventEmitter<NzUploadFile[]>();\\r\\n\\r\\n  readonly defaultValidateMessage: { [K: string]: string } = {\\r\\n    FILE_SIZE: \'文件 \\"{fileName}\\" 大小不能超过{fileSize}\',\\r\\n    FILE_TOTAL_SIZE: \'总上传文件大小不能超过{totalSize}\',\\r\\n    FILE_TYPE: \'上传的文件格式只能是 \\"{fileType}\',\\r\\n    FILE_LIMIT: \'最多允许上传{fileLimit}个文件\',\\r\\n    FILE_NAME_LENGTH: \'文件 \\"{fileName}\\" 名称长度不能大于{fileNameLength}个字符\',\\r\\n    FILE_NAME_DUPLICATE: \'已上传名称 \\"{fileName}\\" 相同的文件，不能重复上传\'\\r\\n  };\\r\\n\\r\\n  get isTemplateUploadButton() {\\r\\n    return this.nzxUploadButton instanceof TemplateRef;\\r\\n  }\\r\\n\\r\\n  constructor(protected messageService: NzMessageService, protected bytesPipe: NzBytesPipe) {\\r\\n    super();\\r\\n  }\\r\\n\\r\\n  ngOnInit() {\\r\\n    this.setDefaultFileFilter();\\r\\n    this.setNzBeforeUpload();\\r\\n  }\\r\\n\\r\\n  protected setDefaultFileFilter() {\\r\\n    const defaultFilter: UploadFilter = {\\r\\n      name: \'defaultFilter\',\\r\\n      fn: (fileList: NzUploadFile[]) => {\\r\\n        let error: FileValidateError | null = null;\\r\\n        const allFiles = (this.nzFileList || []).concat(fileList);\\r\\n        const list = [];\\r\\n\\r\\n        for (const file of fileList) {\\r\\n          const err = this.beforeUploadValidator(file, allFiles);\\r\\n          if (!err) {\\r\\n            list.push(file);\\r\\n          } else if (!error || err.errorType === ErrorType.FILE_TOTAL_SIZE) {\\r\\n            error = err;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (error && this.nzxShowValidateMessage !== false) {\\r\\n          this.messageService.error(error.message || \'文件不合法，请重新选择\');\\r\\n        }\\r\\n        return list;\\r\\n      }\\r\\n    };\\r\\n\\r\\n    if (!this.nzFilter) {\\r\\n      this.nzFilter = [defaultFilter];\\r\\n    }\\r\\n\\r\\n    if (!this.nzFilter.find(f => f.name === \'defaultFilter\')) {\\r\\n      this.nzFilter.push(defaultFilter);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  setNzBeforeUpload() {\\r\\n    this._nzBeforeUpload = this.getNzBeforeUpload();\\r\\n  }\\r\\n\\r\\n  onNzChange(evt: NzUploadChangeParam) {\\r\\n    this.onTouched();\\r\\n    if (evt.type === \'error\') {\\r\\n      this.nzFileList = this.nzFileList.filter(f => !f.error);\\r\\n    }\\r\\n\\r\\n    if (evt.type === \'success\' || evt.type === \'removed\') {\\r\\n      this.onChange(evt.fileList);\\r\\n    }\\r\\n    this.nzChange.emit(evt);\\r\\n  }\\r\\n\\r\\n  writeValue(value: NzUploadFile[]): void {\\r\\n    this.nzFileList = value || [];\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\\r\\n    if (changes.nzFilter && !changes.nzFilter.isFirstChange()) {\\r\\n      this.setDefaultFileFilter();\\r\\n    }\\r\\n\\r\\n    if (changes.nzBeforeUpload && !changes.nzBeforeUpload.isFirstChange()) {\\r\\n      this.setNzBeforeUpload();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  override setDisabledState(isDisabled: boolean) {\\r\\n    this.nzDisabled = isDisabled;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 重新包装zBeforeUpload\\r\\n   */\\r\\n  protected getNzBeforeUpload():\\r\\n    | ((file: NzUploadFile, fileList: NzUploadFile[]) => boolean | Observable<boolean>)\\r\\n    | undefined {\\r\\n    if (this.nzBeforeUpload) {\\r\\n      return (file, fileList) => this.nzBeforeUpload!(file, fileList, this.beforeUploadValidator(file, fileList));\\r\\n    }\\r\\n\\r\\n    return undefined;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 文件验证\\r\\n   * @param file 当前文件\\r\\n   * @param fileList 文件列表\\r\\n   * @protected\\r\\n   */\\r\\n  protected beforeUploadValidator(file: NzUploadFile, fileList: NzUploadFile[]): FileValidateError | null {\\r\\n    const messages = Object.assign({}, this.defaultValidateMessage, this.nzxValidateMessage);\\r\\n\\r\\n    // 文件类型\\r\\n    if (this.nzFileType != null) {\\r\\n      const nzFileTypes = typeof this.nzFileType === \'string\' ? [this.nzFileType] : this.nzFileType;\\r\\n      if (nzFileTypes.length > 0 && !nzFileTypes.includes(file.type!)) {\\r\\n        return this.getError(ErrorType.FILE_TYPE, file, messages, { fileType: this.nzFileType });\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // 单个文件大小\\r\\n    if (this.nzSize != null && this.nzSize > 0 && (file.size || 0) / 1024 > this.nzSize) {\\r\\n      return this.getError(ErrorType.FILE_SIZE, file, messages, {\\r\\n        fileSize: this.bytesPipe.transform(this.nzSize, 2, \'kB\'),\\r\\n        fileName: file.name\\r\\n      });\\r\\n    }\\r\\n\\r\\n    // 文件名长度\\r\\n    if (this.nzxFileNameLength && file.name.length > this.nzxFileNameLength) {\\r\\n      return this.getError(ErrorType.FILE_NAME_LENGTH, file, messages, {\\r\\n        fileNameLength: this.nzxFileNameLength,\\r\\n        fileName: file.name\\r\\n      });\\r\\n    }\\r\\n\\r\\n    // 文件名重复\\r\\n    if (this.nzxFileNameDuplicate === false && fileList.filter(f => f !== file).find(it => it.name === file.name)) {\\r\\n      return this.getError(ErrorType.FILE_NAME_DUPLICATE, file, messages, { fileName: file.name });\\r\\n    }\\r\\n\\r\\n    // 最大上传个数\\r\\n    if (this.nzLimit && fileList.length > this.nzLimit) {\\r\\n      return this.getError(ErrorType.FILE_LIMIT, file, messages, { fileLimit: this.nzLimit });\\r\\n    }\\r\\n\\r\\n    // 总文件大小\\r\\n    if (this.nzTotalSize && fileList.reduce((prev, curr) => (prev += curr.size || 0), 0) / 1024 > this.nzTotalSize) {\\r\\n      return this.getError(ErrorType.FILE_TOTAL_SIZE, file, messages, {\\r\\n        totalSize: this.bytesPipe.transform(this.nzTotalSize, 2, \'kB\')\\r\\n      });\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 显示文件验证错误\\r\\n   * @param file 当前文件\\r\\n   * @param fileList 文件列表\\r\\n   * @param showValidateMessage 是否显示\\r\\n   * @private\\r\\n   */\\r\\n  private showFileErrorMessage(\\r\\n    file: NzUploadFile,\\r\\n    fileList: NzUploadFile[],\\r\\n    showValidateMessage?: boolean\\r\\n  ): FileValidateError | null {\\r\\n    const error = this.beforeUploadValidator(file, fileList);\\r\\n    if (error && showValidateMessage !== false) {\\r\\n      this.messageService.error(error.message || \'文件不合法\');\\r\\n    }\\r\\n    return error;\\r\\n  }\\r\\n\\r\\n  private getError(\\r\\n    errorType: ErrorType,\\r\\n    file: NzUploadFile,\\r\\n    messages: { [K: string]: string },\\r\\n    fmtData?: Record<string, NzSafeAny>\\r\\n  ): FileValidateError {\\r\\n    return {\\r\\n      errorType,\\r\\n      file,\\r\\n      message: NzxUtils.format(messages[errorType], fmtData)\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\nexport interface FileValidateError {\\r\\n  /**\\r\\n   * 验证错误类型\\r\\n   */\\r\\n  errorType: ErrorType;\\r\\n  /**\\r\\n   * 错误信息\\r\\n   */\\r\\n  message: string;\\r\\n  /**\\r\\n   * 错误的文件\\r\\n   */\\r\\n  file: NzUploadFile;\\r\\n}\\r\\n","properties":[{"name":"errorType","deprecated":false,"deprecationMessage":"","type":"ErrorType","optional":false,"description":"<p>验证错误类型</p>\\n","line":333,"rawdescription":"\\n\\n验证错误类型\\n"},{"name":"file","deprecated":false,"deprecationMessage":"","type":"NzUploadFile","optional":false,"description":"<p>错误的文件</p>\\n","line":341,"rawdescription":"\\n\\n错误的文件\\n"},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>错误信息</p>\\n","line":337,"rawdescription":"\\n\\n错误信息\\n"}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"HeaderEventArg","id":"interface-HeaderEventArg-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport {NzTableFilterFn, NzTableSize, NzTableSortFn, NzTableSortOrder} from \'ng-zorro-antd/table\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\\r\\n  thText?: string;\\r\\n  /**\\r\\n   * th内容自定义, 不包含th标签本身\\r\\n   */\\r\\n  thTemplate?: string | TemplateRef<T>;\\r\\n\\r\\n  /**\\r\\n   * 字段名称\\r\\n   */\\r\\n  name?: string;\\r\\n  /**\\r\\n   * td自定义渲染模版, string\\r\\n   */\\r\\n  tdTemplate?: string | TemplateRef<T>;\\r\\n  /**\\r\\n   * 是否为序号\\r\\n   */\\r\\n  isIndex?: boolean;\\r\\n  /**\\r\\n   * 格式化列数据\\r\\n   * @param data 当前字段数据\\r\\n   * @param row 行数据\\r\\n   * @param index 行索引\\r\\n   */\\r\\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\\r\\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n\\r\\n  /**\\r\\n   * 用于分组表头\\r\\n   */\\r\\n  children?: NzxColumn<T>[];\\r\\n\\r\\n  /**\\r\\n   * nzShowCheckbox为true, 默认启用enableCheckAll\\r\\n   */\\r\\n  enableCheckAll?: boolean;\\r\\n  nzShowCheckbox?: boolean;\\r\\n  nzDisabled?: boolean;\\r\\n  nzIndeterminate?: boolean;\\r\\n  checked?: boolean;\\r\\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\\r\\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzShowRowSelection?: boolean;\\r\\n  nzSelections?: Array<{\\r\\n    text: string;\\r\\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\\r\\n  }>;\\r\\n  nzShowSort?: boolean;\\r\\n  nzSortPriority?: boolean;\\r\\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\\r\\n  nzSortDirections?: NzTableSortOrder[];\\r\\n  nzSortOrder?: NzTableSortOrder;\\r\\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\\r\\n  nzColumnKey?: string;\\r\\n\\r\\n  nzShowFilter?: boolean;\\r\\n  nzCustomFilter?: boolean;\\r\\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\\r\\n  nzFilterMultiple?: boolean;\\r\\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\\r\\n  nzFilterChange?: Array<T | T[]>;\\r\\n\\r\\n  nzWidth?: string | null;\\r\\n  thAlign?: \'left\' | \'right\' | \'center\';\\r\\n  tdAlign?: \'left\' | \'right\' | \'center\';\\r\\n  nzBreakWord?: boolean;\\r\\n  nzEllipsis?: boolean;\\r\\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzIndentSize?: number;\\r\\n\\r\\n  fixed?: \'left\' | \'right\';\\r\\n  /**\\r\\n   * 是否显示展开\\r\\n   */\\r\\n  showExpand?: boolean | null;\\r\\n  /**\\r\\n   * 是否显示列\\r\\n   */\\r\\n  visible?: boolean | null;\\r\\n  // column setting\\r\\n  /**\\r\\n   * 在设置中列显示的文本,如果为空 则使用thText\\r\\n   */\\r\\n  settingText?: string;\\r\\n  /**\\r\\n   *  在设置中是否显示该列\\r\\n   */\\r\\n  settingVisible?: boolean | null;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  settingDisabled?: boolean | null;\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport interface IndexAttr {\\r\\n  /**\\r\\n   * 当前条目的索引\\r\\n   */\\r\\n  readonly index: number;\\r\\n  /**\\r\\n   * 是否为第一条\\r\\n   */\\r\\n  readonly first: boolean;\\r\\n  /**\\r\\n   * 是否最后一条\\r\\n   */\\r\\n  readonly last: boolean;\\r\\n  /**\\r\\n   * 索引是否为偶数\\r\\n   */\\r\\n  readonly even: boolean;\\r\\n  /**\\r\\n   * 索引是否为奇数\\r\\n   */\\r\\n  readonly odd: boolean;\\r\\n}\\r\\n\\r\\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\\r\\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\\r\\n\\r\\nexport interface RowEventArg<T> {\\r\\n  row: T;\\r\\n  event: MouseEvent;\\r\\n  rowIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface CellEventArg<T> extends RowEventArg<T> {\\r\\n  column: NzxColumn;\\r\\n  columnIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface HeaderEventArg {\\r\\n  column: NzxColumn;\\r\\n  event: MouseEvent;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 排序\\r\\n */\\r\\nexport interface SorterResult {\\r\\n  column?: NzxColumn;\\r\\n  order: NzTableSortOrder;\\r\\n  field: string;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 合并单元格参数类型\\r\\n */\\r\\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\\r\\n\\r\\nexport type CellSpanArgType<T> = {\\r\\n  row: T;\\r\\n  column: NzxColumn<T>;\\r\\n  rowIndex: number;\\r\\n  columnIndex: number;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 分页信息\\r\\n */\\r\\nexport interface PageInfo<T> {\\r\\n  total: number;\\r\\n  /**\\r\\n   * 列表数据\\r\\n   */\\r\\n  list: T[];\\r\\n  /**\\r\\n   * 修正后的当前页码\\r\\n   */\\r\\n  pageIndex?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格大小\\r\\n */\\r\\nexport type NzxTableSize = NzTableSize | \'mini\';\\r\\n","properties":[{"name":"column","deprecated":false,"deprecationMessage":"","type":"NzxColumn","optional":false,"description":"","line":145},{"name":"event","deprecated":false,"deprecationMessage":"","type":"MouseEvent","optional":false,"description":"","line":146}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"HttpErrorBean","id":"interface-HttpErrorBean-b19f6407c684222ed3ab612651efea570e69ac619c400949139449ca2cb73a8dcb447566f9b66d2d2cfc0a4b6fc3ab489ced975c023295cda0a42112c139f5a5","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpContext, HttpRequest, HttpResponse } from \'@angular/common/http\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxAntdService {\\r\\n  /**\\r\\n   * 默认请求数据类型, 默认 json\\r\\n   */\\r\\n  contentType?: \'form\' | \'json\';\\r\\n  /**\\r\\n   * 请求的根路径,例如/context\\r\\n   */\\r\\n  basePath?: string;\\r\\n  /**\\r\\n   * 响应的数据配置\\r\\n   */\\r\\n  response?: ResponseSetting;\\r\\n  /**\\r\\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\\r\\n   */\\r\\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\\r\\n\\r\\n  /**\\r\\n   * 是否有权限\\r\\n   */\\r\\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\\r\\n  /**\\r\\n   * 权限变更, 通常切换用户时需要\\r\\n   */\\r\\n  authChange?: () => Observable<void>;\\r\\n\\r\\n  /**\\r\\n   * 无权限时跳转路径\\r\\n   */\\r\\n  noAuthUrl?: string;\\r\\n\\r\\n  /**\\r\\n   * 表格分页配置\\r\\n   */\\r\\n  table?: TableSetting;\\r\\n\\r\\n  /**\\r\\n   * 字典配置\\r\\n   */\\r\\n  dic?: DicSetting;\\r\\n  constructor() {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * 默认配置\\r\\n */\\r\\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\\r\\n  code: \'code\',\\r\\n  message: \'message\',\\r\\n  data: \'result\',\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  success: response => response.body.code == 200,\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  timeout: error => error.code == 401,\\r\\n  forceLogout: () => false,\\r\\n  defaultError: error => error.code < 1024\\r\\n};\\r\\n\\r\\n/**\\r\\n * 默认状态错误信息\\r\\n */\\r\\nexport const DEFAULT_STATUS_MESSAGE_MAP: Record<string, string> = {\\r\\n  0: \'请求网络错误，请检查网络是否正常\',\\r\\n  404: \'请求的地址不存在，请检查地址是否正确\',\\r\\n  403: \'您没有操作权限\',\\r\\n  other: \'请求发生错误，请联系管理员\'\\r\\n};\\r\\n\\r\\n/**\\r\\n * 响应配置\\r\\n */\\r\\nexport interface ResponseSetting {\\r\\n  /**\\r\\n   * code字段名称, 支持路径属性\\r\\n   */\\r\\n  code?: string;\\r\\n  /**\\r\\n   * message字段名称, 支持路径属性\\r\\n   */\\r\\n  message?: string;\\r\\n  /**\\r\\n   * data字段名称, 支持路径属性\\r\\n   */\\r\\n  data?: string;\\r\\n  /**\\r\\n   * http错误码和错误信息映射,比如 `{404: \'请求的地址不存在，请检查地址是否正确\', 500: \'服务器错误\'}`\\r\\n   * other 表示不匹配任何错误时显示other信息\\r\\n   */\\r\\n  statusMessageMap?: { [status: string]: string; other: string };\\r\\n\\r\\n  /**\\r\\n   * 是否请求成功\\r\\n   * @param body 响应对象\\r\\n   */\\r\\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\\r\\n  /**\\r\\n   * 是否需要默认错误的错误\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  defaultError?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否登录超时\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  timeout?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否强制退出登录, 比如强制下线\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  forceLogout?: (error: HttpErrorBean) => boolean;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格配置\\r\\n */\\r\\nexport interface TableSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  /**\\r\\n   * 分页大小\\r\\n   */\\r\\n  nzPageSize?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求公共配置\\r\\n */\\r\\nexport interface HttpRequestOptions {\\r\\n  context?: HttpContext;\\r\\n  reportProgress?: boolean;\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  withCredentials?: boolean;\\r\\n  body?: NzSafeAny | null;\\r\\n  method?: string;\\r\\n  url?: string;\\r\\n  setHeaders?: Record<string, NzSafeAny>;\\r\\n  setParams?: Record<string, NzSafeAny>;\\r\\n}\\r\\n\\r\\nexport interface HttpErrorBean<T = NzSafeAny> {\\r\\n  httpError: boolean;\\r\\n  code: number;\\r\\n  message: string;\\r\\n  body: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字典配置信息\\r\\n */\\r\\nexport interface DicSetting {\\r\\n  /**\\r\\n   * 字典的URL,如果是string 将会自动在URL后追加key,如 url 为 /api/dic 真正请求的地址为 /api/dic/{dicKey}\\r\\n   */\\r\\n  url: ((key: string) => string) | string;\\r\\n  /**\\r\\n   * 后台返回的字典label的属性名称, 默认\'label\'\\r\\n   */\\r\\n  labelName?: string;\\r\\n  /**\\r\\n   * 后台返回的字典value的属性名称, 默认\'value\'\\r\\n   */\\r\\n  valueName?: string;\\r\\n}\\r\\n","properties":[{"name":"body","deprecated":false,"deprecationMessage":"","type":"T","optional":false,"description":"","line":175},{"name":"code","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"","line":173},{"name":"httpError","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":172},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":174}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"HttpRequestOptions","id":"interface-HttpRequestOptions-b19f6407c684222ed3ab612651efea570e69ac619c400949139449ca2cb73a8dcb447566f9b66d2d2cfc0a4b6fc3ab489ced975c023295cda0a42112c139f5a5","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpContext, HttpRequest, HttpResponse } from \'@angular/common/http\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxAntdService {\\r\\n  /**\\r\\n   * 默认请求数据类型, 默认 json\\r\\n   */\\r\\n  contentType?: \'form\' | \'json\';\\r\\n  /**\\r\\n   * 请求的根路径,例如/context\\r\\n   */\\r\\n  basePath?: string;\\r\\n  /**\\r\\n   * 响应的数据配置\\r\\n   */\\r\\n  response?: ResponseSetting;\\r\\n  /**\\r\\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\\r\\n   */\\r\\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\\r\\n\\r\\n  /**\\r\\n   * 是否有权限\\r\\n   */\\r\\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\\r\\n  /**\\r\\n   * 权限变更, 通常切换用户时需要\\r\\n   */\\r\\n  authChange?: () => Observable<void>;\\r\\n\\r\\n  /**\\r\\n   * 无权限时跳转路径\\r\\n   */\\r\\n  noAuthUrl?: string;\\r\\n\\r\\n  /**\\r\\n   * 表格分页配置\\r\\n   */\\r\\n  table?: TableSetting;\\r\\n\\r\\n  /**\\r\\n   * 字典配置\\r\\n   */\\r\\n  dic?: DicSetting;\\r\\n  constructor() {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * 默认配置\\r\\n */\\r\\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\\r\\n  code: \'code\',\\r\\n  message: \'message\',\\r\\n  data: \'result\',\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  success: response => response.body.code == 200,\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  timeout: error => error.code == 401,\\r\\n  forceLogout: () => false,\\r\\n  defaultError: error => error.code < 1024\\r\\n};\\r\\n\\r\\n/**\\r\\n * 默认状态错误信息\\r\\n */\\r\\nexport const DEFAULT_STATUS_MESSAGE_MAP: Record<string, string> = {\\r\\n  0: \'请求网络错误，请检查网络是否正常\',\\r\\n  404: \'请求的地址不存在，请检查地址是否正确\',\\r\\n  403: \'您没有操作权限\',\\r\\n  other: \'请求发生错误，请联系管理员\'\\r\\n};\\r\\n\\r\\n/**\\r\\n * 响应配置\\r\\n */\\r\\nexport interface ResponseSetting {\\r\\n  /**\\r\\n   * code字段名称, 支持路径属性\\r\\n   */\\r\\n  code?: string;\\r\\n  /**\\r\\n   * message字段名称, 支持路径属性\\r\\n   */\\r\\n  message?: string;\\r\\n  /**\\r\\n   * data字段名称, 支持路径属性\\r\\n   */\\r\\n  data?: string;\\r\\n  /**\\r\\n   * http错误码和错误信息映射,比如 `{404: \'请求的地址不存在，请检查地址是否正确\', 500: \'服务器错误\'}`\\r\\n   * other 表示不匹配任何错误时显示other信息\\r\\n   */\\r\\n  statusMessageMap?: { [status: string]: string; other: string };\\r\\n\\r\\n  /**\\r\\n   * 是否请求成功\\r\\n   * @param body 响应对象\\r\\n   */\\r\\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\\r\\n  /**\\r\\n   * 是否需要默认错误的错误\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  defaultError?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否登录超时\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  timeout?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否强制退出登录, 比如强制下线\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  forceLogout?: (error: HttpErrorBean) => boolean;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格配置\\r\\n */\\r\\nexport interface TableSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  /**\\r\\n   * 分页大小\\r\\n   */\\r\\n  nzPageSize?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求公共配置\\r\\n */\\r\\nexport interface HttpRequestOptions {\\r\\n  context?: HttpContext;\\r\\n  reportProgress?: boolean;\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  withCredentials?: boolean;\\r\\n  body?: NzSafeAny | null;\\r\\n  method?: string;\\r\\n  url?: string;\\r\\n  setHeaders?: Record<string, NzSafeAny>;\\r\\n  setParams?: Record<string, NzSafeAny>;\\r\\n}\\r\\n\\r\\nexport interface HttpErrorBean<T = NzSafeAny> {\\r\\n  httpError: boolean;\\r\\n  code: number;\\r\\n  message: string;\\r\\n  body: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字典配置信息\\r\\n */\\r\\nexport interface DicSetting {\\r\\n  /**\\r\\n   * 字典的URL,如果是string 将会自动在URL后追加key,如 url 为 /api/dic 真正请求的地址为 /api/dic/{dicKey}\\r\\n   */\\r\\n  url: ((key: string) => string) | string;\\r\\n  /**\\r\\n   * 后台返回的字典label的属性名称, 默认\'label\'\\r\\n   */\\r\\n  labelName?: string;\\r\\n  /**\\r\\n   * 后台返回的字典value的属性名称, 默认\'value\'\\r\\n   */\\r\\n  valueName?: string;\\r\\n}\\r\\n","properties":[{"name":"body","deprecated":false,"deprecationMessage":"","type":"NzSafeAny | null","optional":true,"description":"","line":164},{"name":"context","deprecated":false,"deprecationMessage":"","type":"HttpContext","optional":true,"description":"","line":160},{"name":"method","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"","line":165},{"name":"reportProgress","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":161},{"name":"responseType","deprecated":false,"deprecationMessage":"","type":"\\"arraybuffer\\" | \\"blob\\" | \\"json\\" | \\"text\\"","optional":true,"description":"","line":162},{"name":"setHeaders","deprecated":false,"deprecationMessage":"","type":"Record<string | NzSafeAny>","optional":true,"description":"","line":167},{"name":"setParams","deprecated":false,"deprecationMessage":"","type":"Record<string | NzSafeAny>","optional":true,"description":"","line":168},{"name":"url","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"","line":166},{"name":"withCredentials","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":163}],"indexSignatures":[],"kind":165,"description":"<p>请求公共配置</p>\\n","rawdescription":"\\n\\n请求公共配置\\n","methods":[]},{"name":"IndexAttr","id":"interface-IndexAttr-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport {NzTableFilterFn, NzTableSize, NzTableSortFn, NzTableSortOrder} from \'ng-zorro-antd/table\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\\r\\n  thText?: string;\\r\\n  /**\\r\\n   * th内容自定义, 不包含th标签本身\\r\\n   */\\r\\n  thTemplate?: string | TemplateRef<T>;\\r\\n\\r\\n  /**\\r\\n   * 字段名称\\r\\n   */\\r\\n  name?: string;\\r\\n  /**\\r\\n   * td自定义渲染模版, string\\r\\n   */\\r\\n  tdTemplate?: string | TemplateRef<T>;\\r\\n  /**\\r\\n   * 是否为序号\\r\\n   */\\r\\n  isIndex?: boolean;\\r\\n  /**\\r\\n   * 格式化列数据\\r\\n   * @param data 当前字段数据\\r\\n   * @param row 行数据\\r\\n   * @param index 行索引\\r\\n   */\\r\\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\\r\\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n\\r\\n  /**\\r\\n   * 用于分组表头\\r\\n   */\\r\\n  children?: NzxColumn<T>[];\\r\\n\\r\\n  /**\\r\\n   * nzShowCheckbox为true, 默认启用enableCheckAll\\r\\n   */\\r\\n  enableCheckAll?: boolean;\\r\\n  nzShowCheckbox?: boolean;\\r\\n  nzDisabled?: boolean;\\r\\n  nzIndeterminate?: boolean;\\r\\n  checked?: boolean;\\r\\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\\r\\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzShowRowSelection?: boolean;\\r\\n  nzSelections?: Array<{\\r\\n    text: string;\\r\\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\\r\\n  }>;\\r\\n  nzShowSort?: boolean;\\r\\n  nzSortPriority?: boolean;\\r\\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\\r\\n  nzSortDirections?: NzTableSortOrder[];\\r\\n  nzSortOrder?: NzTableSortOrder;\\r\\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\\r\\n  nzColumnKey?: string;\\r\\n\\r\\n  nzShowFilter?: boolean;\\r\\n  nzCustomFilter?: boolean;\\r\\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\\r\\n  nzFilterMultiple?: boolean;\\r\\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\\r\\n  nzFilterChange?: Array<T | T[]>;\\r\\n\\r\\n  nzWidth?: string | null;\\r\\n  thAlign?: \'left\' | \'right\' | \'center\';\\r\\n  tdAlign?: \'left\' | \'right\' | \'center\';\\r\\n  nzBreakWord?: boolean;\\r\\n  nzEllipsis?: boolean;\\r\\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzIndentSize?: number;\\r\\n\\r\\n  fixed?: \'left\' | \'right\';\\r\\n  /**\\r\\n   * 是否显示展开\\r\\n   */\\r\\n  showExpand?: boolean | null;\\r\\n  /**\\r\\n   * 是否显示列\\r\\n   */\\r\\n  visible?: boolean | null;\\r\\n  // column setting\\r\\n  /**\\r\\n   * 在设置中列显示的文本,如果为空 则使用thText\\r\\n   */\\r\\n  settingText?: string;\\r\\n  /**\\r\\n   *  在设置中是否显示该列\\r\\n   */\\r\\n  settingVisible?: boolean | null;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  settingDisabled?: boolean | null;\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport interface IndexAttr {\\r\\n  /**\\r\\n   * 当前条目的索引\\r\\n   */\\r\\n  readonly index: number;\\r\\n  /**\\r\\n   * 是否为第一条\\r\\n   */\\r\\n  readonly first: boolean;\\r\\n  /**\\r\\n   * 是否最后一条\\r\\n   */\\r\\n  readonly last: boolean;\\r\\n  /**\\r\\n   * 索引是否为偶数\\r\\n   */\\r\\n  readonly even: boolean;\\r\\n  /**\\r\\n   * 索引是否为奇数\\r\\n   */\\r\\n  readonly odd: boolean;\\r\\n}\\r\\n\\r\\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\\r\\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\\r\\n\\r\\nexport interface RowEventArg<T> {\\r\\n  row: T;\\r\\n  event: MouseEvent;\\r\\n  rowIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface CellEventArg<T> extends RowEventArg<T> {\\r\\n  column: NzxColumn;\\r\\n  columnIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface HeaderEventArg {\\r\\n  column: NzxColumn;\\r\\n  event: MouseEvent;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 排序\\r\\n */\\r\\nexport interface SorterResult {\\r\\n  column?: NzxColumn;\\r\\n  order: NzTableSortOrder;\\r\\n  field: string;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 合并单元格参数类型\\r\\n */\\r\\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\\r\\n\\r\\nexport type CellSpanArgType<T> = {\\r\\n  row: T;\\r\\n  column: NzxColumn<T>;\\r\\n  rowIndex: number;\\r\\n  columnIndex: number;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 分页信息\\r\\n */\\r\\nexport interface PageInfo<T> {\\r\\n  total: number;\\r\\n  /**\\r\\n   * 列表数据\\r\\n   */\\r\\n  list: T[];\\r\\n  /**\\r\\n   * 修正后的当前页码\\r\\n   */\\r\\n  pageIndex?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格大小\\r\\n */\\r\\nexport type NzxTableSize = NzTableSize | \'mini\';\\r\\n","properties":[{"name":"even","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"<p>索引是否为偶数</p>\\n","line":123,"rawdescription":"\\n\\n索引是否为偶数\\n","modifierKind":[144]},{"name":"first","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"<p>是否为第一条</p>\\n","line":115,"rawdescription":"\\n\\n是否为第一条\\n","modifierKind":[144]},{"name":"index","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>当前条目的索引</p>\\n","line":111,"rawdescription":"\\n\\n当前条目的索引\\n","modifierKind":[144]},{"name":"last","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"<p>是否最后一条</p>\\n","line":119,"rawdescription":"\\n\\n是否最后一条\\n","modifierKind":[144]},{"name":"odd","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"<p>索引是否为奇数</p>\\n","line":127,"rawdescription":"\\n\\n索引是否为奇数\\n","modifierKind":[144]}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"LogoutType","id":"interface-LogoutType-ac06bb9cbef274070b198638e40234bfa0fde84484818a6fd6ec2b0c8d10fba217458b90b817a61cc72aa6bb1cd5e9459f98f9ba7ad323e6ddc866cddcda59fb","file":"lib/http-interceptor/logout.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpError, ResponseModel } from \'./http.model\';\\r\\nimport { Subject, Subscription } from \'rxjs\';\\r\\nimport { NzxModalWrapService } from \'@xmagic/nzx-antd/modal\';\\r\\nimport { throttleTime } from \'rxjs/operators\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { DEFAULT_RESPONSE_SETTING, NzxAntdService, ResponseSetting } from \'@xmagic/nzx-antd\'\\r\\n\\r\\n/**\\r\\n * 退出通知\\r\\n */\\r\\n@Injectable({ providedIn: \'root\' })\\r\\nexport class LogoutService {\\r\\n  protected readonly timeoutFn: (error: HttpError) => boolean;\\r\\n  private loginNotify$ = new Subject<LogoutType>();\\r\\n\\r\\n  constructor(protected modal: NzxModalWrapService, protected antdService: NzxAntdService) {\\r\\n    this.timeoutFn = NzxUtils.extend<ResponseSetting>({}, DEFAULT_RESPONSE_SETTING, this.antdService.response).timeout!;\\r\\n  }\\r\\n\\r\\n  notifyLogin(error: HttpError<ResponseModel>): void {\\r\\n    this.loginNotify$.next({\\r\\n      message: error.message,\\r\\n      url: (error.body as { url?: string })?.url,\\r\\n      timeout: this.timeoutFn(error)\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 静默通知退出\\r\\n   * @param message 提示消息\\r\\n   * @param code 错误码 -1 不显示提示信息\\r\\n   */\\r\\n  notifyLogout(message: string = \'\', code = 0): void {\\r\\n    this.notifyLogin(new HttpError(false, code, message, {}));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 执行退出登录Observable\\r\\n   * @param logoutType\\r\\n   */\\r\\n  logout(logoutType: LogoutType): void {\\r\\n    this.loginNotify$.next(logoutType);\\r\\n  }\\r\\n\\r\\n  onLogout(fn: (logoutType: LogoutType) => void): Subscription {\\r\\n    return this.loginNotify$.asObservable().pipe(throttleTime(2000)).subscribe(fn);\\r\\n  }\\r\\n}\\r\\n\\r\\nexport interface LogoutType {\\r\\n  /**\\r\\n   * url\\r\\n   */\\r\\n  url?: string;\\r\\n  /**\\r\\n   * 是否超时\\r\\n   */\\r\\n  timeout?: boolean;\\r\\n  /**\\r\\n   * 错误信息\\r\\n   */\\r\\n  message?: string;\\r\\n}\\r\\n","properties":[{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>错误信息</p>\\n","line":63,"rawdescription":"\\n\\n错误信息\\n"},{"name":"timeout","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>是否超时</p>\\n","line":59,"rawdescription":"\\n\\n是否超时\\n"},{"name":"url","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>url</p>\\n","line":55,"rawdescription":"\\n\\nurl\\n"}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"NzxCheckboxOption","id":"interface-NzxCheckboxOption-a9a4c531c6c05de56fa35253deef1eedeac018cfcadc3b3b7f71fc55d74105f3a320e178f32c50bf60cee15f84a68268a3f85174c372c06834907177f0ef81cd","file":"lib/checkbox/checkbox.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  OnChanges,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  SimpleChange,\\r\\n  SimpleChanges,\\r\\n  TemplateRef,\\r\\n  ViewEncapsulation\\r\\n} from \'@angular/core\';\\r\\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\r\\nimport { BaseControl } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NgStyleInterface, NzSafeAny, NgClassType } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n/**\\r\\n * 增强`nz-checkbox`组件, 把数据和值分离\\r\\n */\\r\\n@Component({\\r\\n  selector: \'nzx-checkbox\',\\r\\n  templateUrl: \'./checkbox.component.html\',\\r\\n  preserveWhitespaces: false,\\r\\n  encapsulation: ViewEncapsulation.None,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NzxCheckboxComponent),\\r\\n      multi: true\\r\\n    }\\r\\n  ]\\r\\n})\\r\\nexport class NzxCheckboxComponent<T = NzSafeAny>\\r\\n  extends BaseControl<T[]>\\r\\n  implements ControlValueAccessor, OnInit, OnChanges\\r\\n{\\r\\n  /**\\r\\n   * checkbox数据源, 根据数据生成 checkbox\\r\\n   */\\r\\n  @Input() nzxOptions: NzxCheckboxOption<T>[] = [];\\r\\n  /**\\r\\n   * 禁用所有复选框\\r\\n   */\\r\\n  @Input() override nzxDisabled = false;\\r\\n  /**\\r\\n   * 布局方式, 水平/垂直\\r\\n   */\\r\\n  @Input() nzxLayout: \'horizontal\' | \'vertical\' = \'horizontal\';\\r\\n  /**\\r\\n   * 获取焦点事件\\r\\n   */\\r\\n  @Output() nzxFocus = new EventEmitter<NzxCheckboxOption<T>>();\\r\\n  /**\\r\\n   * 失去焦点事件\\r\\n   */\\r\\n  @Output() nzxBlur = new EventEmitter<NzxCheckboxOption<T>>();\\r\\n  nzxValue: T[] = [];\\r\\n  constructor(protected cdr: ChangeDetectorRef) {\\r\\n    super();\\r\\n  }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.nzxValue = (this.nzxOptions || []).filter(v => v.checked).map(v => v.value);\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\\r\\n    if (changes.nzxOptions && !changes.nzxOptions.isFirstChange()) {\\r\\n      this.writeValue(this.nzxValue);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  ngModelChange(values: T[]) {\\r\\n    this.nzxValue = values;\\r\\n    this.onTouched();\\r\\n    this.onChange(this.nzxValue);\\r\\n  }\\r\\n\\r\\n  writeValue(value: T[] | null): void {\\r\\n    this.nzxValue = value == null ? [] : Array.isArray(value) ? value : [value];\\r\\n    if (this.nzxOptions && this.nzxOptions.length) {\\r\\n      this.nzxOptions.forEach(v => (v.checked = this.nzxValue.indexOf(v.value) !== -1));\\r\\n    }\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 数据配置项\\r\\n */\\r\\nexport interface NzxCheckboxOption<T = NzSafeAny> {\\r\\n  /**\\r\\n   *\\r\\n   */\\r\\n  label: string | TemplateRef<NzxCheckboxOption>;\\r\\n  /**\\r\\n   * 值\\r\\n   */\\r\\n  value: T;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  disabled?: boolean;\\r\\n  /**\\r\\n   * 是否隐藏\\r\\n   */\\r\\n  hide?: boolean;\\r\\n  /**\\r\\n   * 是否半选\\r\\n   */\\r\\n  indeterminate?: boolean;\\r\\n  /**\\r\\n   * 值变化的回调函数\\r\\n   * @param checked\\r\\n   */\\r\\n  ngModelChange?: (checked: boolean, item: NzxCheckboxOption) => void;\\r\\n  /**\\r\\n   * 样式\\r\\n   */\\r\\n  ngStyle?: NgStyleInterface;\\r\\n  /**\\r\\n   * class 样式\\r\\n   */\\r\\n  ngClass?: NgClassType;\\r\\n\\r\\n  /**\\r\\n   * 包裹CheckBox样式, 垂直布局有效\\r\\n   */\\r\\n  wrapperNStyle?: NgStyleInterface;\\r\\n  /**\\r\\n   * class 包裹CheckBox样式, 垂直布局有效\\r\\n   */\\r\\n  wrapperNgClass?: NgClassType;\\r\\n\\r\\n  /**\\r\\n   * 额外附加数据\\r\\n   */\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport type OptionItem = Omit<NzxCheckboxOption, \'indeterminate\' | \'ngModelChange\'>;\\r\\n","properties":[{"name":"disabled","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>是否禁用</p>\\n","line":106,"rawdescription":"\\n\\n是否禁用\\n"},{"name":"hide","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>是否隐藏</p>\\n","line":110,"rawdescription":"\\n\\n是否隐藏\\n"},{"name":"indeterminate","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>是否半选</p>\\n","line":114,"rawdescription":"\\n\\n是否半选\\n"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string | TemplateRef<NzxCheckboxOption>","optional":false,"description":"","line":98,"rawdescription":"\\n\\n\\n"},{"name":"ngClass","deprecated":false,"deprecationMessage":"","type":"NgClassType","optional":true,"description":"<p>class 样式</p>\\n","line":127,"rawdescription":"\\n\\nclass 样式\\n"},{"name":"ngModelChange","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>值变化的回调函数</p>\\n","line":119,"rawdescription":"\\n\\n值变化的回调函数\\n","jsdoctags":[{"pos":2673,"end":2692,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":2674,"end":2679,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"","name":{"pos":2680,"end":2687,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"checked"},"isNameFirst":true,"isBracketed":false}]},{"name":"ngStyle","deprecated":false,"deprecationMessage":"","type":"NgStyleInterface","optional":true,"description":"<p>样式</p>\\n","line":123,"rawdescription":"\\n\\n样式\\n"},{"name":"value","deprecated":false,"deprecationMessage":"","type":"T","optional":false,"description":"<p>值</p>\\n","line":102,"rawdescription":"\\n\\n值\\n"},{"name":"wrapperNgClass","deprecated":false,"deprecationMessage":"","type":"NgClassType","optional":true,"description":"<p>class 包裹CheckBox样式, 垂直布局有效</p>\\n","line":136,"rawdescription":"\\n\\nclass 包裹CheckBox样式, 垂直布局有效\\n"},{"name":"wrapperNStyle","deprecated":false,"deprecationMessage":"","type":"NgStyleInterface","optional":true,"description":"<p>包裹CheckBox样式, 垂直布局有效</p>\\n","line":132,"rawdescription":"\\n\\n包裹CheckBox样式, 垂直布局有效\\n"}],"indexSignatures":[{"id":"index-declaration-a9a4c531c6c05de56fa35253deef1eedeac018cfcadc3b3b7f71fc55d74105f3a320e178f32c50bf60cee15f84a68268a3f85174c372c06834907177f0ef81cd","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"NzSafeAny","line":136,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n额外附加数据\\n","description":"<p>额外附加数据</p>\\n"}],"kind":175,"description":"<p>数据配置项</p>\\n","rawdescription":"\\n\\n数据配置项\\n","methods":[]},{"name":"NzxColumn","id":"interface-NzxColumn-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport {NzTableFilterFn, NzTableSize, NzTableSortFn, NzTableSortOrder} from \'ng-zorro-antd/table\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\\r\\n  thText?: string;\\r\\n  /**\\r\\n   * th内容自定义, 不包含th标签本身\\r\\n   */\\r\\n  thTemplate?: string | TemplateRef<T>;\\r\\n\\r\\n  /**\\r\\n   * 字段名称\\r\\n   */\\r\\n  name?: string;\\r\\n  /**\\r\\n   * td自定义渲染模版, string\\r\\n   */\\r\\n  tdTemplate?: string | TemplateRef<T>;\\r\\n  /**\\r\\n   * 是否为序号\\r\\n   */\\r\\n  isIndex?: boolean;\\r\\n  /**\\r\\n   * 格式化列数据\\r\\n   * @param data 当前字段数据\\r\\n   * @param row 行数据\\r\\n   * @param index 行索引\\r\\n   */\\r\\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\\r\\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n\\r\\n  /**\\r\\n   * 用于分组表头\\r\\n   */\\r\\n  children?: NzxColumn<T>[];\\r\\n\\r\\n  /**\\r\\n   * nzShowCheckbox为true, 默认启用enableCheckAll\\r\\n   */\\r\\n  enableCheckAll?: boolean;\\r\\n  nzShowCheckbox?: boolean;\\r\\n  nzDisabled?: boolean;\\r\\n  nzIndeterminate?: boolean;\\r\\n  checked?: boolean;\\r\\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\\r\\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzShowRowSelection?: boolean;\\r\\n  nzSelections?: Array<{\\r\\n    text: string;\\r\\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\\r\\n  }>;\\r\\n  nzShowSort?: boolean;\\r\\n  nzSortPriority?: boolean;\\r\\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\\r\\n  nzSortDirections?: NzTableSortOrder[];\\r\\n  nzSortOrder?: NzTableSortOrder;\\r\\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\\r\\n  nzColumnKey?: string;\\r\\n\\r\\n  nzShowFilter?: boolean;\\r\\n  nzCustomFilter?: boolean;\\r\\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\\r\\n  nzFilterMultiple?: boolean;\\r\\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\\r\\n  nzFilterChange?: Array<T | T[]>;\\r\\n\\r\\n  nzWidth?: string | null;\\r\\n  thAlign?: \'left\' | \'right\' | \'center\';\\r\\n  tdAlign?: \'left\' | \'right\' | \'center\';\\r\\n  nzBreakWord?: boolean;\\r\\n  nzEllipsis?: boolean;\\r\\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzIndentSize?: number;\\r\\n\\r\\n  fixed?: \'left\' | \'right\';\\r\\n  /**\\r\\n   * 是否显示展开\\r\\n   */\\r\\n  showExpand?: boolean | null;\\r\\n  /**\\r\\n   * 是否显示列\\r\\n   */\\r\\n  visible?: boolean | null;\\r\\n  // column setting\\r\\n  /**\\r\\n   * 在设置中列显示的文本,如果为空 则使用thText\\r\\n   */\\r\\n  settingText?: string;\\r\\n  /**\\r\\n   *  在设置中是否显示该列\\r\\n   */\\r\\n  settingVisible?: boolean | null;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  settingDisabled?: boolean | null;\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport interface IndexAttr {\\r\\n  /**\\r\\n   * 当前条目的索引\\r\\n   */\\r\\n  readonly index: number;\\r\\n  /**\\r\\n   * 是否为第一条\\r\\n   */\\r\\n  readonly first: boolean;\\r\\n  /**\\r\\n   * 是否最后一条\\r\\n   */\\r\\n  readonly last: boolean;\\r\\n  /**\\r\\n   * 索引是否为偶数\\r\\n   */\\r\\n  readonly even: boolean;\\r\\n  /**\\r\\n   * 索引是否为奇数\\r\\n   */\\r\\n  readonly odd: boolean;\\r\\n}\\r\\n\\r\\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\\r\\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\\r\\n\\r\\nexport interface RowEventArg<T> {\\r\\n  row: T;\\r\\n  event: MouseEvent;\\r\\n  rowIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface CellEventArg<T> extends RowEventArg<T> {\\r\\n  column: NzxColumn;\\r\\n  columnIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface HeaderEventArg {\\r\\n  column: NzxColumn;\\r\\n  event: MouseEvent;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 排序\\r\\n */\\r\\nexport interface SorterResult {\\r\\n  column?: NzxColumn;\\r\\n  order: NzTableSortOrder;\\r\\n  field: string;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 合并单元格参数类型\\r\\n */\\r\\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\\r\\n\\r\\nexport type CellSpanArgType<T> = {\\r\\n  row: T;\\r\\n  column: NzxColumn<T>;\\r\\n  rowIndex: number;\\r\\n  columnIndex: number;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 分页信息\\r\\n */\\r\\nexport interface PageInfo<T> {\\r\\n  total: number;\\r\\n  /**\\r\\n   * 列表数据\\r\\n   */\\r\\n  list: T[];\\r\\n  /**\\r\\n   * 修正后的当前页码\\r\\n   */\\r\\n  pageIndex?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格大小\\r\\n */\\r\\nexport type NzxTableSize = NzTableSize | \'mini\';\\r\\n","properties":[{"name":"checked","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":51},{"name":"children","deprecated":false,"deprecationMessage":"","type":"NzxColumn<T>[]","optional":true,"description":"<p>用于分组表头</p>\\n","line":42,"rawdescription":"\\n\\n用于分组表头\\n"},{"name":"enableCheckAll","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>nzShowCheckbox为true, 默认启用enableCheckAll</p>\\n","line":47,"rawdescription":"\\n\\nnzShowCheckbox为true, 默认启用enableCheckAll\\n"},{"name":"fixed","deprecated":false,"deprecationMessage":"","type":"\\"left\\" | \\"right\\"","optional":true,"description":"","line":82},{"name":"format","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>格式化列数据</p>\\n","line":31,"rawdescription":"\\n\\n格式化列数据\\n","jsdoctags":[{"pos":597,"end":622,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":598,"end":603,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前字段数据</p>\\n","name":{"pos":604,"end":608,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"data"},"isNameFirst":true,"isBracketed":false},{"pos":622,"end":643,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":623,"end":628,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>行数据</p>\\n","name":{"pos":629,"end":632,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"row"},"isNameFirst":true,"isBracketed":false},{"pos":643,"end":664,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":644,"end":649,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>行索引</p>\\n","name":{"pos":650,"end":655,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"index"},"isNameFirst":true,"isBracketed":false}]},{"name":"isIndex","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>是否为序号</p>\\n","line":24,"rawdescription":"\\n\\n是否为序号\\n"},{"name":"name","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>字段名称</p>\\n","line":16,"rawdescription":"\\n\\n字段名称\\n"},{"name":"nzBreakWord","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":77},{"name":"nzColumnKey","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"","line":65},{"name":"nzCustomFilter","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":68},{"name":"nzDisabled","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":49},{"name":"nzEllipsis","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":78},{"name":"nzExpandChange","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"","line":79},{"name":"nzFilterChange","deprecated":false,"deprecationMessage":"","type":"Array<T | []>","optional":true,"description":"","line":72},{"name":"nzFilterFn","deprecated":false,"deprecationMessage":"","type":"NzTableFilterFn<T> | boolean","optional":true,"description":"","line":69},{"name":"nzFilterMultiple","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":70},{"name":"nzFilters","deprecated":false,"deprecationMessage":"","type":"Array<literal type>","optional":true,"description":"","line":71},{"name":"nzIndentSize","deprecated":false,"deprecationMessage":"","type":"number","optional":true,"description":"","line":80},{"name":"nzIndeterminate","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":50},{"name":"nzSelections","deprecated":false,"deprecationMessage":"","type":"Array<literal type>","optional":true,"description":"","line":55},{"name":"nzShowCheckbox","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":48},{"name":"nzShowFilter","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":67},{"name":"nzShowRowSelection","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":54},{"name":"nzShowSort","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":59},{"name":"nzSortDirections","deprecated":false,"deprecationMessage":"","type":"NzTableSortOrder[]","optional":true,"description":"","line":62},{"name":"nzSortFn","deprecated":false,"deprecationMessage":"","type":"NzTableSortFn<T> | boolean | null","optional":true,"description":"","line":61},{"name":"nzSortOrder","deprecated":false,"deprecationMessage":"","type":"NzTableSortOrder","optional":true,"description":"","line":63},{"name":"nzSortOrderChange","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"","line":64},{"name":"nzSortPriority","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":60},{"name":"nzWidth","deprecated":false,"deprecationMessage":"","type":"string | null","optional":true,"description":"","line":74},{"name":"settingDisabled","deprecated":false,"deprecationMessage":"","type":"boolean | null","optional":true,"description":"<p>是否禁用</p>\\n","line":103,"rawdescription":"\\n\\n是否禁用\\n"},{"name":"settingText","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>在设置中列显示的文本,如果为空 则使用thText</p>\\n","line":95,"rawdescription":"\\n\\n在设置中列显示的文本,如果为空 则使用thText\\n"},{"name":"settingVisible","deprecated":false,"deprecationMessage":"","type":"boolean | null","optional":true,"description":"<p> 在设置中是否显示该列</p>\\n","line":99,"rawdescription":"\\n\\n 在设置中是否显示该列\\n"},{"name":"showExpand","deprecated":false,"deprecationMessage":"","type":"boolean | null","optional":true,"description":"<p>是否显示展开</p>\\n","line":86,"rawdescription":"\\n\\n是否显示展开\\n"},{"name":"tdAlign","deprecated":false,"deprecationMessage":"","type":"\\"left\\" | \\"right\\" | \\"center\\"","optional":true,"description":"","line":76},{"name":"tdCheckedChange","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"","line":53},{"name":"tdClassName","deprecated":false,"deprecationMessage":"","type":"NzxClassType | ","optional":true,"description":"","line":36},{"name":"tdNgClass","deprecated":false,"deprecationMessage":"","type":"NzxClassType | ","optional":true,"description":"","line":34},{"name":"tdNgStyle","deprecated":false,"deprecationMessage":"","type":"NzxStyleType | ","optional":true,"description":"","line":35},{"name":"tdStyle","deprecated":false,"deprecationMessage":"","type":"NzxStyleType | ","optional":true,"description":"","line":37},{"name":"tdTemplate","deprecated":false,"deprecationMessage":"","type":"string | TemplateRef<T>","optional":true,"description":"<p>td自定义渲染模版, string</p>\\n","line":20,"rawdescription":"\\n\\ntd自定义渲染模版, string\\n"},{"name":"thAlign","deprecated":false,"deprecationMessage":"","type":"\\"left\\" | \\"right\\" | \\"center\\"","optional":true,"description":"","line":75},{"name":"thCheckedChange","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"","line":52},{"name":"thNgClass","deprecated":false,"deprecationMessage":"","type":"NzxClassType | ","optional":true,"description":"","line":32},{"name":"thNgStyle","deprecated":false,"deprecationMessage":"","type":"NzxStyleType | ","optional":true,"description":"","line":33},{"name":"thTemplate","deprecated":false,"deprecationMessage":"","type":"string | TemplateRef<T>","optional":true,"description":"<p>th内容自定义, 不包含th标签本身</p>\\n","line":11,"rawdescription":"\\n\\nth内容自定义, 不包含th标签本身\\n"},{"name":"thText","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"","line":7},{"name":"visible","deprecated":false,"deprecationMessage":"","type":"boolean | null","optional":true,"description":"<p>是否显示列</p>\\n","line":90,"rawdescription":"\\n\\n是否显示列\\n"}],"indexSignatures":[{"id":"index-declaration-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"NzSafeAny","line":103,"deprecated":false,"deprecationMessage":""}],"kind":175,"methods":[]},{"name":"PageInfo","id":"interface-PageInfo-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport {NzTableFilterFn, NzTableSize, NzTableSortFn, NzTableSortOrder} from \'ng-zorro-antd/table\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\\r\\n  thText?: string;\\r\\n  /**\\r\\n   * th内容自定义, 不包含th标签本身\\r\\n   */\\r\\n  thTemplate?: string | TemplateRef<T>;\\r\\n\\r\\n  /**\\r\\n   * 字段名称\\r\\n   */\\r\\n  name?: string;\\r\\n  /**\\r\\n   * td自定义渲染模版, string\\r\\n   */\\r\\n  tdTemplate?: string | TemplateRef<T>;\\r\\n  /**\\r\\n   * 是否为序号\\r\\n   */\\r\\n  isIndex?: boolean;\\r\\n  /**\\r\\n   * 格式化列数据\\r\\n   * @param data 当前字段数据\\r\\n   * @param row 行数据\\r\\n   * @param index 行索引\\r\\n   */\\r\\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\\r\\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n\\r\\n  /**\\r\\n   * 用于分组表头\\r\\n   */\\r\\n  children?: NzxColumn<T>[];\\r\\n\\r\\n  /**\\r\\n   * nzShowCheckbox为true, 默认启用enableCheckAll\\r\\n   */\\r\\n  enableCheckAll?: boolean;\\r\\n  nzShowCheckbox?: boolean;\\r\\n  nzDisabled?: boolean;\\r\\n  nzIndeterminate?: boolean;\\r\\n  checked?: boolean;\\r\\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\\r\\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzShowRowSelection?: boolean;\\r\\n  nzSelections?: Array<{\\r\\n    text: string;\\r\\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\\r\\n  }>;\\r\\n  nzShowSort?: boolean;\\r\\n  nzSortPriority?: boolean;\\r\\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\\r\\n  nzSortDirections?: NzTableSortOrder[];\\r\\n  nzSortOrder?: NzTableSortOrder;\\r\\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\\r\\n  nzColumnKey?: string;\\r\\n\\r\\n  nzShowFilter?: boolean;\\r\\n  nzCustomFilter?: boolean;\\r\\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\\r\\n  nzFilterMultiple?: boolean;\\r\\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\\r\\n  nzFilterChange?: Array<T | T[]>;\\r\\n\\r\\n  nzWidth?: string | null;\\r\\n  thAlign?: \'left\' | \'right\' | \'center\';\\r\\n  tdAlign?: \'left\' | \'right\' | \'center\';\\r\\n  nzBreakWord?: boolean;\\r\\n  nzEllipsis?: boolean;\\r\\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzIndentSize?: number;\\r\\n\\r\\n  fixed?: \'left\' | \'right\';\\r\\n  /**\\r\\n   * 是否显示展开\\r\\n   */\\r\\n  showExpand?: boolean | null;\\r\\n  /**\\r\\n   * 是否显示列\\r\\n   */\\r\\n  visible?: boolean | null;\\r\\n  // column setting\\r\\n  /**\\r\\n   * 在设置中列显示的文本,如果为空 则使用thText\\r\\n   */\\r\\n  settingText?: string;\\r\\n  /**\\r\\n   *  在设置中是否显示该列\\r\\n   */\\r\\n  settingVisible?: boolean | null;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  settingDisabled?: boolean | null;\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport interface IndexAttr {\\r\\n  /**\\r\\n   * 当前条目的索引\\r\\n   */\\r\\n  readonly index: number;\\r\\n  /**\\r\\n   * 是否为第一条\\r\\n   */\\r\\n  readonly first: boolean;\\r\\n  /**\\r\\n   * 是否最后一条\\r\\n   */\\r\\n  readonly last: boolean;\\r\\n  /**\\r\\n   * 索引是否为偶数\\r\\n   */\\r\\n  readonly even: boolean;\\r\\n  /**\\r\\n   * 索引是否为奇数\\r\\n   */\\r\\n  readonly odd: boolean;\\r\\n}\\r\\n\\r\\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\\r\\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\\r\\n\\r\\nexport interface RowEventArg<T> {\\r\\n  row: T;\\r\\n  event: MouseEvent;\\r\\n  rowIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface CellEventArg<T> extends RowEventArg<T> {\\r\\n  column: NzxColumn;\\r\\n  columnIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface HeaderEventArg {\\r\\n  column: NzxColumn;\\r\\n  event: MouseEvent;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 排序\\r\\n */\\r\\nexport interface SorterResult {\\r\\n  column?: NzxColumn;\\r\\n  order: NzTableSortOrder;\\r\\n  field: string;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 合并单元格参数类型\\r\\n */\\r\\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\\r\\n\\r\\nexport type CellSpanArgType<T> = {\\r\\n  row: T;\\r\\n  column: NzxColumn<T>;\\r\\n  rowIndex: number;\\r\\n  columnIndex: number;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 分页信息\\r\\n */\\r\\nexport interface PageInfo<T> {\\r\\n  total: number;\\r\\n  /**\\r\\n   * 列表数据\\r\\n   */\\r\\n  list: T[];\\r\\n  /**\\r\\n   * 修正后的当前页码\\r\\n   */\\r\\n  pageIndex?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格大小\\r\\n */\\r\\nexport type NzxTableSize = NzTableSize | \'mini\';\\r\\n","properties":[{"name":"list","deprecated":false,"deprecationMessage":"","type":"T[]","optional":false,"description":"<p>列表数据</p>\\n","line":208,"rawdescription":"\\n\\n列表数据\\n"},{"name":"pageIndex","deprecated":false,"deprecationMessage":"","type":"number","optional":true,"description":"<p>修正后的当前页码</p>\\n","line":212,"rawdescription":"\\n\\n修正后的当前页码\\n"},{"name":"total","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"","line":204}],"indexSignatures":[],"kind":165,"description":"<p>分页信息</p>\\n","rawdescription":"\\n\\n分页信息\\n","methods":[]},{"name":"ResponseModel","id":"interface-ResponseModel-680ab031012390456d98af9e7f62a6723cdacbb90ac05f8995f40f11f7f0bbdc25005d25e8c57d52b0bc3b3583e7f75687404fb658612495c239bae271de3004","file":"lib/http-interceptor/http.model.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\n/**\\r\\n * 服务端响应实体, 可以通过设置 http请求参数\\r\\n * {observe: \'response\'} 拿到完整数据\\r\\n */\\r\\nexport interface ResponseModel<T = NzSafeAny> {\\r\\n  /**\\r\\n   * 服务端返回编码\\r\\n   */\\r\\n  code?: number;\\r\\n  message?: string;\\r\\n  data?: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * http 请求出错后，在中间件中封闭为统一的格式。\\r\\n */\\r\\nexport class HttpError<T = NzSafeAny> {\\r\\n  /**\\r\\n   *\\r\\n   * @param httpError 是否是HTTP原始异常\\r\\n   * @param code 错误码, 如果是HTTP原始异常,则为status code\\r\\n   * @param message 错误消息\\r\\n   * @param body 返回数据\\r\\n   */\\r\\n  constructor(public httpError: boolean, public code: number, public message: string, public body: T) {}\\r\\n}\\r\\n","properties":[{"name":"code","deprecated":false,"deprecationMessage":"","type":"number","optional":true,"description":"<p>服务端返回编码</p>\\n","line":11,"rawdescription":"\\n\\n服务端返回编码\\n"},{"name":"data","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"","line":13},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"","line":12}],"indexSignatures":[],"kind":165,"description":"<p>服务端响应实体, 可以通过设置 http请求参数\\n{observe: &#39;response&#39;} 拿到完整数据</p>\\n","rawdescription":"\\n\\n服务端响应实体, 可以通过设置 http请求参数\\n{observe: \'response\'} 拿到完整数据\\n","methods":[]},{"name":"ResponseSetting","id":"interface-ResponseSetting-b19f6407c684222ed3ab612651efea570e69ac619c400949139449ca2cb73a8dcb447566f9b66d2d2cfc0a4b6fc3ab489ced975c023295cda0a42112c139f5a5","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpContext, HttpRequest, HttpResponse } from \'@angular/common/http\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxAntdService {\\r\\n  /**\\r\\n   * 默认请求数据类型, 默认 json\\r\\n   */\\r\\n  contentType?: \'form\' | \'json\';\\r\\n  /**\\r\\n   * 请求的根路径,例如/context\\r\\n   */\\r\\n  basePath?: string;\\r\\n  /**\\r\\n   * 响应的数据配置\\r\\n   */\\r\\n  response?: ResponseSetting;\\r\\n  /**\\r\\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\\r\\n   */\\r\\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\\r\\n\\r\\n  /**\\r\\n   * 是否有权限\\r\\n   */\\r\\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\\r\\n  /**\\r\\n   * 权限变更, 通常切换用户时需要\\r\\n   */\\r\\n  authChange?: () => Observable<void>;\\r\\n\\r\\n  /**\\r\\n   * 无权限时跳转路径\\r\\n   */\\r\\n  noAuthUrl?: string;\\r\\n\\r\\n  /**\\r\\n   * 表格分页配置\\r\\n   */\\r\\n  table?: TableSetting;\\r\\n\\r\\n  /**\\r\\n   * 字典配置\\r\\n   */\\r\\n  dic?: DicSetting;\\r\\n  constructor() {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * 默认配置\\r\\n */\\r\\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\\r\\n  code: \'code\',\\r\\n  message: \'message\',\\r\\n  data: \'result\',\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  success: response => response.body.code == 200,\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  timeout: error => error.code == 401,\\r\\n  forceLogout: () => false,\\r\\n  defaultError: error => error.code < 1024\\r\\n};\\r\\n\\r\\n/**\\r\\n * 默认状态错误信息\\r\\n */\\r\\nexport const DEFAULT_STATUS_MESSAGE_MAP: Record<string, string> = {\\r\\n  0: \'请求网络错误，请检查网络是否正常\',\\r\\n  404: \'请求的地址不存在，请检查地址是否正确\',\\r\\n  403: \'您没有操作权限\',\\r\\n  other: \'请求发生错误，请联系管理员\'\\r\\n};\\r\\n\\r\\n/**\\r\\n * 响应配置\\r\\n */\\r\\nexport interface ResponseSetting {\\r\\n  /**\\r\\n   * code字段名称, 支持路径属性\\r\\n   */\\r\\n  code?: string;\\r\\n  /**\\r\\n   * message字段名称, 支持路径属性\\r\\n   */\\r\\n  message?: string;\\r\\n  /**\\r\\n   * data字段名称, 支持路径属性\\r\\n   */\\r\\n  data?: string;\\r\\n  /**\\r\\n   * http错误码和错误信息映射,比如 `{404: \'请求的地址不存在，请检查地址是否正确\', 500: \'服务器错误\'}`\\r\\n   * other 表示不匹配任何错误时显示other信息\\r\\n   */\\r\\n  statusMessageMap?: { [status: string]: string; other: string };\\r\\n\\r\\n  /**\\r\\n   * 是否请求成功\\r\\n   * @param body 响应对象\\r\\n   */\\r\\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\\r\\n  /**\\r\\n   * 是否需要默认错误的错误\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  defaultError?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否登录超时\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  timeout?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否强制退出登录, 比如强制下线\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  forceLogout?: (error: HttpErrorBean) => boolean;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格配置\\r\\n */\\r\\nexport interface TableSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  /**\\r\\n   * 分页大小\\r\\n   */\\r\\n  nzPageSize?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求公共配置\\r\\n */\\r\\nexport interface HttpRequestOptions {\\r\\n  context?: HttpContext;\\r\\n  reportProgress?: boolean;\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  withCredentials?: boolean;\\r\\n  body?: NzSafeAny | null;\\r\\n  method?: string;\\r\\n  url?: string;\\r\\n  setHeaders?: Record<string, NzSafeAny>;\\r\\n  setParams?: Record<string, NzSafeAny>;\\r\\n}\\r\\n\\r\\nexport interface HttpErrorBean<T = NzSafeAny> {\\r\\n  httpError: boolean;\\r\\n  code: number;\\r\\n  message: string;\\r\\n  body: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字典配置信息\\r\\n */\\r\\nexport interface DicSetting {\\r\\n  /**\\r\\n   * 字典的URL,如果是string 将会自动在URL后追加key,如 url 为 /api/dic 真正请求的地址为 /api/dic/{dicKey}\\r\\n   */\\r\\n  url: ((key: string) => string) | string;\\r\\n  /**\\r\\n   * 后台返回的字典label的属性名称, 默认\'label\'\\r\\n   */\\r\\n  labelName?: string;\\r\\n  /**\\r\\n   * 后台返回的字典value的属性名称, 默认\'value\'\\r\\n   */\\r\\n  valueName?: string;\\r\\n}\\r\\n","properties":[{"name":"code","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>code字段名称, 支持路径属性</p>\\n","line":85,"rawdescription":"\\n\\ncode字段名称, 支持路径属性\\n"},{"name":"data","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>data字段名称, 支持路径属性</p>\\n","line":93,"rawdescription":"\\n\\ndata字段名称, 支持路径属性\\n"},{"name":"defaultError","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>是否需要默认错误的错误</p>\\n","line":109,"rawdescription":"\\n\\n是否需要默认错误的错误\\n","jsdoctags":[{"pos":2144,"end":2166,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":2145,"end":2150,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n","name":{"pos":2151,"end":2156,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"error"},"isNameFirst":true,"isBracketed":false}]},{"name":"forceLogout","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>是否强制退出登录, 比如强制下线</p>\\n","line":119,"rawdescription":"\\n\\n是否强制退出登录, 比如强制下线\\n","jsdoctags":[{"pos":2357,"end":2379,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":2358,"end":2363,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n","name":{"pos":2364,"end":2369,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"error"},"isNameFirst":true,"isBracketed":false}]},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>message字段名称, 支持路径属性</p>\\n","line":89,"rawdescription":"\\n\\nmessage字段名称, 支持路径属性\\n"},{"name":"statusMessageMap","deprecated":false,"deprecationMessage":"","type":"literal type","optional":true,"description":"<p>http错误码和错误信息映射,比如 <code>{404: &#39;请求的地址不存在，请检查地址是否正确&#39;, 500: &#39;服务器错误&#39;}</code>\\nother 表示不匹配任何错误时显示other信息</p>\\n","line":98,"rawdescription":"\\n\\nhttp错误码和错误信息映射,比如 `{404: \'请求的地址不存在，请检查地址是否正确\', 500: \'服务器错误\'}`\\nother 表示不匹配任何错误时显示other信息\\n"},{"name":"success","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>是否请求成功</p>\\n","line":104,"rawdescription":"\\n\\n是否请求成功\\n","jsdoctags":[{"pos":2028,"end":2049,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":2029,"end":2034,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>响应对象</p>\\n","name":{"pos":2035,"end":2039,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"body"},"isNameFirst":true,"isBracketed":false}]},{"name":"timeout","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>是否登录超时</p>\\n","line":114,"rawdescription":"\\n\\n是否登录超时\\n","jsdoctags":[{"pos":2248,"end":2270,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":2249,"end":2254,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n","name":{"pos":2255,"end":2260,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"error"},"isNameFirst":true,"isBracketed":false}]}],"indexSignatures":[],"kind":165,"description":"<p>响应配置</p>\\n","rawdescription":"\\n\\n响应配置\\n","methods":[]},{"name":"RowEventArg","id":"interface-RowEventArg-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport {NzTableFilterFn, NzTableSize, NzTableSortFn, NzTableSortOrder} from \'ng-zorro-antd/table\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\\r\\n  thText?: string;\\r\\n  /**\\r\\n   * th内容自定义, 不包含th标签本身\\r\\n   */\\r\\n  thTemplate?: string | TemplateRef<T>;\\r\\n\\r\\n  /**\\r\\n   * 字段名称\\r\\n   */\\r\\n  name?: string;\\r\\n  /**\\r\\n   * td自定义渲染模版, string\\r\\n   */\\r\\n  tdTemplate?: string | TemplateRef<T>;\\r\\n  /**\\r\\n   * 是否为序号\\r\\n   */\\r\\n  isIndex?: boolean;\\r\\n  /**\\r\\n   * 格式化列数据\\r\\n   * @param data 当前字段数据\\r\\n   * @param row 行数据\\r\\n   * @param index 行索引\\r\\n   */\\r\\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\\r\\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n\\r\\n  /**\\r\\n   * 用于分组表头\\r\\n   */\\r\\n  children?: NzxColumn<T>[];\\r\\n\\r\\n  /**\\r\\n   * nzShowCheckbox为true, 默认启用enableCheckAll\\r\\n   */\\r\\n  enableCheckAll?: boolean;\\r\\n  nzShowCheckbox?: boolean;\\r\\n  nzDisabled?: boolean;\\r\\n  nzIndeterminate?: boolean;\\r\\n  checked?: boolean;\\r\\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\\r\\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzShowRowSelection?: boolean;\\r\\n  nzSelections?: Array<{\\r\\n    text: string;\\r\\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\\r\\n  }>;\\r\\n  nzShowSort?: boolean;\\r\\n  nzSortPriority?: boolean;\\r\\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\\r\\n  nzSortDirections?: NzTableSortOrder[];\\r\\n  nzSortOrder?: NzTableSortOrder;\\r\\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\\r\\n  nzColumnKey?: string;\\r\\n\\r\\n  nzShowFilter?: boolean;\\r\\n  nzCustomFilter?: boolean;\\r\\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\\r\\n  nzFilterMultiple?: boolean;\\r\\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\\r\\n  nzFilterChange?: Array<T | T[]>;\\r\\n\\r\\n  nzWidth?: string | null;\\r\\n  thAlign?: \'left\' | \'right\' | \'center\';\\r\\n  tdAlign?: \'left\' | \'right\' | \'center\';\\r\\n  nzBreakWord?: boolean;\\r\\n  nzEllipsis?: boolean;\\r\\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzIndentSize?: number;\\r\\n\\r\\n  fixed?: \'left\' | \'right\';\\r\\n  /**\\r\\n   * 是否显示展开\\r\\n   */\\r\\n  showExpand?: boolean | null;\\r\\n  /**\\r\\n   * 是否显示列\\r\\n   */\\r\\n  visible?: boolean | null;\\r\\n  // column setting\\r\\n  /**\\r\\n   * 在设置中列显示的文本,如果为空 则使用thText\\r\\n   */\\r\\n  settingText?: string;\\r\\n  /**\\r\\n   *  在设置中是否显示该列\\r\\n   */\\r\\n  settingVisible?: boolean | null;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  settingDisabled?: boolean | null;\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport interface IndexAttr {\\r\\n  /**\\r\\n   * 当前条目的索引\\r\\n   */\\r\\n  readonly index: number;\\r\\n  /**\\r\\n   * 是否为第一条\\r\\n   */\\r\\n  readonly first: boolean;\\r\\n  /**\\r\\n   * 是否最后一条\\r\\n   */\\r\\n  readonly last: boolean;\\r\\n  /**\\r\\n   * 索引是否为偶数\\r\\n   */\\r\\n  readonly even: boolean;\\r\\n  /**\\r\\n   * 索引是否为奇数\\r\\n   */\\r\\n  readonly odd: boolean;\\r\\n}\\r\\n\\r\\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\\r\\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\\r\\n\\r\\nexport interface RowEventArg<T> {\\r\\n  row: T;\\r\\n  event: MouseEvent;\\r\\n  rowIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface CellEventArg<T> extends RowEventArg<T> {\\r\\n  column: NzxColumn;\\r\\n  columnIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface HeaderEventArg {\\r\\n  column: NzxColumn;\\r\\n  event: MouseEvent;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 排序\\r\\n */\\r\\nexport interface SorterResult {\\r\\n  column?: NzxColumn;\\r\\n  order: NzTableSortOrder;\\r\\n  field: string;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 合并单元格参数类型\\r\\n */\\r\\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\\r\\n\\r\\nexport type CellSpanArgType<T> = {\\r\\n  row: T;\\r\\n  column: NzxColumn<T>;\\r\\n  rowIndex: number;\\r\\n  columnIndex: number;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 分页信息\\r\\n */\\r\\nexport interface PageInfo<T> {\\r\\n  total: number;\\r\\n  /**\\r\\n   * 列表数据\\r\\n   */\\r\\n  list: T[];\\r\\n  /**\\r\\n   * 修正后的当前页码\\r\\n   */\\r\\n  pageIndex?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格大小\\r\\n */\\r\\nexport type NzxTableSize = NzTableSize | \'mini\';\\r\\n","properties":[{"name":"event","deprecated":false,"deprecationMessage":"","type":"MouseEvent","optional":false,"description":"","line":135},{"name":"row","deprecated":false,"deprecationMessage":"","type":"T","optional":false,"description":"","line":134},{"name":"rowIndex","deprecated":false,"deprecationMessage":"","type":"IndexAttr","optional":false,"description":"","line":136}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"SorterResult","id":"interface-SorterResult-24b82f0b5bfbf3724d37b576c33ca829b637b9901e50e5e4217bb1590197ea04aad412fe36a511763bea273976b7b797129c8ee74157da28cb2a3c001cac3226","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport {NzTableFilterFn, NzTableSize, NzTableSortFn, NzTableSortOrder} from \'ng-zorro-antd/table\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\\r\\n  thText?: string;\\r\\n  /**\\r\\n   * th内容自定义, 不包含th标签本身\\r\\n   */\\r\\n  thTemplate?: string | TemplateRef<T>;\\r\\n\\r\\n  /**\\r\\n   * 字段名称\\r\\n   */\\r\\n  name?: string;\\r\\n  /**\\r\\n   * td自定义渲染模版, string\\r\\n   */\\r\\n  tdTemplate?: string | TemplateRef<T>;\\r\\n  /**\\r\\n   * 是否为序号\\r\\n   */\\r\\n  isIndex?: boolean;\\r\\n  /**\\r\\n   * 格式化列数据\\r\\n   * @param data 当前字段数据\\r\\n   * @param row 行数据\\r\\n   * @param index 行索引\\r\\n   */\\r\\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\\r\\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\\r\\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\\r\\n\\r\\n  /**\\r\\n   * 用于分组表头\\r\\n   */\\r\\n  children?: NzxColumn<T>[];\\r\\n\\r\\n  /**\\r\\n   * nzShowCheckbox为true, 默认启用enableCheckAll\\r\\n   */\\r\\n  enableCheckAll?: boolean;\\r\\n  nzShowCheckbox?: boolean;\\r\\n  nzDisabled?: boolean;\\r\\n  nzIndeterminate?: boolean;\\r\\n  checked?: boolean;\\r\\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\\r\\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzShowRowSelection?: boolean;\\r\\n  nzSelections?: Array<{\\r\\n    text: string;\\r\\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\\r\\n  }>;\\r\\n  nzShowSort?: boolean;\\r\\n  nzSortPriority?: boolean;\\r\\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\\r\\n  nzSortDirections?: NzTableSortOrder[];\\r\\n  nzSortOrder?: NzTableSortOrder;\\r\\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\\r\\n  nzColumnKey?: string;\\r\\n\\r\\n  nzShowFilter?: boolean;\\r\\n  nzCustomFilter?: boolean;\\r\\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\\r\\n  nzFilterMultiple?: boolean;\\r\\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\\r\\n  nzFilterChange?: Array<T | T[]>;\\r\\n\\r\\n  nzWidth?: string | null;\\r\\n  thAlign?: \'left\' | \'right\' | \'center\';\\r\\n  tdAlign?: \'left\' | \'right\' | \'center\';\\r\\n  nzBreakWord?: boolean;\\r\\n  nzEllipsis?: boolean;\\r\\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\\r\\n  nzIndentSize?: number;\\r\\n\\r\\n  fixed?: \'left\' | \'right\';\\r\\n  /**\\r\\n   * 是否显示展开\\r\\n   */\\r\\n  showExpand?: boolean | null;\\r\\n  /**\\r\\n   * 是否显示列\\r\\n   */\\r\\n  visible?: boolean | null;\\r\\n  // column setting\\r\\n  /**\\r\\n   * 在设置中列显示的文本,如果为空 则使用thText\\r\\n   */\\r\\n  settingText?: string;\\r\\n  /**\\r\\n   *  在设置中是否显示该列\\r\\n   */\\r\\n  settingVisible?: boolean | null;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  settingDisabled?: boolean | null;\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport interface IndexAttr {\\r\\n  /**\\r\\n   * 当前条目的索引\\r\\n   */\\r\\n  readonly index: number;\\r\\n  /**\\r\\n   * 是否为第一条\\r\\n   */\\r\\n  readonly first: boolean;\\r\\n  /**\\r\\n   * 是否最后一条\\r\\n   */\\r\\n  readonly last: boolean;\\r\\n  /**\\r\\n   * 索引是否为偶数\\r\\n   */\\r\\n  readonly even: boolean;\\r\\n  /**\\r\\n   * 索引是否为奇数\\r\\n   */\\r\\n  readonly odd: boolean;\\r\\n}\\r\\n\\r\\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\\r\\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\\r\\n\\r\\nexport interface RowEventArg<T> {\\r\\n  row: T;\\r\\n  event: MouseEvent;\\r\\n  rowIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface CellEventArg<T> extends RowEventArg<T> {\\r\\n  column: NzxColumn;\\r\\n  columnIndex: IndexAttr;\\r\\n}\\r\\n\\r\\nexport interface HeaderEventArg {\\r\\n  column: NzxColumn;\\r\\n  event: MouseEvent;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 排序\\r\\n */\\r\\nexport interface SorterResult {\\r\\n  column?: NzxColumn;\\r\\n  order: NzTableSortOrder;\\r\\n  field: string;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 合并单元格参数类型\\r\\n */\\r\\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\\r\\n\\r\\nexport type CellSpanArgType<T> = {\\r\\n  row: T;\\r\\n  column: NzxColumn<T>;\\r\\n  rowIndex: number;\\r\\n  columnIndex: number;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 分页信息\\r\\n */\\r\\nexport interface PageInfo<T> {\\r\\n  total: number;\\r\\n  /**\\r\\n   * 列表数据\\r\\n   */\\r\\n  list: T[];\\r\\n  /**\\r\\n   * 修正后的当前页码\\r\\n   */\\r\\n  pageIndex?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格大小\\r\\n */\\r\\nexport type NzxTableSize = NzTableSize | \'mini\';\\r\\n","properties":[{"name":"column","deprecated":false,"deprecationMessage":"","type":"NzxColumn","optional":true,"description":"","line":183},{"name":"field","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":185},{"name":"order","deprecated":false,"deprecationMessage":"","type":"NzTableSortOrder","optional":false,"description":"","line":184}],"indexSignatures":[],"kind":165,"description":"<p>排序</p>\\n","rawdescription":"\\n\\n排序\\n","methods":[]},{"name":"TableSetting","id":"interface-TableSetting-b19f6407c684222ed3ab612651efea570e69ac619c400949139449ca2cb73a8dcb447566f9b66d2d2cfc0a4b6fc3ab489ced975c023295cda0a42112c139f5a5","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpContext, HttpRequest, HttpResponse } from \'@angular/common/http\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxAntdService {\\r\\n  /**\\r\\n   * 默认请求数据类型, 默认 json\\r\\n   */\\r\\n  contentType?: \'form\' | \'json\';\\r\\n  /**\\r\\n   * 请求的根路径,例如/context\\r\\n   */\\r\\n  basePath?: string;\\r\\n  /**\\r\\n   * 响应的数据配置\\r\\n   */\\r\\n  response?: ResponseSetting;\\r\\n  /**\\r\\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\\r\\n   */\\r\\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\\r\\n\\r\\n  /**\\r\\n   * 是否有权限\\r\\n   */\\r\\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\\r\\n  /**\\r\\n   * 权限变更, 通常切换用户时需要\\r\\n   */\\r\\n  authChange?: () => Observable<void>;\\r\\n\\r\\n  /**\\r\\n   * 无权限时跳转路径\\r\\n   */\\r\\n  noAuthUrl?: string;\\r\\n\\r\\n  /**\\r\\n   * 表格分页配置\\r\\n   */\\r\\n  table?: TableSetting;\\r\\n\\r\\n  /**\\r\\n   * 字典配置\\r\\n   */\\r\\n  dic?: DicSetting;\\r\\n  constructor() {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * 默认配置\\r\\n */\\r\\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\\r\\n  code: \'code\',\\r\\n  message: \'message\',\\r\\n  data: \'result\',\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  success: response => response.body.code == 200,\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  timeout: error => error.code == 401,\\r\\n  forceLogout: () => false,\\r\\n  defaultError: error => error.code < 1024\\r\\n};\\r\\n\\r\\n/**\\r\\n * 默认状态错误信息\\r\\n */\\r\\nexport const DEFAULT_STATUS_MESSAGE_MAP: Record<string, string> = {\\r\\n  0: \'请求网络错误，请检查网络是否正常\',\\r\\n  404: \'请求的地址不存在，请检查地址是否正确\',\\r\\n  403: \'您没有操作权限\',\\r\\n  other: \'请求发生错误，请联系管理员\'\\r\\n};\\r\\n\\r\\n/**\\r\\n * 响应配置\\r\\n */\\r\\nexport interface ResponseSetting {\\r\\n  /**\\r\\n   * code字段名称, 支持路径属性\\r\\n   */\\r\\n  code?: string;\\r\\n  /**\\r\\n   * message字段名称, 支持路径属性\\r\\n   */\\r\\n  message?: string;\\r\\n  /**\\r\\n   * data字段名称, 支持路径属性\\r\\n   */\\r\\n  data?: string;\\r\\n  /**\\r\\n   * http错误码和错误信息映射,比如 `{404: \'请求的地址不存在，请检查地址是否正确\', 500: \'服务器错误\'}`\\r\\n   * other 表示不匹配任何错误时显示other信息\\r\\n   */\\r\\n  statusMessageMap?: { [status: string]: string; other: string };\\r\\n\\r\\n  /**\\r\\n   * 是否请求成功\\r\\n   * @param body 响应对象\\r\\n   */\\r\\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\\r\\n  /**\\r\\n   * 是否需要默认错误的错误\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  defaultError?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否登录超时\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  timeout?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否强制退出登录, 比如强制下线\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  forceLogout?: (error: HttpErrorBean) => boolean;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格配置\\r\\n */\\r\\nexport interface TableSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  /**\\r\\n   * 分页大小\\r\\n   */\\r\\n  nzPageSize?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求公共配置\\r\\n */\\r\\nexport interface HttpRequestOptions {\\r\\n  context?: HttpContext;\\r\\n  reportProgress?: boolean;\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  withCredentials?: boolean;\\r\\n  body?: NzSafeAny | null;\\r\\n  method?: string;\\r\\n  url?: string;\\r\\n  setHeaders?: Record<string, NzSafeAny>;\\r\\n  setParams?: Record<string, NzSafeAny>;\\r\\n}\\r\\n\\r\\nexport interface HttpErrorBean<T = NzSafeAny> {\\r\\n  httpError: boolean;\\r\\n  code: number;\\r\\n  message: string;\\r\\n  body: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字典配置信息\\r\\n */\\r\\nexport interface DicSetting {\\r\\n  /**\\r\\n   * 字典的URL,如果是string 将会自动在URL后追加key,如 url 为 /api/dic 真正请求的地址为 /api/dic/{dicKey}\\r\\n   */\\r\\n  url: ((key: string) => string) | string;\\r\\n  /**\\r\\n   * 后台返回的字典label的属性名称, 默认\'label\'\\r\\n   */\\r\\n  labelName?: string;\\r\\n  /**\\r\\n   * 后台返回的字典value的属性名称, 默认\'value\'\\r\\n   */\\r\\n  valueName?: string;\\r\\n}\\r\\n","properties":[{"name":"listField","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求结果列表字段  支持 a.b.c</p>\\n","line":137,"rawdescription":"\\n\\n请求结果列表字段  支持 a.b.c\\n"},{"name":"method","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求方式</p>\\n","line":145,"rawdescription":"\\n\\n请求方式\\n"},{"name":"nzPageSize","deprecated":false,"deprecationMessage":"","type":"number","optional":true,"description":"<p>分页大小</p>\\n","line":153,"rawdescription":"\\n\\n分页大小\\n"},{"name":"pageIndexField","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求接口当前页数</p>\\n","line":129,"rawdescription":"\\n\\n请求接口当前页数\\n"},{"name":"pageSizeField","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>每页显示多少条</p>\\n","line":133,"rawdescription":"\\n\\n每页显示多少条\\n"},{"name":"responseType","deprecated":false,"deprecationMessage":"","type":"\\"arraybuffer\\" | \\"blob\\" | \\"json\\" | \\"text\\"","optional":true,"description":"<p> 相应类型</p>\\n","line":149,"rawdescription":"\\n\\n 相应类型\\n"},{"name":"totalField","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求结果总数字段  支持 a.b.c</p>\\n","line":141,"rawdescription":"\\n\\n请求结果总数字段  支持 a.b.c\\n"}],"indexSignatures":[],"kind":165,"description":"<p>表格配置</p>\\n","rawdescription":"\\n\\n表格配置\\n","methods":[]},{"name":"TreeNode","id":"interface-TreeNode-6c60f40030524c8b656a2c65b50e676c03dccd118983b28771b5ba028132b8fa233d33f5f661c02fa5fc0bfdc456c60a0ed863aa9e53fb38f03c531ce8e3dace","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ElementRef } from \'@angular/core\';\\r\\nimport { isNil } from \'ng-zorro-antd/core/util\';\\r\\nimport { Observable } from \'rxjs\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\nconst toStr = Object.prototype.toString;\\r\\nconst hasOwn = Object.prototype.hasOwnProperty;\\r\\nconst defineProperty = Object.defineProperty;\\r\\nconst gOPD = Object.getOwnPropertyDescriptor;\\r\\n\\r\\nclass UtilsClass {\\r\\n  assign = this.extend;\\r\\n\\r\\n  defaultIfy<T = NzSafeAny>(obj: T, defaultValue: NzSafeAny) {\\r\\n    return isNil(obj) ? defaultValue : obj;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 根据属性路径获取对象的属性值\\r\\n   * @param obj 原始对象\\r\\n   * @param path 属性路径\\r\\n   * @param defaultValue 当属性不存在或为undefined返回defaultValue\\r\\n   */\\r\\n  get(obj: NzSafeAny, path?: string | string[], defaultValue?: NzSafeAny) {\\r\\n    if (!obj || path == null || path.length === 0) {\\r\\n      return defaultValue;\\r\\n    }\\r\\n    if (!Array.isArray(path)) {\\r\\n      path = path.indexOf(\'.\') ? path.split(\'.\') : [path];\\r\\n    }\\r\\n    if (path.length === 1) {\\r\\n      const checkObj = obj[path[0]];\\r\\n      return typeof checkObj === \'undefined\' ? defaultValue : checkObj;\\r\\n    }\\r\\n    return path.reduce((o, k) => (o || {})[k], obj) || defaultValue;\\r\\n  }\\r\\n\\r\\n  trim(string: string) {\\r\\n    return (string || \'\').replace(/^[\\\\s\\\\uFEFF]+|[\\\\s\\\\uFEFF]+$/g, \'\');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取唯一Id号\\r\\n   */\\r\\n  getUUID() {\\r\\n    return Date.now() + Math.random().toString().replace(\'0.\', \'\');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 深度clone\\r\\n   * @param target\\r\\n   */\\r\\n  clone<T = NzSafeAny>(target: T): T {\\r\\n    const _target = NzxUtils.isArray(target) ? [] : {};\\r\\n    return this.extend(_target as T, target);\\r\\n  }\\r\\n\\r\\n  // If name is \'__proto__\', and Object.defineProperty is available, define __proto__ as an own property on target\\r\\n  private setProperty<T = NzSafeAny>(target: T, options: { name: string; newValue: NzSafeAny }) {\\r\\n    if (defineProperty && options.name === \'__proto__\') {\\r\\n      defineProperty(target, options.name, {\\r\\n        enumerable: true,\\r\\n        configurable: true,\\r\\n        value: options.newValue,\\r\\n        writable: true\\r\\n      });\\r\\n    } else {\\r\\n      // @ts-ignore\\r\\n      target[options.name] = options.newValue;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Return undefined instead of __proto__ if \'__proto__\' is not an own property\\r\\n  private getProperty<T = NzSafeAny>(obj: T, name: string) {\\r\\n    if (name === \'__proto__\') {\\r\\n      if (!hasOwn.call(obj, name)) {\\r\\n        return void 0;\\r\\n      } else if (gOPD) {\\r\\n        // @ts-ignore\\r\\n        return gOPD(obj, name).value;\\r\\n      }\\r\\n    }\\r\\n    // @ts-ignore\\r\\n    return obj[name];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 继承\\r\\n   * @param target\\r\\n   * @param args\\r\\n   */\\r\\n  extend<T = NzSafeAny>(target: T, ...args: NzSafeAny[]): T {\\r\\n    let copyIsArray, clone;\\r\\n\\r\\n    for (const options of args) {\\r\\n      if (options == null) {\\r\\n        continue;\\r\\n      }\\r\\n\\r\\n      for (const name in options) {\\r\\n        const src = this.getProperty(target, name);\\r\\n        const copy = this.getProperty(options, name);\\r\\n        if (target === copy || copy === undefined) {\\r\\n          continue;\\r\\n        }\\r\\n\\r\\n        // tslint:disable-next-line:no-conditional-assignment\\r\\n        if (NzxUtils.isPlainObject(copy) || (copyIsArray = NzxUtils.isArray(copy))) {\\r\\n          if (copyIsArray) {\\r\\n            copyIsArray = false;\\r\\n            clone = src && NzxUtils.isArray(src) ? src : [];\\r\\n          } else {\\r\\n            clone = src && NzxUtils.isPlainObject(src) ? src : {};\\r\\n          }\\r\\n\\r\\n          this.setProperty(target, { name, newValue: this.extend(clone, copy) });\\r\\n        } else {\\r\\n          this.setProperty(target, { name, newValue: copy });\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return target;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 根据开始和结束数字返回一个数组\\r\\n   * @param start 起始数字\\r\\n   * @param end 结束数字\\r\\n   * @param fill 填充内容,默认\\r\\n   */\\r\\n  range<T = NzSafeAny>(start: number, end: number, fill?: ((num: number, index: number) => T) | T): T[] {\\r\\n    const list: T[] = [];\\r\\n    const fn = fill == null ? (i: number) => i as unknown as T : this.isFunction(fill) ? fill : () => fill;\\r\\n    let index = 0;\\r\\n    for (let i = start; i < end; i++) {\\r\\n      list.push(fn(i, index++));\\r\\n    }\\r\\n    return list;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 遍历树结构\\r\\n   * @param treeNodes TreeNode[]\\r\\n   * @param accept 函数返回false即结束遍历, true或者undefined将继续遍历\\r\\n   * @param childrenName 子节点字段名称\\r\\n   */\\r\\n  forEachTree<T extends TreeNode>(\\r\\n    treeNodes: T[],\\r\\n    accept: (node: T, parentNode: T | undefined, level: number) => boolean | void,\\r\\n    childrenName: keyof T | TreeChildren<T> = \'children\'\\r\\n  ): void {\\r\\n    if (!treeNodes || !treeNodes.length) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const getChildren =\\r\\n      typeof childrenName === \'string\' ? (node: T) => node[childrenName] : (childrenName as TreeChildren<T>);\\r\\n\\r\\n    let stack: T[] = [...treeNodes];\\r\\n    const parents: { count: number; parent?: T; level: number }[] = [{ count: treeNodes.length, level: 0 }];\\r\\n    let counter = 0;\\r\\n\\r\\n    while (stack.length) {\\r\\n      const item = stack.shift()!;\\r\\n      const parent = parents[0];\\r\\n      if (++counter ===  parent.count) {\\r\\n        parents.shift();\\r\\n        counter = 0;\\r\\n      }\\r\\n      if (accept(item, parent.parent, parent.level) === false) {\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      const children = getChildren(item, parent.parent, parent.level);\\r\\n      if (children && children.length) {\\r\\n        stack = stack.concat(children);\\r\\n        parents.push({count: children.length, parent: item, level: parent.level + 1});\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 过滤树, 生成新的树结构\\r\\n   * @param treeNodes 树结构\\r\\n   * @param predicate 过滤函数\\r\\n   * @param childrenName 子节点名称,默认 \'children\'\\r\\n   */\\r\\n  filterTree<T extends TreeNode>(\\r\\n    treeNodes: T[],\\r\\n    predicate: (node: T) => boolean,\\r\\n    childrenName: keyof T = \'children\'\\r\\n  ): T[] {\\r\\n    const filter = (list: T[], children: T[]) => {\\r\\n      for (const node of list) {\\r\\n        const newNode: T = { ...node, [childrenName]: [] };\\r\\n        if (node[childrenName]?.length) {\\r\\n          filter(node[childrenName], newNode[childrenName]);\\r\\n        }\\r\\n\\r\\n        if (predicate(newNode)) {\\r\\n          children.push(newNode);\\r\\n        }\\r\\n      }\\r\\n    };\\r\\n    const result: T[] = [];\\r\\n    filter(treeNodes, result);\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 列表转树结构\\r\\n   * @param list 列表数据\\r\\n   * @param idName id的属性名\\r\\n   * @param pidName parentId属性名\\r\\n   * @param childrenName children属性名\\r\\n   */\\r\\n  listToTree<T extends { pid?: string; id?: string; [key: string]: NzSafeAny }>(\\r\\n    list: T[],\\r\\n    idName: keyof T = \'id\',\\r\\n    pidName: keyof T = \'pid\',\\r\\n    childrenName: string = \'children\'\\r\\n  ): T[] {\\r\\n    if (!list || !list.length) {\\r\\n      return [];\\r\\n    }\\r\\n    const nodeMap: { [key: string]: NzSafeAny } = {};\\r\\n    for (const node of list) {\\r\\n      nodeMap[node[idName]] = node;\\r\\n      // @ts-ignore\\r\\n      node[childrenName] = [];\\r\\n    }\\r\\n\\r\\n    const treeNodes: T[] = [];\\r\\n    for (const node of list) {\\r\\n      const pid = node[pidName];\\r\\n      const parent = nodeMap[node[pidName]];\\r\\n      if (pid && parent) {\\r\\n        parent[childrenName].push(node);\\r\\n      } else {\\r\\n        treeNodes.push(node);\\r\\n      }\\r\\n    }\\r\\n    return treeNodes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取同步请求的响应结果\\r\\n   * @param observable\\r\\n   * @example\\r\\n   * const myObservable = this.http.get<string>(\'url\', { context: new HttpContext().set(SYNCED_ENABLED, true)});\\r\\n   * const value = getAjaxValue(myObservable); // value为string类型\\r\\n   */\\r\\n  getAjaxValue<T = NzSafeAny>(observable: Observable<T>) {\\r\\n    let value!: T;\\r\\n    observable.subscribe(result => (value = result)).unsubscribe();\\r\\n    return value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 根据不同的参数类型 获取dom元素\\r\\n   * @param target\\r\\n   */\\r\\n  getElement(target: ElementRef | HTMLElement | string): HTMLElement | null {\\r\\n    if (!target) {\\r\\n      return null;\\r\\n    }\\r\\n\\r\\n    if (target instanceof HTMLElement) {\\r\\n      return target;\\r\\n    }\\r\\n\\r\\n    const eleRef = target as ElementRef;\\r\\n    if (eleRef.nativeElement) {\\r\\n      return eleRef.nativeElement;\\r\\n    }\\r\\n\\r\\n    if (typeof target === \'string\') {\\r\\n      return document.querySelector(target);\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 字符串模版函数\\r\\n   * @param template 模版\\r\\n   * @param data 数据\\r\\n   * @return 返回渲染后的Html\\r\\n   * @example\\r\\n   * Utils.format(\'{s.0.name}\', { s: [{name: 111}] }) => 111\\r\\n   */\\r\\n  format(template: string | null, data?: Record<string, NzSafeAny>): string {\\r\\n    if (template == null || !data) {\\r\\n      return template || \'\';\\r\\n    }\\r\\n    return template.replace(/\\\\{([\\\\w\\\\.]*)\\\\}/g, (str, key) => {\\r\\n      const path = key.split(\'.\');\\r\\n      let v = data[path.shift()];\\r\\n      for (let i = 0, size = path.length; i < size && v !== null; i++) {\\r\\n        v = v[path[i]];\\r\\n      }\\r\\n      return v == null ? \'\' : v.toString();\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 对Date的扩展，将 Date 转化为指定格式的String\\r\\n   * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\\r\\n   * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\\r\\n   * eg:\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-MM-dd hh:mm:ss.S\') ==> 2006-07-02 08:09:04.423\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-MM-dd 星期E HH:mm:ss\') ==> 2009-03-10 星期二 20:09:04\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-MM-dd 星期e hh:mm:ss\') ==> 2009-03-10 星期2 08:09:04\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-MM-dd 第w周 hh:mm:ss\') ==> 2009-03-10 第2周 08:09:04\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-M-d h:m:s.S\') ==> 2006-7-2 8:9:4.18\\r\\n   */\\r\\n  formatDate(srcDate: Date, fmt: string) {\\r\\n    if (!srcDate) {\\r\\n      return \'\';\\r\\n    }\\r\\n    const week = {\\r\\n      0: \'\\\\u65e5\',\\r\\n      1: \'\\\\u4e00\',\\r\\n      2: \'\\\\u4e8c\',\\r\\n      3: \'\\\\u4e09\',\\r\\n      4: \'\\\\u56db\',\\r\\n      5: \'\\\\u4e94\',\\r\\n      6: \'\\\\u516d\'\\r\\n    };\\r\\n\\r\\n    const o = {\\r\\n      \'M+\': srcDate.getMonth() + 1,\\r\\n      \'d+\': srcDate.getDate(),\\r\\n      \'h+\': srcDate.getHours() % 12 === 0 ? 12 : srcDate.getHours() % 12,\\r\\n      \'H+\': srcDate.getHours(),\\r\\n      \'m+\': srcDate.getMinutes(),\\r\\n      \'s+\': srcDate.getSeconds(),\\r\\n      \'q+\': Math.floor((srcDate.getMonth() + 3) / 3),\\r\\n      \'S+\': srcDate.getMilliseconds(),\\r\\n      \'e+\': srcDate.getDay(),\\r\\n      // @ts-ignore\\r\\n      E: week[srcDate.getDay()],\\r\\n      \'w+\': (date => {\\r\\n        const date2 = new Date(date.getFullYear(), 0, 1);\\r\\n        const day = (date2.getDay() ? date2.getDay() : 7) - (date.getDay() ? date.getDay() : 7);\\r\\n        return Math.ceil(Math.round((date.getTime() - date2.getTime() + day * (24 * 3600000)) / 86400000) / 7) + 1;\\r\\n      })(srcDate)\\r\\n    };\\r\\n    if (/(y+)/.test(fmt)) {\\r\\n      fmt = fmt.replace(RegExp.$1, (srcDate.getFullYear() + \'\').substr(4 - RegExp.$1.length));\\r\\n    }\\r\\n    for (const k in o) {\\r\\n      if (new RegExp(\'(\' + k + \')\').test(fmt)) {\\r\\n        // @ts-ignore\\r\\n        fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : (\'00\' + o[k]).substr((\'\' + o[k]).length));\\r\\n      }\\r\\n    }\\r\\n    return fmt;\\r\\n  }\\r\\n\\r\\n  is(val: unknown, type: string) {\\r\\n    return toStr.call(val) === `[object ${type}]`;\\r\\n  }\\r\\n\\r\\n  isDef<T = unknown>(val?: T): val is T {\\r\\n    return typeof val !== \'undefined\';\\r\\n  }\\r\\n\\r\\n  isUnDef<T = unknown>(val?: T): val is T {\\r\\n    return !this.isDef(val);\\r\\n  }\\r\\n\\r\\n  isObject(val: NzSafeAny): val is Record<NzSafeAny, NzSafeAny> {\\r\\n    return val !== null && this.is(val, \'Object\');\\r\\n  }\\r\\n\\r\\n  isEmpty<T = unknown>(val: T): val is T {\\r\\n    // @ts-ignore\\r\\n    return val == null || val.length === 0;\\r\\n  }\\r\\n\\r\\n  isDate(val: unknown): val is Date {\\r\\n    return this.is(val, \'Date\');\\r\\n  }\\r\\n\\r\\n  isNull(val: unknown): val is null {\\r\\n    return val === null;\\r\\n  }\\r\\n\\r\\n  isNil(val: unknown): val is null | undefined {\\r\\n    return this.isUnDef(val) && this.isNull(val);\\r\\n  }\\r\\n\\r\\n  isNotNil(val: unknown): val is null | undefined {\\r\\n    return !this.isNil(val);\\r\\n  }\\r\\n\\r\\n  isNumber(val: unknown): val is number {\\r\\n    return this.is(val, \'Number\');\\r\\n  }\\r\\n\\r\\n  isPromise<T = NzSafeAny>(val: unknown): val is Promise<T> {\\r\\n    return this.is(val, \'Promise\') || (this.isObject(val) && this.isFunction(val.then) && this.isFunction(val.catch));\\r\\n  }\\r\\n\\r\\n  isObservable(obj: NzSafeAny): obj is Observable<NzSafeAny> {\\r\\n    return obj instanceof Observable || (obj && typeof obj.subscribe === \'function\');\\r\\n  }\\r\\n\\r\\n  isString(val: unknown): val is string {\\r\\n    return this.is(val, \'String\');\\r\\n  }\\r\\n\\r\\n  isFunction(val: unknown): val is Function {\\r\\n    return typeof val === \'function\';\\r\\n  }\\r\\n\\r\\n  isBoolean(val: unknown): val is boolean {\\r\\n    return this.is(val, \'Boolean\');\\r\\n  }\\r\\n\\r\\n  isRegExp(val: unknown): val is RegExp {\\r\\n    return this.is(val, \'RegExp\');\\r\\n  }\\r\\n\\r\\n  isArray(val: NzSafeAny): val is Array<NzSafeAny> {\\r\\n    if (typeof Array.isArray === \'function\') {\\r\\n      return Array.isArray(val);\\r\\n    }\\r\\n    return toStr.call(val) === \'[object Array]\';\\r\\n  }\\r\\n\\r\\n  isWindow(val: NzSafeAny): val is Window {\\r\\n    return typeof window !== \'undefined\' && this.is(val, \'Window\');\\r\\n  }\\r\\n\\r\\n  isElement(val: unknown): val is Element {\\r\\n    return this.isObject(val) && !!val.tagName;\\r\\n  }\\r\\n\\r\\n  isMap(val: unknown): val is Map<NzSafeAny, NzSafeAny> {\\r\\n    return this.is(val, \'Map\');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否为手机号（中国）\\r\\n   * @param value\\r\\n   */\\r\\n  isMobile(value: string): boolean {\\r\\n    return /^(0|\\\\\\\\+?86|17951)?1[0-9]{10}$/.test(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否IP4地址（支持v4、v6）\\r\\n   * @param ip\\r\\n   */\\r\\n  isIp(ip: string) {\\r\\n    return /^(?:^(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}$)|(?:^(?:(?:[a-fA-F\\\\\\\\d]{1,4}:){7}(?:[a-fA-F\\\\\\\\d]{1,4}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|:[a-fA-F\\\\\\\\d]{1,4}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){4}(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){3}(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){2}(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){1}(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)$/.test(\\r\\n      ip\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否是url\\r\\n   * @param path\\r\\n   */\\r\\n  isUrl(path: string): boolean {\\r\\n    return /(((^https?:(?:\\\\/\\\\/)?)(?:[-;:&=\\\\+\\\\$,\\\\w]+@)?[A-Za-z0-9.-]+(?::\\\\d+)?|(?:www.|[-;:&=\\\\+\\\\$,\\\\w]+@)[A-Za-z0-9.-]+)((?:\\\\/[\\\\+~%\\\\/.\\\\w-_]*)?\\\\??(?:[-\\\\+=&;%@.\\\\w_]*)#?(?:[\\\\w]*))?)$/.test(\\r\\n      path\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否中文\\r\\n   * @param value 测试字符串\\r\\n   */\\r\\n  isChinese(value: string): boolean {\\r\\n    return /^[\\\\u4e00-\\\\u9fa5]+$/.test(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否为数值\\r\\n   * @param value\\r\\n   * @param minus 是否允许负数\\r\\n   * @param fraction 最大保留小数位数\\r\\n   */\\r\\n  isNum(value: string, minus?: boolean, fraction?: number): boolean {\\r\\n    const regex =\\r\\n      (minus ? \'^-?\' : \'^\') +\\r\\n      `(([1-9]{1}\\\\\\\\d*)|(0{1}))` +\\r\\n      (fraction && fraction > 0 ? `(\\\\\\\\.\\\\\\\\d{1,${fraction}})?$` : \'$\');\\r\\n    return new RegExp(regex).test(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否为邮箱\\r\\n   * @param value\\r\\n   */\\r\\n  isEmail(value: string) {\\r\\n    return /^([a-z0-9_\\\\.-]+)@([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})$/.test(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否是纯对象值\\r\\n   * @param obj\\r\\n   */\\r\\n  isPlainObject<T = NzSafeAny>(obj: T) {\\r\\n    if (!obj || toStr.call(obj) !== \'[object Object]\') {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    const hasOwnConstructor = hasOwn.call(obj, \'constructor\');\\r\\n    const hasIsPrototypeOf =\\r\\n      // @ts-ignore\\r\\n      obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, \'isPrototypeOf\');\\r\\n    // @ts-ignore\\r\\n    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    let key;\\r\\n    for (key in obj) {\\r\\n      /**/\\r\\n    }\\r\\n\\r\\n    return typeof key === \'undefined\' || hasOwn.call(obj, key);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 转换为日期\\r\\n   * @param date 待转换的值\\r\\n   */\\r\\n  toDate(date?: Date | string | number): Date | null {\\r\\n    if (date == null) {\\r\\n      return null;\\r\\n    }\\r\\n    if (this.isDate(date)) {\\r\\n      return date;\\r\\n    }\\r\\n    if (this.isNumber(date)) {\\r\\n      return new Date(date);\\r\\n    }\\r\\n    if (this.isString(date)) {\\r\\n      const value = Date.parse(date);\\r\\n      if (isNaN(value)) {\\r\\n        const match = date.match(/\\\\d+/g);\\r\\n        if (match) {\\r\\n          // @ts-ignore\\r\\n          return new Date(...match);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 合并对象到FormData\\r\\n   * @param obj 要合并的对象\\r\\n   * @param {FormData} form 表单\\r\\n   */\\r\\n  mergeFormData<T>(form: FormData, obj: T): void {\\r\\n    const list = this.serializeParams(obj);\\r\\n    for (const it of list) {\\r\\n      form.append(it.key, it.value);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 把js对象序列化对请求数据,格式为 a=av&b=bv...&n=nv\\r\\n   * @param obj\\r\\n   * @returns\\r\\n   */\\r\\n  serialize<T>(obj: T): string {\\r\\n    const list = this.serializeParams<T>(obj);\\r\\n    let query = \'\';\\r\\n    for (const it of list) {\\r\\n      query += encodeURIComponent(it.key) + \'=\' + encodeURIComponent(it.value) + \'&\';\\r\\n    }\\r\\n    return query === \'\' ? query : query.substr(0, query.length - 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 把js对象序列化对请求数据\\r\\n   * @param obj\\r\\n   * @returns\\r\\n   */\\r\\n  serializeParams<T>(obj: T): Record<string, NzSafeAny>[] {\\r\\n    if (!obj) {\\r\\n      return [];\\r\\n    }\\r\\n\\r\\n    const query: Record<string, NzSafeAny>[] = [];\\r\\n    this.buildParam(obj, query);\\r\\n    return query;\\r\\n  }\\r\\n\\r\\n  private buildParam<T extends Record<string, NzSafeAny>>(inObj: T, list: Record<string, NzSafeAny>[]) {\\r\\n    let value: NzSafeAny;\\r\\n    let subName: string;\\r\\n    let innerObj: Record<string, string>;\\r\\n    for (const name in inObj) {\\r\\n      value = inObj[name];\\r\\n      if (value instanceof Array) {\\r\\n        for (let i = 0; i < value.length; ++i) {\\r\\n          if (value[i] instanceof Array || value[i] instanceof Object) {\\r\\n            if (value[i].toJSON) {\\r\\n              list.push({ key: name, value: value[i].toJSON() });\\r\\n              continue;\\r\\n            }\\r\\n            innerObj = {};\\r\\n            innerObj[name + \'[\' + i + \']\'] = value[i];\\r\\n            this.buildParam(innerObj, list);\\r\\n          } else if (value[i] !== undefined && value[i] !== null) {\\r\\n            list.push({ key: name, value: value[i] });\\r\\n          }\\r\\n        }\\r\\n        continue;\\r\\n      }\\r\\n      if (value instanceof Object) {\\r\\n        if (value.toJSON) {\\r\\n          list.push({ key: name, value: value.toJSON() });\\r\\n          continue;\\r\\n        }\\r\\n\\r\\n        for (subName of Object.keys(value)) {\\r\\n          innerObj = {};\\r\\n          innerObj[name + \'.\' + subName] = value[subName];\\r\\n          this.buildParam(innerObj, list);\\r\\n        }\\r\\n        continue;\\r\\n      }\\r\\n      if (value !== undefined && value !== null) {\\r\\n        list.push({ key: name, value });\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const NzxUtils = new UtilsClass();\\r\\n\\r\\n/**\\r\\n * 树节点\\r\\n */\\r\\nexport interface TreeNode {\\r\\n  [key: string]: NzSafeAny;\\r\\n\\r\\n  /**\\r\\n   * 子节点\\r\\n   */\\r\\n  children?: TreeNode[];\\r\\n}\\r\\n\\r\\nexport type TreeChildren<T = NzSafeAny> = (node: T, parentNode: T | undefined, level: number) => T[] | null;\\r\\n","properties":[{"name":"children","deprecated":false,"deprecationMessage":"","type":"TreeNode[]","optional":true,"description":"<p>子节点</p>\\n","line":650,"rawdescription":"\\n\\n子节点\\n"}],"indexSignatures":[{"id":"index-declaration-6c60f40030524c8b656a2c65b50e676c03dccd118983b28771b5ba028132b8fa233d33f5f661c02fa5fc0bfdc456c60a0ed863aa9e53fb38f03c531ce8e3dace","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"NzSafeAny","line":644,"deprecated":false,"deprecationMessage":""}],"kind":165,"description":"<p>树节点</p>\\n","rawdescription":"\\n\\n树节点\\n","methods":[]}],"injectables":[{"name":"AsyncHttpXhrBackend","id":"injectable-AsyncHttpXhrBackend-a636d8fb7eb47614b81128aa2676d365ef5db5782731392464ad0d55baf962453a4419afb52659ead87f338bf67c1d05e14d63ea3ca3a7852a5c72e850d3f06a","file":"lib/http-interceptor/xhr.ts","properties":[],"methods":[{"name":"handle","args":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<HttpEvent<NzSafeAny>>","typeParameters":[],"line":53,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nProcesses a request and returns a stream of response events.\\n","description":"<p>Processes a request and returns a stream of response events.</p>\\n","jsdoctags":[{"name":{"pos":1346,"end":1349,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"req"},"type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"pos":1340,"end":1345,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>The request object.</p>\\n"},{"tagName":{"pos":1377,"end":1384,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An observable of the response events.</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>使用 <code>XMLHttpRequest</code> 发送请求和接收响应,支持同步/异步\\nSee <code>HttpHandler</code>\\nSee <code>JsonpClientBackend</code>\\nSee synced\\nSee SYNCED_ENABLED</p>\\n","rawdescription":"\\n\\n使用 `XMLHttpRequest` 发送请求和接收响应,支持同步/异步\\nSee `HttpHandler`\\nSee `JsonpClientBackend`\\nSee synced\\nSee SYNCED_ENABLED\\n","sourceCode":"import {\\r\\n  HttpBackend,\\r\\n  HttpDownloadProgressEvent,\\r\\n  HttpErrorResponse,\\r\\n  HttpEvent,\\r\\n  HttpEventType,\\r\\n  HttpHeaderResponse,\\r\\n  HttpHeaders,\\r\\n  HttpRequest,\\r\\n  HttpResponse,\\r\\n  HttpStatusCode,\\r\\n  HttpUploadProgressEvent\\r\\n} from \'@angular/common/http\';\\r\\nimport { Injectable } from \'@angular/core\';\\r\\nimport { XhrFactory } from \'@angular/common\';\\r\\nimport { Observable, Observer } from \'rxjs\';\\r\\nimport { SYNCED_ENABLED } from \'@xmagic/nzx-antd/service\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\nconst XSSI_PREFIX = /^\\\\)]}\',?\\\\n/;\\r\\n\\r\\n/**\\r\\n * Determine an appropriate URL for the response, by checking either\\r\\n * XMLHttpRequest.responseURL or the X-Request-URL header.\\r\\n */\\r\\nfunction getResponseUrl(xhr: NzSafeAny): string | null {\\r\\n  if (\'responseURL\' in xhr && xhr.responseURL) {\\r\\n    return xhr.responseURL;\\r\\n  }\\r\\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\\r\\n    return xhr.getResponseHeader(\'X-Request-URL\');\\r\\n  }\\r\\n  return null;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 使用 `XMLHttpRequest` 发送请求和接收响应,支持同步/异步\\r\\n * @see `HttpHandler`\\r\\n * @see `JsonpClientBackend`\\r\\n * @see synced\\r\\n * @see SYNCED_ENABLED\\r\\n * @publicApi\\r\\n */\\r\\n@Injectable()\\r\\nexport class AsyncHttpXhrBackend implements HttpBackend {\\r\\n  constructor(private xhrFactory: XhrFactory) {}\\r\\n\\r\\n  /**\\r\\n   * Processes a request and returns a stream of response events.\\r\\n   * @param req The request object.\\r\\n   * @returns An observable of the response events.\\r\\n   */\\r\\n  handle(req: HttpRequest<NzSafeAny>): Observable<HttpEvent<NzSafeAny>> {\\r\\n    // Quick check to give a better error message when a user attempts to use\\r\\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\\r\\n    if (req.method === \'JSONP\') {\\r\\n      throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\\r\\n    }\\r\\n\\r\\n    // Everything happens on Observable subscription.\\r\\n    return new Observable((observer: Observer<HttpEvent<NzSafeAny>>) => {\\r\\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\\r\\n      const xhr = this.xhrFactory.build();\\r\\n      // 是否同步 添加同步/异步请求支持\\r\\n      let synced = req.context.get(SYNCED_ENABLED);\\r\\n      if (!synced) {\\r\\n        synced = req.urlWithParams.indexOf(\'synced=true\') !== -1;\\r\\n      }\\r\\n      xhr.open(req.method, req.urlWithParams, !synced);\\r\\n      if (req.withCredentials) {\\r\\n        xhr.withCredentials = true;\\r\\n      }\\r\\n\\r\\n      // Add all the requested headers.\\r\\n      req.headers.keys().forEach(name => xhr.setRequestHeader(name, <string>req.headers.getAll(name)?.join?.(\',\')));\\r\\n\\r\\n      // Add an Accept header if one isn\'t present already.\\r\\n      if (!req.headers.has(\'Accept\')) {\\r\\n        xhr.setRequestHeader(\'Accept\', \'application/json, text/plain, */*\');\\r\\n      }\\r\\n\\r\\n      // Auto-detect the Content-Type header if one isn\'t present already.\\r\\n      if (!req.headers.has(\'Content-Type\')) {\\r\\n        const detectedType = req.detectContentTypeHeader();\\r\\n        // Sometimes Content-Type detection fails.\\r\\n        if (detectedType !== null) {\\r\\n          xhr.setRequestHeader(\'Content-Type\', detectedType);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // Set the responseType if one was requested.\\r\\n      if (req.responseType && !synced) {\\r\\n        const responseType = req.responseType.toLowerCase();\\r\\n\\r\\n        // JSON responses need to be processed as text. This is because if the server\\r\\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\\r\\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\\r\\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\\r\\n        // is parsed by first requesting text and then applying JSON.parse.\\r\\n        xhr.responseType = (responseType !== \'json\' ? responseType : \'text\') as NzSafeAny;\\r\\n      }\\r\\n\\r\\n      // Serialize the request body if one is present. If not, this will be set to null.\\r\\n      const reqBody = req.serializeBody();\\r\\n\\r\\n      // If progress events are enabled, response headers will be delivered\\r\\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\\r\\n      // event. However, since response headers don\'t change in between these\\r\\n      // two events, it doesn\'t make sense to parse them twice. So headerResponse\\r\\n      // caches the data extracted from the response whenever it\'s first parsed,\\r\\n      // to ensure parsing isn\'t duplicated.\\r\\n      let headerResponse: HttpHeaderResponse | null = null;\\r\\n\\r\\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\\r\\n      // state, and memoizes it into headerResponse.\\r\\n      const partialFromXhr = (): HttpHeaderResponse => {\\r\\n        if (headerResponse !== null) {\\r\\n          return headerResponse;\\r\\n        }\\r\\n\\r\\n        const statusText = xhr.statusText || \'OK\';\\r\\n\\r\\n        // Parse headers from XMLHttpRequest - this step is lazy.\\r\\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\\r\\n\\r\\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\\r\\n        // request URL.\\r\\n        const url = getResponseUrl(xhr) || req.url;\\r\\n\\r\\n        // Construct the HttpHeaderResponse and memoize it.\\r\\n        headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\\r\\n        return headerResponse;\\r\\n      };\\r\\n\\r\\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\\r\\n      // emit. This allows them to be unregistered as event listeners later.\\r\\n\\r\\n      // First up is the load event, which represents a response being fully available.\\r\\n      const onLoad = () => {\\r\\n        // Read response state from the memoized partial data.\\r\\n        const partXhr = partialFromXhr();\\r\\n        const { headers, statusText, url } = partXhr;\\r\\n        let status = partXhr.status;\\r\\n\\r\\n        // The body will be read out if present.\\r\\n        let body: NzSafeAny | null = null;\\r\\n\\r\\n        if (status !== HttpStatusCode.NoContent) {\\r\\n          // Use XMLHttpRequest.response if set, responseText otherwise.\\r\\n          body = typeof xhr.response === \'undefined\' ? xhr.responseText : xhr.response;\\r\\n        }\\r\\n\\r\\n        // Normalize another potential bug (this one comes from CORS).\\r\\n        if (status === 0) {\\r\\n          status = !!body ? HttpStatusCode.Ok : 0;\\r\\n        }\\r\\n\\r\\n        // ok determines whether the response will be transmitted on the event or\\r\\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\\r\\n        // but a successful status code can still result in an error if the user\\r\\n        // asked for JSON data and the body cannot be parsed as such.\\r\\n        let ok = status >= 200 && status < 300;\\r\\n\\r\\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\\r\\n        // will have done that already).\\r\\n        if (req.responseType === \'json\' && typeof body === \'string\') {\\r\\n          // Save the original body, before attempting XSSI prefix stripping.\\r\\n          const originalBody = body;\\r\\n          body = body.replace(XSSI_PREFIX, \'\');\\r\\n          try {\\r\\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\\r\\n            body = body !== \'\' ? JSON.parse(body) : null;\\r\\n          } catch (error) {\\r\\n            // Since the JSON.parse failed, it\'s reasonable to assume this might not have been a\\r\\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\\r\\n            // a better error response.\\r\\n            body = originalBody;\\r\\n\\r\\n            // If this was an error request to begin with, leave it as a string, it probably\\r\\n            // just isn\'t JSON. Otherwise, deliver the parsing error to the user.\\r\\n            if (ok) {\\r\\n              // Even though the response status was 2xx, this is still an error.\\r\\n              ok = false;\\r\\n              // The parse error contains the text of the body that failed to parse.\\r\\n              body = { error, text: body };\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (ok) {\\r\\n          // A successful response is delivered on the event stream.\\r\\n          observer.next(\\r\\n            new HttpResponse({\\r\\n              body,\\r\\n              headers,\\r\\n              status,\\r\\n              statusText,\\r\\n              url: url || undefined\\r\\n            })\\r\\n          );\\r\\n          // The full body has been received and delivered, no further events\\r\\n          // are possible. This request is complete.\\r\\n          observer.complete();\\r\\n        } else {\\r\\n          // An unsuccessful request is delivered on the error channel.\\r\\n          observer.error(\\r\\n            new HttpErrorResponse({\\r\\n              // The error in this case is the response body (error from the server).\\r\\n              error: body,\\r\\n              headers,\\r\\n              status,\\r\\n              statusText,\\r\\n              url: url || undefined\\r\\n            })\\r\\n          );\\r\\n        }\\r\\n      };\\r\\n\\r\\n      // The onError callback is called when something goes wrong at the network level.\\r\\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\\r\\n      // transmitted on the error channel.\\r\\n      const onError = (error: ProgressEvent) => {\\r\\n        const { url } = partialFromXhr();\\r\\n        const res = new HttpErrorResponse({\\r\\n          error,\\r\\n          status: xhr.status || 0,\\r\\n          statusText: xhr.statusText || \'Unknown Error\',\\r\\n          url: url || undefined\\r\\n        });\\r\\n        observer.error(res);\\r\\n      };\\r\\n\\r\\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\\r\\n      // has been sent on the stream. This is necessary to track if progress\\r\\n      // is enabled since the event will be sent on only the first download\\r\\n      // progerss event.\\r\\n      let sentHeaders = false;\\r\\n\\r\\n      // The download progress event handler, which is only registered if\\r\\n      // progress events are enabled.\\r\\n      const onDownProgress = (event: ProgressEvent) => {\\r\\n        // Send the HttpResponseHeaders event if it hasn\'t been sent already.\\r\\n        if (!sentHeaders) {\\r\\n          observer.next(partialFromXhr());\\r\\n          sentHeaders = true;\\r\\n        }\\r\\n\\r\\n        // Start building the download progress event to deliver on the response\\r\\n        // event stream.\\r\\n        const progressEvent: HttpDownloadProgressEvent = {\\r\\n          type: HttpEventType.DownloadProgress,\\r\\n          loaded: event.loaded\\r\\n        };\\r\\n\\r\\n        // Set the total number of bytes in the event if it\'s available.\\r\\n        if (event.lengthComputable) {\\r\\n          progressEvent.total = event.total;\\r\\n        }\\r\\n\\r\\n        // If the request was for text content and a partial response is\\r\\n        // available on XMLHttpRequest, include it in the progress event\\r\\n        // to allow for streaming reads.\\r\\n        if (req.responseType === \'text\' && !!xhr.responseText) {\\r\\n          progressEvent.partialText = xhr.responseText;\\r\\n        }\\r\\n\\r\\n        // Finally, fire the event.\\r\\n        observer.next(progressEvent);\\r\\n      };\\r\\n\\r\\n      // The upload progress event handler, which is only registered if\\r\\n      // progress events are enabled.\\r\\n      const onUpProgress = (event: ProgressEvent) => {\\r\\n        // Upload progress events are simpler. Begin building the progress\\r\\n        // event.\\r\\n        const progress: HttpUploadProgressEvent = {\\r\\n          type: HttpEventType.UploadProgress,\\r\\n          loaded: event.loaded\\r\\n        };\\r\\n\\r\\n        // If the total number of bytes being uploaded is available, include\\r\\n        // it.\\r\\n        if (event.lengthComputable) {\\r\\n          progress.total = event.total;\\r\\n        }\\r\\n\\r\\n        // Send the event.\\r\\n        observer.next(progress);\\r\\n      };\\r\\n\\r\\n      // By default, register for load and error events.\\r\\n      xhr.addEventListener(\'load\', onLoad);\\r\\n      xhr.addEventListener(\'error\', onError);\\r\\n      xhr.addEventListener(\'timeout\', onError);\\r\\n      xhr.addEventListener(\'abort\', onError);\\r\\n\\r\\n      // Progress events are only enabled if requested.\\r\\n      if (req.reportProgress) {\\r\\n        // Download progress is always enabled if requested.\\r\\n        xhr.addEventListener(\'progress\', onDownProgress);\\r\\n\\r\\n        // Upload progress depends on whether there is a body to upload.\\r\\n        if (reqBody !== null && xhr.upload) {\\r\\n          xhr.upload.addEventListener(\'progress\', onUpProgress);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // Fire the request, and notify the event stream that it was fired.\\r\\n      xhr.send(reqBody!);\\r\\n      observer.next({ type: HttpEventType.Sent });\\r\\n\\r\\n      // This is the return from the Observable function, which is the\\r\\n      // request cancellation handler.\\r\\n      return () => {\\r\\n        // On a cancellation, remove all registered event listeners.\\r\\n        xhr.removeEventListener(\'error\', onError);\\r\\n        xhr.removeEventListener(\'abort\', onError);\\r\\n        xhr.removeEventListener(\'load\', onLoad);\\r\\n        xhr.removeEventListener(\'timeout\', onError);\\r\\n        if (req.reportProgress) {\\r\\n          xhr.removeEventListener(\'progress\', onDownProgress);\\r\\n          if (reqBody !== null && xhr.upload) {\\r\\n            xhr.upload.removeEventListener(\'progress\', onUpProgress);\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Finally, abort the in-flight request.\\r\\n        if (xhr.readyState !== xhr.DONE) {\\r\\n          xhr.abort();\\r\\n        }\\r\\n      };\\r\\n    });\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"xhrFactory","type":"XhrFactory","deprecated":false,"deprecationMessage":""}],"line":45,"jsdoctags":[{"name":"xhrFactory","type":"XhrFactory","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"injectable"},{"name":"DicService","id":"injectable-DicService-60ee3d4ef941dc0899fecfc74bb5a935919be061dc3805c535733a37336341c2a3f760764ebece391c7dfaa57ccd71e6b344a158a5feabddeff3eb6c0d52994d","file":"lib/service/dic.service.ts","properties":[{"name":"dicMap","defaultValue":"new Map<string, Observable<DicItem[]>>()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>字典请求缓存, 请求完成会自动删除</p>\\n","line":19,"rawdescription":"\\n\\n字典请求缓存, 请求完成会自动删除\\n","modifierKind":[121],"jsdoctags":[{"pos":620,"end":633,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":332,"tagName":{"pos":621,"end":628,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"dicMapData","defaultValue":"new Map<string, DicItem[]>()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>字典map缓存数据, 可以通过removeDic删除缓存</p>\\n","line":24,"rawdescription":"\\n\\n字典map缓存数据, 可以通过removeDic删除缓存\\n","modifierKind":[121],"jsdoctags":[{"pos":746,"end":759,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":332,"tagName":{"pos":747,"end":754,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"dicSettings","deprecated":false,"deprecationMessage":"","type":"DicSetting","optional":false,"description":"<p>字典配置</p>\\n","line":29,"rawdescription":"\\n\\n字典配置\\n","modifierKind":[121],"jsdoctags":[{"pos":840,"end":853,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":332,"tagName":{"pos":841,"end":848,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]}],"methods":[{"name":"clearDic","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":99,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n清空所有字典缓存\\n","description":"<p>清空所有字典缓存</p>\\n"},{"name":"fetchDic","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"synced","type":"boolean","deprecated":false,"deprecationMessage":""},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"any","typeParameters":[],"line":110,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求字典数据\\n","description":"<p>请求字典数据</p>\\n","jsdoctags":[{"name":{"pos":2846,"end":2849,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":2840,"end":2845,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典key</p>\\n"},{"name":{"pos":2869,"end":2875,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"synced"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":2863,"end":2868,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否同步</p>\\n"},{"name":{"pos":2894,"end":2902,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isNumber"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":2888,"end":2893,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否数字</p>\\n"}]},{"name":"getDic","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Observable<DicItem[]>","typeParameters":[],"line":39,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取字典, 异步请求\\n","description":"<p>获取字典, 异步请求</p>\\n","jsdoctags":[{"name":{"pos":1120,"end":1123,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1114,"end":1119,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典key</p>\\n"},{"name":{"pos":1143,"end":1151,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isNumber"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1137,"end":1142,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否是数字</p>\\n"}]},{"name":"getDicMap","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Observable<Record<string, string>>","typeParameters":[],"line":60,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取map形式的字典数据, 异步请求, 请求会被缓存 可以多次调用\\n","description":"<p>获取map形式的字典数据, 异步请求, 请求会被缓存 可以多次调用</p>\\n","jsdoctags":[{"name":{"pos":1707,"end":1710,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1701,"end":1706,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典key</p>\\n"},{"name":{"pos":1730,"end":1738,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isNumber"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1724,"end":1729,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否是数字</p>\\n"}]},{"name":"getDicMapSync","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Record<string, string>","typeParameters":[],"line":83,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取map形式的字典数据, 同步请求, 请求会被缓存 可以多次调用\\n","description":"<p>获取map形式的字典数据, 同步请求, 请求会被缓存 可以多次调用</p>\\n","jsdoctags":[{"name":{"pos":2348,"end":2351,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":2342,"end":2347,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典key</p>\\n"},{"name":{"pos":2371,"end":2379,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isNumber"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":2365,"end":2370,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否是数字</p>\\n"}]},{"name":"getDicSync","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"isNumber","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"DicItem[]","typeParameters":[],"line":69,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取字典, 同步请求  请求会被缓存\\n","description":"<p>获取字典, 同步请求  请求会被缓存</p>\\n","jsdoctags":[{"name":{"pos":1954,"end":1957,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1948,"end":1953,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典key</p>\\n"},{"name":{"pos":1977,"end":1985,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"isNumber"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1971,"end":1976,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否是数字</p>\\n"}]},{"name":"listToMap","args":[{"name":"list","type":"DicItem[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Record<string, string>","typeParameters":[],"line":135,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n字典列表转Map结构\\n","description":"<p>字典列表转Map结构</p>\\n","jsdoctags":[{"name":{"pos":3732,"end":3736,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"list"},"type":"DicItem[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":3726,"end":3731,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典列表</p>\\n"}]},{"name":"removeDic","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":91,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n删除指定字典key的缓存数据\\n","description":"<p>删除指定字典key的缓存数据</p>\\n","jsdoctags":[{"name":{"pos":2577,"end":2580,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":2571,"end":2576,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字典key</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { OptionItem } from \'@xmagic/nzx-antd/checkbox\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { map, Observable, of, shareReplay, tap } from \'rxjs\';\\r\\nimport { HttpClient, HttpContext } from \'@angular/common/http\';\\r\\nimport { DicSetting, NzxAntdService } from \'@xmagic/nzx-antd\';\\r\\nimport { LOADING_ENABLED, SYNCED_ENABLED } from \'./fetcher.service\';\\r\\nimport { finalize } from \'rxjs/operators\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class DicService {\\r\\n  /**\\r\\n   * 字典请求缓存, 请求完成会自动删除\\r\\n   * @private\\r\\n   */\\r\\n  private dicMap = new Map<string, Observable<DicItem[]>>();\\r\\n  /**\\r\\n   * 字典map缓存数据, 可以通过removeDic删除缓存\\r\\n   * @private\\r\\n   */\\r\\n  private dicMapData = new Map<string, DicItem[]>();\\r\\n  /**\\r\\n   * 字典配置\\r\\n   * @private\\r\\n   */\\r\\n  private dicSettings: DicSetting;\\r\\n  constructor(protected http: HttpClient, protected antdService: NzxAntdService) {\\r\\n    this.dicSettings = Object.assign({ labelName: \'label\', valueName: \'value\' }, antdService.dic);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取字典, 异步请求\\r\\n   * @param key 字典key\\r\\n   * @param isNumber 是否是数字\\r\\n   */\\r\\n  getDic(key: string, isNumber?: boolean): Observable<DicItem[]> {\\r\\n    if (this.dicMapData.has(key)) {\\r\\n      return of(this.dicMapData.get(key)!);\\r\\n    }\\r\\n    if (this.dicMap.has(key)) {\\r\\n      return this.dicMap.get(key)!;\\r\\n    }\\r\\n    const dic$ = this.fetchDic(key, false, isNumber).pipe(\\r\\n      shareReplay(1),\\r\\n      tap(data => this.dicMapData.set(key, data)),\\r\\n      finalize(() => this.dicMap.delete(key))\\r\\n    );\\r\\n    this.dicMap.set(key, dic$);\\r\\n    return dic$;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取map形式的字典数据, 异步请求, 请求会被缓存 可以多次调用\\r\\n   * @param key 字典key\\r\\n   * @param isNumber 是否是数字\\r\\n   */\\r\\n  getDicMap(key: string, isNumber?: boolean): Observable<Record<string, string>> {\\r\\n    return this.getDic(key, isNumber).pipe(map(this.listToMap));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取字典, 同步请求  请求会被缓存\\r\\n   * @param key 字典key\\r\\n   * @param isNumber 是否是数字\\r\\n   */\\r\\n  getDicSync(key: string, isNumber?: boolean): DicItem[] {\\r\\n    if (this.dicMapData.has(key)) {\\r\\n      return this.dicMapData.get(key) || [];\\r\\n    }\\r\\n    const data = NzxUtils.getAjaxValue(this.fetchDic(key, true, isNumber));\\r\\n    this.dicMapData.set(key, data);\\r\\n    return data;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取map形式的字典数据, 同步请求, 请求会被缓存 可以多次调用\\r\\n   * @param key 字典key\\r\\n   * @param isNumber 是否是数字\\r\\n   */\\r\\n  getDicMapSync(key: string, isNumber?: boolean): Record<string, string> {\\r\\n    return this.listToMap(this.getDicSync(key, isNumber));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 删除指定字典key的缓存数据\\r\\n   * @param key 字典key\\r\\n   */\\r\\n  removeDic(key: string): void {\\r\\n    this.dicMap.delete(key);\\r\\n    this.dicMapData.delete(key);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 清空所有字典缓存\\r\\n   */\\r\\n  clearDic(): void {\\r\\n    this.dicMap.clear();\\r\\n    this.dicMapData.clear();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 请求字典数据\\r\\n   * @param key 字典key\\r\\n   * @param synced 是否同步\\r\\n   * @param isNumber 是否数字\\r\\n   */\\r\\n  fetchDic(key: string, synced: boolean, isNumber?: boolean) {\\r\\n    if (!this.dicSettings.url) {\\r\\n      throw new Error(\'未配置字典接口地址,请在NzxAntdService中配置\\"dic\\"属性的\\"url\\"值\');\\r\\n    }\\r\\n    const url = typeof this.dicSettings.url === \'string\' ? `${this.dicSettings.url}/${key}` : this.dicSettings.url(key);\\r\\n    return this.http\\r\\n      .get<Record<string, NzSafeAny>[]>(url, {\\r\\n        context: new HttpContext().set(SYNCED_ENABLED, synced).set(LOADING_ENABLED, false)\\r\\n      })\\r\\n      .pipe(\\r\\n        map(list =>\\r\\n          (list || []).map(v => {\\r\\n            const value = v[this.dicSettings.valueName!];\\r\\n            v.label = v[this.dicSettings.labelName!];\\r\\n            v.value = isNumber ? +value : value;\\r\\n            return v as DicItem;\\r\\n          })\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 字典列表转Map结构\\r\\n   * @param list 字典列表\\r\\n   */\\r\\n  listToMap(list: DicItem[]): Record<string, string> {\\r\\n    const data: Record<string, string> = {};\\r\\n    for (const v of list) {\\r\\n      data[v.value] = v.label;\\r\\n    }\\r\\n    return data;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字典项定义, {label: string; value: any}\\r\\n */\\r\\nexport type DicItem = Pick<OptionItem, \'label\' | \'value\'> & { [prop: string]: NzSafeAny };\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"http","type":"HttpClient","deprecated":false,"deprecationMessage":""},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":29,"jsdoctags":[{"name":"http","type":"HttpClient","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"injectable"},{"name":"FetcherService","id":"injectable-FetcherService-c6e56f603948b079bf78b0dc545e48205bd49b8577ebddbc05edba799b245ba57297477f978fc979466e2a0685f7aa38fe2982e61374b4dce5d75694a45e30fb","file":"lib/service/fetcher.service.ts","properties":[],"methods":[{"name":"doFetch","args":[{"name":"options","type":"FetchOptions","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<T>","typeParameters":["T"],"line":89,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n送请求\\n","description":"<p>送请求</p>\\n","modifierKind":[123],"jsdoctags":[{"name":{"pos":2557,"end":2564,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"options"},"type":"FetchOptions","deprecated":false,"deprecationMessage":"","tagName":{"pos":2551,"end":2556,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>参数不包含函数不进行二次处理</p>\\n"}]},{"name":"doFetchSync","args":[{"name":"options","type":"Omit<FetchOptions | async>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"T","typeParameters":["T"],"line":121,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n同步请求, 参数不包含函数不进行二次处理\\n","description":"<p>同步请求, 参数不包含函数不进行二次处理</p>\\n","jsdoctags":[{"name":{"pos":3449,"end":3456,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"options"},"type":"Omit<FetchOptions | async>","deprecated":false,"deprecationMessage":"","tagName":{"pos":3443,"end":3448,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"fetch","args":[{"name":"option","type":"FetchOptions","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<T>","typeParameters":["T"],"line":68,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n发起请求, 参数可以是异步对象或函数\\n","description":"<p>发起请求, 参数可以是异步对象或函数</p>\\n","jsdoctags":[{"name":{"pos":2000,"end":2006,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"option"},"type":"FetchOptions","deprecated":false,"deprecationMessage":"","tagName":{"pos":1994,"end":1999,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>请求配置</p>\\n"}]},{"name":"fetchSync","args":[{"name":"option","type":"Omit<FetchOptions | async>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"T","typeParameters":["T"],"line":81,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n同步请求, 参数可以是异步对象或函数\\n","description":"<p>同步请求, 参数可以是异步对象或函数</p>\\n","jsdoctags":[{"name":{"pos":2364,"end":2370,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"option"},"type":"Omit<FetchOptions | async>","deprecated":false,"deprecationMessage":"","tagName":{"pos":2358,"end":2363,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>请求配置</p>\\n"}]},{"name":"remoteValidate","args":[{"name":"options","type":"ValidatorOption<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":["T"],"line":129,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n使用同步方式进行远程校验\\n","description":"<p>使用同步方式进行远程校验</p>\\n","jsdoctags":[{"name":{"pos":3653,"end":3660,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"options"},"type":"ValidatorOption<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":3647,"end":3652,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"resolveParams","args":[{"name":"data","type":"FetchParams<T>","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Observable<T | undefined>","typeParameters":["T"],"line":49,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n处理异步参数\\n","description":"<p>处理异步参数</p>\\n","modifierKind":[124],"jsdoctags":[{"name":{"pos":1577,"end":1581,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"data"},"type":"FetchParams<T>","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1571,"end":1576,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>参数</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpClient, HttpContext, HttpContextToken } from \'@angular/common/http\';\\r\\nimport { Observable, of } from \'rxjs\';\\r\\nimport { switchMap } from \'rxjs/operators\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { AbstractControl, ValidationErrors, ValidatorFn } from \'@angular/forms\';\\r\\n\\r\\n/**\\r\\n * 模板字符串函数, 构造同步请求URL\\r\\n * @example\\r\\n * let value!: string;\\r\\n * this.http.get<string>(\'url\', { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res => (value = res));\\r\\n * console.log(value);\\r\\n */\\r\\nexport function synced(url: TemplateStringsArray, ...keys: string[]): string {\\r\\n  const strings = [];\\r\\n  for (let i = 0; i < url.length; i++) {\\r\\n    strings.push(url.raw[i], keys[i] == null ? \'\' : keys[i]);\\r\\n  }\\r\\n  const result = strings.join(\'\');\\r\\n  return result + (result.indexOf(\'?\') === -1 ? \'?\' : \'&\') + \'synced=true\';\\r\\n}\\r\\n\\r\\n/**\\r\\n * 启用同步请求\\r\\n * @example\\r\\n * let value!: string;\\r\\n * this.http.get<string>(\'url\', { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res => (value = res));\\r\\n * console.log(value);\\r\\n */\\r\\nexport const SYNCED_ENABLED = new HttpContextToken<boolean>(() => false);\\r\\n\\r\\n/**\\r\\n * 是否启用loading\\r\\n * @example\\r\\n * this.http.get<string>(\'url\', { context: new HttpContext().set(LOADING_ENABLED, false).set(...)});\\r\\n */\\r\\nexport const LOADING_ENABLED = new HttpContextToken<boolean>(() => true);\\r\\n\\r\\n@Injectable()\\r\\nexport class FetcherService {\\r\\n  constructor(protected http: HttpClient) {}\\r\\n\\r\\n  /**\\r\\n   * 处理异步参数\\r\\n   * @param data 参数\\r\\n   */\\r\\n  static resolveParams<T>(data?: FetchParams<T>): Observable<T | undefined> {\\r\\n    if (NzxUtils.isFunction(data)) {\\r\\n      const result = data();\\r\\n      if (result instanceof Observable) {\\r\\n        return result;\\r\\n      }\\r\\n      return of(result as T);\\r\\n    }\\r\\n\\r\\n    if (data instanceof Observable) {\\r\\n      return data;\\r\\n    }\\r\\n    return of(data as T);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 发起请求, 参数可以是异步对象或函数\\r\\n   * @param option 请求配置\\r\\n   */\\r\\n  fetch<T>(option: FetchOptions): Observable<T> {\\r\\n    return FetcherService.resolveParams(option.data).pipe(\\r\\n      switchMap(value => {\\r\\n        const data = option.beforeSend ? option.beforeSend(value || {}) : value;\\r\\n        return this.doFetch<T>({ ...option, data });\\r\\n      })\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 同步请求, 参数可以是异步对象或函数\\r\\n   * @param option 请求配置\\r\\n   */\\r\\n  fetchSync<T>(option: Omit<FetchOptions, \'async\'>): T {\\r\\n    return NzxUtils.getAjaxValue<T>(this.fetch({ ...option, async: false }));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 送请求\\r\\n   * @param options 参数不包含函数不进行二次处理\\r\\n   */\\r\\n  public doFetch<T>(options: FetchOptions): Observable<T> {\\r\\n    const option: Record<string, NzSafeAny> = {};\\r\\n    if (options.responseType) {\\r\\n      option.responseType = options.responseType;\\r\\n    }\\r\\n    if (options.observe) {\\r\\n      option.observe = options.observe;\\r\\n    }\\r\\n\\r\\n    option.context ||= new HttpContext();\\r\\n    if (options.async === false) {\\r\\n      option.context.set(SYNCED_ENABLED, true);\\r\\n    }\\r\\n\\r\\n    if (options.loading === false) {\\r\\n      option.context.set(LOADING_ENABLED, false);\\r\\n    }\\r\\n\\r\\n    const data = NzxUtils.isFunction(options.data) ? options.data() : options.data;\\r\\n    if (/^post|put$/i.test(options.method!)) {\\r\\n      option.body = data;\\r\\n    } else {\\r\\n      option.params = data;\\r\\n    }\\r\\n\\r\\n    return this.http.request<T>(options.method || \'get\', options.url, option);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 同步请求, 参数不包含函数不进行二次处理\\r\\n   * @param options\\r\\n   */\\r\\n  doFetchSync<T>(options: Omit<FetchOptions, \'async\'>): T {\\r\\n    return NzxUtils.getAjaxValue<T>(this.doFetch({ ...options, async: false }));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 使用同步方式进行远程校验\\r\\n   * @param options\\r\\n   */\\r\\n  remoteValidate<T = NzSafeAny>(options: ValidatorOption<T>): ValidatorFn {\\r\\n    return (control: AbstractControl): ValidationErrors | null => {\\r\\n      if (control.value == null || !control.value.length) {\\r\\n        return null;\\r\\n      }\\r\\n      if (options.beforeSend) {\\r\\n        const beforeSend = options.beforeSend;\\r\\n        options.beforeSend = data => {\\r\\n          return beforeSend(data, control);\\r\\n        };\\r\\n      }\\r\\n\\r\\n      if (options.data && NzxUtils.isFunction(options.data)) {\\r\\n        const dataFn = options.data;\\r\\n        options.data = () => {\\r\\n          return dataFn(control);\\r\\n        };\\r\\n      }\\r\\n\\r\\n      // @ts-ignore\\r\\n      const data = this.doFetchSync<T>(options);\\r\\n      if (options.afterFetch) {\\r\\n        return options.afterFetch(data);\\r\\n      }\\r\\n\\r\\n      if (data == null) {\\r\\n        return null;\\r\\n      }\\r\\n\\r\\n      if (NzxUtils.isBoolean(data)) {\\r\\n        return data ? null : { remote: { message: options.message || \'格式不正确\' } };\\r\\n      }\\r\\n      return data;\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求参数\\r\\n */\\r\\nexport type FetchParams<T = NzSafeAny> = (() => Promise<T> | T) | Promise<T> | T;\\r\\n\\r\\n/**\\r\\n * 请求配置\\r\\n */\\r\\nexport interface FetchOptions {\\r\\n  url: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   * 请求参数\\r\\n   */\\r\\n  data?: FetchParams;\\r\\n  /**\\r\\n   * 发送之前的回调函数,仅URL 时有效\\r\\n   * @param params\\r\\n   */\\r\\n  beforeSend?: (params: NzSafeAny) => NzSafeAny;\\r\\n  /**\\r\\n   * 响应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  /**\\r\\n   * 订阅响应数据类型\\r\\n   */\\r\\n  observe?: \'body\' | \'events\' | \'response\';\\r\\n  /**\\r\\n   * http上下文\\r\\n   */\\r\\n  context?: HttpContext;\\r\\n  /**\\r\\n   * 是否异步, 默认true\\r\\n   */\\r\\n  async?: boolean;\\r\\n  /**\\r\\n   * 是否显示loading\\r\\n   */\\r\\n  loading?: boolean;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 验证器请求参数\\r\\n */\\r\\nexport type FetchValidatorParams<T = NzSafeAny> = ((control: AbstractControl) => Promise<T> | T) | Promise<T> | T;\\r\\n/**\\r\\n * 远程验证器配置\\r\\n */\\r\\nexport type ValidatorOption<T = NzSafeAny> = Omit<FetchOptions, \'beforeSend\' | \'async\' | \'data\'> & {\\r\\n  /**\\r\\n   * 错误信息描述\\r\\n   */\\r\\n  message: string;\\r\\n  /**\\r\\n   * 请求参数\\r\\n   */\\r\\n  data?: FetchValidatorParams;\\r\\n  /**\\r\\n   * 响应数据后的回调\\r\\n   * @param data\\r\\n   */\\r\\n  afterFetch?(data: T): ValidationErrors | null;\\r\\n  /**\\r\\n   * 请求之前的回调\\r\\n   * @param params\\r\\n   * @param control\\r\\n   */\\r\\n  beforeSend?(params: NzSafeAny, control: AbstractControl): NzSafeAny;\\r\\n};\\r\\n\\r\\n\\r\\nexport type Method =\\r\\n  | \'get\'\\r\\n  | \'GET\'\\r\\n  | \'delete\'\\r\\n  | \'DELETE\'\\r\\n  | \'head\'\\r\\n  | \'HEAD\'\\r\\n  | \'options\'\\r\\n  | \'OPTIONS\'\\r\\n  | \'post\'\\r\\n  | \'POST\'\\r\\n  | \'put\'\\r\\n  | \'PUT\'\\r\\n  | \'patch\'\\r\\n  | \'PATCH\'\\r\\n  | \'purge\'\\r\\n  | \'PURGE\'\\r\\n  | \'link\'\\r\\n  | \'LINK\'\\r\\n  | \'unlink\'\\r\\n  | \'UNLINK\';\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"http","type":"HttpClient","deprecated":false,"deprecationMessage":""}],"line":42,"jsdoctags":[{"name":"http","type":"HttpClient","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"injectable"},{"name":"HttpLoadingService","id":"injectable-HttpLoadingService-bdf40c12bd00e6761a820c7248964b9cf1420563ec484ba02d130c22bdcce5ff6e10caaa9583e62de8806aba2b0623b2d097cc8d6b98373285d6fd3c053f48b2","file":"lib/http-interceptor/http-loading.service.ts","properties":[{"name":"httpLoadingStatus","defaultValue":"new Subject<boolean>()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":7,"modifierKind":[121]}],"methods":[{"name":"init","args":[{"name":"statusChangeObservable","type":"Observable<boolean>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":15,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHttpLoadingService needs a subject to tell the next loading status.\\n","description":"<p>HttpLoadingService needs a subject to tell the next loading status.</p>\\n","jsdoctags":[{"name":{"pos":404,"end":426,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"statusChangeObservable"},"type":"Observable<boolean>","deprecated":false,"deprecationMessage":"","tagName":{"pos":398,"end":403,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>The subject who tells the loading status.</p>\\n"}]},{"name":"subscribe","args":[{"name":"next","type":"function","deprecated":false,"deprecationMessage":"","optional":true,"function":[{"name":"value","type":"boolean","deprecated":false,"deprecationMessage":""}]},{"name":"error","type":"function","deprecated":false,"deprecationMessage":"","optional":true,"function":[{"name":"error","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}]},{"name":"complete","type":"function","deprecated":false,"deprecationMessage":"","optional":true,"function":[]}],"optional":false,"returnType":"Subscription","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nYou have to subscribe the httpLoadingStatus$ in application to set custom loading behaviors through the method.\\n\\n```html\\n`app.component.ts`\\n```ts\\nconstructor(private loading: HttpLoadingService){}\\nngOnInit() {\\n  this.loading.subscribe(status => {\\n    if(status){\\n      this.modal.show(\'loading...\');\\n    }else{\\n      this.modal.hide();\\n    }\\n  })\\n}\\n```\\n```","description":"<p>You have to subscribe the httpLoadingStatus$ in application to set custom loading behaviors through the method.</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">`app.component.ts`\\n```ts\\nconstructor(private loading: HttpLoadingService){}\\nngOnInit() {\\n  this.loading.subscribe(status =&gt; {\\n    if(status){\\n      this.modal.show(&#39;loading...&#39;);\\n    }else{\\n      this.modal.hide();\\n    }\\n  })\\n}</code></pre></div><p>```</p>\\n","jsdoctags":[{"name":"next","type":"function","deprecated":false,"deprecationMessage":"","optional":true,"function":[{"name":"value","type":"boolean","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}},{"name":"error","type":"function","deprecated":false,"deprecationMessage":"","optional":true,"function":[{"name":"error","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}},{"name":"complete","type":"function","deprecated":false,"deprecationMessage":"","optional":true,"function":[],"tagName":{"text":"param"}},{"tagName":{"pos":813,"end":820,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p><code>app.component.ts</code></p>\\n<pre><code class=\\"language-ts\\">constructor(private loading: HttpLoadingService){}\\nngOnInit() {\\n  this.loading.subscribe(status =&gt; {\\n    if(status){\\n      this.modal.show(&#39;loading...&#39;);\\n    }else{\\n      this.modal.hide();\\n    }\\n  })\\n}\\n</code></pre>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { Observable, Subject, Subscription } from \'rxjs\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\n@Injectable({ providedIn: \'root\' })\\r\\nexport class HttpLoadingService {\\r\\n  private httpLoadingStatus = new Subject<boolean>();\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  /**\\r\\n   * HttpLoadingService needs a subject to tell the next loading status.\\r\\n   * @param statusChangeObservable The subject who tells the loading status.\\r\\n   */\\r\\n  init(statusChangeObservable: Observable<boolean>) {\\r\\n    statusChangeObservable.subscribe(this.httpLoadingStatus);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * You have to subscribe the httpLoadingStatus$ in application to set custom loading behaviors through the method.\\r\\n   * @param observer customer callbacks when http loading status change.\\r\\n   *\\r\\n   * @example\\r\\n   * `app.component.ts`\\r\\n   * ```ts\\r\\n   * constructor(private loading: HttpLoadingService){}\\r\\n   * ngOnInit() {\\r\\n   *   this.loading.subscribe(status => {\\r\\n   *     if(status){\\r\\n   *       this.modal.show(\'loading...\');\\r\\n   *     }else{\\r\\n   *       this.modal.hide();\\r\\n   *     }\\r\\n   *   })\\r\\n   * }\\r\\n   * ```\\r\\n   */\\r\\n  subscribe(next?: (value: boolean) => void, error?: (error: NzSafeAny) => void, complete?: () => void): Subscription {\\r\\n    return this.httpLoadingStatus.subscribe(next, error, complete);\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":7},"type":"injectable"},{"name":"HttpNotifyService","id":"injectable-HttpNotifyService-2377b060bedc74338c365dfa04900fa4e1e0a441e2a5253506ff575e0713d3f2d31292ed5c4f3806a3821876c8ae10b74f3e761618e9ce64ce1ca853e935ca6f","file":"lib/http-interceptor/http-notify.service.ts","properties":[{"name":"errorSubject","defaultValue":"new Subject<string>()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":13,"modifierKind":[121,144]},{"name":"isOpen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":12,"modifierKind":[121]},{"name":"statusMessageMap","defaultValue":"{}","deprecated":false,"deprecationMessage":"","type":"Record<string | string>","optional":false,"description":"","line":14,"modifierKind":[121,144]}],"methods":[{"name":"notifyCustomServerError","args":[{"name":"error","type":"HttpError<ResponseModel>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":25,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n通用的业务异常\\n","description":"<p>通用的业务异常</p>\\n","jsdoctags":[{"name":{"pos":878,"end":883,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"error"},"type":"HttpError<ResponseModel>","deprecated":false,"deprecationMessage":"","tagName":{"pos":872,"end":877,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"notifyHttpOriginError","args":[{"name":"error","type":"HttpError","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":33,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nhttp原始异常\\n","description":"<p>http原始异常</p>\\n","jsdoctags":[{"name":{"pos":1031,"end":1036,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"error"},"type":"HttpError","deprecated":false,"deprecationMessage":"","tagName":{"pos":1025,"end":1030,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"showErrorModal","args":[{"name":"nzContent","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":37,"deprecated":false,"deprecationMessage":"","modifierKind":[122],"jsdoctags":[{"name":"nzContent","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>对于异常的处理</p>\\n","rawdescription":"\\n\\n对于异常的处理\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { NzxModalWrapService } from \'@xmagic/nzx-antd/modal\';\\nimport { HttpError, ResponseModel } from \'./http.model\';\\nimport { DEFAULT_STATUS_MESSAGE_MAP, NzxAntdService } from \'@xmagic/nzx-antd\';\\nimport { Subject, filter } from \'rxjs\';\\n\\n/**\\n * 对于异常的处理\\n */\\n@Injectable({ providedIn: \'root\' })\\nexport class HttpNotifyService {\\n  private isOpen = false;\\n  private readonly errorSubject = new Subject<string>();\\n  private readonly statusMessageMap: Record<string, string> = {};\\n\\n  constructor(protected modal: NzxModalWrapService, protected antdService: NzxAntdService) {\\n    this.statusMessageMap = Object.assign({}, DEFAULT_STATUS_MESSAGE_MAP, antdService.response?.statusMessageMap || {});\\n    this.errorSubject.pipe(filter(() => !this.isOpen)).subscribe(message => this.showErrorModal(message));\\n  }\\n\\n  /**\\n   * 通用的业务异常\\n   * @param error\\n   */\\n  notifyCustomServerError(error: HttpError<ResponseModel>) {\\n    this.errorSubject.next(error.message);\\n  }\\n\\n  /**\\n   * http原始异常\\n   * @param error\\n   */\\n  notifyHttpOriginError(error: HttpError): void {\\n    this.errorSubject.next(this.statusMessageMap[error.code] || this.statusMessageMap.other);\\n  }\\n\\n  protected showErrorModal(nzContent: string) {\\n    this.isOpen = true;\\n    this.modal\\n      .error({\\n        nzTitle: \'错误\',\\n        nzContent\\n      })\\n      .afterClose.subscribe(() => (this.isOpen = false));\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"modal","type":"NzxModalWrapService","deprecated":false,"deprecationMessage":""},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":14,"jsdoctags":[{"name":"modal","type":"NzxModalWrapService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"injectable"},{"name":"LogoutService","id":"injectable-LogoutService-ac06bb9cbef274070b198638e40234bfa0fde84484818a6fd6ec2b0c8d10fba217458b90b817a61cc72aa6bb1cd5e9459f98f9ba7ad323e6ddc866cddcda59fb","file":"lib/http-interceptor/logout.service.ts","properties":[{"name":"loginNotify$","defaultValue":"new Subject<LogoutType>()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":15,"modifierKind":[121]},{"name":"timeoutFn","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":14,"modifierKind":[122,144]}],"methods":[{"name":"logout","args":[{"name":"logoutType","type":"LogoutType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n执行退出登录Observable\\n","description":"<p>执行退出登录Observable</p>\\n","jsdoctags":[{"name":{"pos":1313,"end":1323,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"logoutType"},"type":"LogoutType","deprecated":false,"deprecationMessage":"","tagName":{"pos":1307,"end":1312,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"notifyLogin","args":[{"name":"error","type":"HttpError<ResponseModel>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":21,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"error","type":"HttpError<ResponseModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"notifyLogout","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'\'"},{"name":"code","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"0"}],"optional":false,"returnType":"void","typeParameters":[],"line":34,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n静默通知退出\\n","description":"<p>静默通知退出</p>\\n","jsdoctags":[{"name":{"pos":1090,"end":1097,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'\'","tagName":{"pos":1084,"end":1089,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>提示消息</p>\\n"},{"name":{"pos":1116,"end":1120,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"code"},"type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"0","tagName":{"pos":1110,"end":1115,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误码 -1 不显示提示信息</p>\\n"}]},{"name":"onLogout","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"logoutType","type":"LogoutType","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"Subscription","typeParameters":[],"line":46,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"logoutType","type":"LogoutType","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>退出通知</p>\\n","rawdescription":"\\n\\n退出通知\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpError, ResponseModel } from \'./http.model\';\\r\\nimport { Subject, Subscription } from \'rxjs\';\\r\\nimport { NzxModalWrapService } from \'@xmagic/nzx-antd/modal\';\\r\\nimport { throttleTime } from \'rxjs/operators\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { DEFAULT_RESPONSE_SETTING, NzxAntdService, ResponseSetting } from \'@xmagic/nzx-antd\'\\r\\n\\r\\n/**\\r\\n * 退出通知\\r\\n */\\r\\n@Injectable({ providedIn: \'root\' })\\r\\nexport class LogoutService {\\r\\n  protected readonly timeoutFn: (error: HttpError) => boolean;\\r\\n  private loginNotify$ = new Subject<LogoutType>();\\r\\n\\r\\n  constructor(protected modal: NzxModalWrapService, protected antdService: NzxAntdService) {\\r\\n    this.timeoutFn = NzxUtils.extend<ResponseSetting>({}, DEFAULT_RESPONSE_SETTING, this.antdService.response).timeout!;\\r\\n  }\\r\\n\\r\\n  notifyLogin(error: HttpError<ResponseModel>): void {\\r\\n    this.loginNotify$.next({\\r\\n      message: error.message,\\r\\n      url: (error.body as { url?: string })?.url,\\r\\n      timeout: this.timeoutFn(error)\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 静默通知退出\\r\\n   * @param message 提示消息\\r\\n   * @param code 错误码 -1 不显示提示信息\\r\\n   */\\r\\n  notifyLogout(message: string = \'\', code = 0): void {\\r\\n    this.notifyLogin(new HttpError(false, code, message, {}));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 执行退出登录Observable\\r\\n   * @param logoutType\\r\\n   */\\r\\n  logout(logoutType: LogoutType): void {\\r\\n    this.loginNotify$.next(logoutType);\\r\\n  }\\r\\n\\r\\n  onLogout(fn: (logoutType: LogoutType) => void): Subscription {\\r\\n    return this.loginNotify$.asObservable().pipe(throttleTime(2000)).subscribe(fn);\\r\\n  }\\r\\n}\\r\\n\\r\\nexport interface LogoutType {\\r\\n  /**\\r\\n   * url\\r\\n   */\\r\\n  url?: string;\\r\\n  /**\\r\\n   * 是否超时\\r\\n   */\\r\\n  timeout?: boolean;\\r\\n  /**\\r\\n   * 错误信息\\r\\n   */\\r\\n  message?: string;\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"modal","type":"NzxModalWrapService","deprecated":false,"deprecationMessage":""},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":15,"jsdoctags":[{"name":"modal","type":"NzxModalWrapService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"injectable"},{"name":"NzxAntdService","id":"injectable-NzxAntdService-b19f6407c684222ed3ab612651efea570e69ac619c400949139449ca2cb73a8dcb447566f9b66d2d2cfc0a4b6fc3ab489ced975c023295cda0a42112c139f5a5","file":"lib/nzx-antd.service.ts","properties":[{"name":"authChange","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>权限变更, 通常切换用户时需要</p>\\n","line":34,"rawdescription":"\\n\\n权限变更, 通常切换用户时需要\\n"},{"name":"basePath","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>请求的根路径,例如/context</p>\\n","line":17,"rawdescription":"\\n\\n请求的根路径,例如/context\\n"},{"name":"contentType","deprecated":false,"deprecationMessage":"","type":"\\"form\\" | \\"json\\"","optional":true,"description":"<p>默认请求数据类型, 默认 json</p>\\n","line":13,"rawdescription":"\\n\\n默认请求数据类型, 默认 json\\n"},{"name":"dic","deprecated":false,"deprecationMessage":"","type":"DicSetting","optional":true,"description":"<p>字典配置</p>\\n","line":49,"rawdescription":"\\n\\n字典配置\\n"},{"name":"handleRequest","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>自定义处理原始请求, 返回null,void则使用默认处理器</p>\\n","line":25,"rawdescription":"\\n\\n自定义处理原始请求, 返回null,void则使用默认处理器\\n"},{"name":"hasAuth","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"<p>是否有权限</p>\\n","line":30,"rawdescription":"\\n\\n是否有权限\\n"},{"name":"noAuthUrl","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>无权限时跳转路径</p>\\n","line":39,"rawdescription":"\\n\\n无权限时跳转路径\\n"},{"name":"response","deprecated":false,"deprecationMessage":"","type":"ResponseSetting","optional":true,"description":"<p>响应的数据配置</p>\\n","line":21,"rawdescription":"\\n\\n响应的数据配置\\n"},{"name":"table","deprecated":false,"deprecationMessage":"","type":"TableSetting","optional":true,"description":"<p>表格分页配置</p>\\n","line":44,"rawdescription":"\\n\\n表格分页配置\\n"}],"methods":[],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpContext, HttpRequest, HttpResponse } from \'@angular/common/http\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxAntdService {\\r\\n  /**\\r\\n   * 默认请求数据类型, 默认 json\\r\\n   */\\r\\n  contentType?: \'form\' | \'json\';\\r\\n  /**\\r\\n   * 请求的根路径,例如/context\\r\\n   */\\r\\n  basePath?: string;\\r\\n  /**\\r\\n   * 响应的数据配置\\r\\n   */\\r\\n  response?: ResponseSetting;\\r\\n  /**\\r\\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\\r\\n   */\\r\\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\\r\\n\\r\\n  /**\\r\\n   * 是否有权限\\r\\n   */\\r\\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\\r\\n  /**\\r\\n   * 权限变更, 通常切换用户时需要\\r\\n   */\\r\\n  authChange?: () => Observable<void>;\\r\\n\\r\\n  /**\\r\\n   * 无权限时跳转路径\\r\\n   */\\r\\n  noAuthUrl?: string;\\r\\n\\r\\n  /**\\r\\n   * 表格分页配置\\r\\n   */\\r\\n  table?: TableSetting;\\r\\n\\r\\n  /**\\r\\n   * 字典配置\\r\\n   */\\r\\n  dic?: DicSetting;\\r\\n  constructor() {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * 默认配置\\r\\n */\\r\\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\\r\\n  code: \'code\',\\r\\n  message: \'message\',\\r\\n  data: \'result\',\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  success: response => response.body.code == 200,\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  timeout: error => error.code == 401,\\r\\n  forceLogout: () => false,\\r\\n  defaultError: error => error.code < 1024\\r\\n};\\r\\n\\r\\n/**\\r\\n * 默认状态错误信息\\r\\n */\\r\\nexport const DEFAULT_STATUS_MESSAGE_MAP: Record<string, string> = {\\r\\n  0: \'请求网络错误，请检查网络是否正常\',\\r\\n  404: \'请求的地址不存在，请检查地址是否正确\',\\r\\n  403: \'您没有操作权限\',\\r\\n  other: \'请求发生错误，请联系管理员\'\\r\\n};\\r\\n\\r\\n/**\\r\\n * 响应配置\\r\\n */\\r\\nexport interface ResponseSetting {\\r\\n  /**\\r\\n   * code字段名称, 支持路径属性\\r\\n   */\\r\\n  code?: string;\\r\\n  /**\\r\\n   * message字段名称, 支持路径属性\\r\\n   */\\r\\n  message?: string;\\r\\n  /**\\r\\n   * data字段名称, 支持路径属性\\r\\n   */\\r\\n  data?: string;\\r\\n  /**\\r\\n   * http错误码和错误信息映射,比如 `{404: \'请求的地址不存在，请检查地址是否正确\', 500: \'服务器错误\'}`\\r\\n   * other 表示不匹配任何错误时显示other信息\\r\\n   */\\r\\n  statusMessageMap?: { [status: string]: string; other: string };\\r\\n\\r\\n  /**\\r\\n   * 是否请求成功\\r\\n   * @param body 响应对象\\r\\n   */\\r\\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\\r\\n  /**\\r\\n   * 是否需要默认错误的错误\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  defaultError?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否登录超时\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  timeout?: (error: HttpErrorBean) => boolean;\\r\\n  /**\\r\\n   * 是否强制退出登录, 比如强制下线\\r\\n   * @param error 错误信息\\r\\n   */\\r\\n  forceLogout?: (error: HttpErrorBean) => boolean;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 表格配置\\r\\n */\\r\\nexport interface TableSetting {\\r\\n  /**\\r\\n   * 请求接口当前页数\\r\\n   */\\r\\n  pageIndexField?: string;\\r\\n  /**\\r\\n   * 每页显示多少条\\r\\n   */\\r\\n  pageSizeField?: string;\\r\\n  /**\\r\\n   * 请求结果列表字段  支持 a.b.c\\r\\n   */\\r\\n  listField?: string;\\r\\n  /**\\r\\n   * 请求结果总数字段  支持 a.b.c\\r\\n   */\\r\\n  totalField?: string;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  method?: string;\\r\\n  /**\\r\\n   *  相应类型\\r\\n   */\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  /**\\r\\n   * 分页大小\\r\\n   */\\r\\n  nzPageSize?: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 请求公共配置\\r\\n */\\r\\nexport interface HttpRequestOptions {\\r\\n  context?: HttpContext;\\r\\n  reportProgress?: boolean;\\r\\n  responseType?: \'arraybuffer\' | \'blob\' | \'json\' | \'text\';\\r\\n  withCredentials?: boolean;\\r\\n  body?: NzSafeAny | null;\\r\\n  method?: string;\\r\\n  url?: string;\\r\\n  setHeaders?: Record<string, NzSafeAny>;\\r\\n  setParams?: Record<string, NzSafeAny>;\\r\\n}\\r\\n\\r\\nexport interface HttpErrorBean<T = NzSafeAny> {\\r\\n  httpError: boolean;\\r\\n  code: number;\\r\\n  message: string;\\r\\n  body: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 字典配置信息\\r\\n */\\r\\nexport interface DicSetting {\\r\\n  /**\\r\\n   * 字典的URL,如果是string 将会自动在URL后追加key,如 url 为 /api/dic 真正请求的地址为 /api/dic/{dicKey}\\r\\n   */\\r\\n  url: ((key: string) => string) | string;\\r\\n  /**\\r\\n   * 后台返回的字典label的属性名称, 默认\'label\'\\r\\n   */\\r\\n  labelName?: string;\\r\\n  /**\\r\\n   * 后台返回的字典value的属性名称, 默认\'value\'\\r\\n   */\\r\\n  valueName?: string;\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":49},"type":"injectable"},{"name":"NzxDownloadService","id":"injectable-NzxDownloadService-5b306957edfa54277c84cb19615cb3b62f396edfb168b50dfd6ac9d358c8da3953c2e45dbdb269f8778b2a49f237fd6cc10923cddece2466a7e9df55df70581e","file":"lib/service/download.service.ts","properties":[],"methods":[{"name":"download","args":[{"name":"options","type":"DownloadOption","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":14,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n下载文件\\n","description":"<p>下载文件</p>\\n","jsdoctags":[{"name":{"pos":370,"end":377,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"options"},"type":"DownloadOption","deprecated":false,"deprecationMessage":"","tagName":{"pos":364,"end":369,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>下载文件配置信息</p>\\n"}]},{"name":"getFilename","args":[{"name":"headers","type":"HttpHeaders","deprecated":false,"deprecationMessage":""},{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":61,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取文件名称\\n","description":"<p>获取文件名称</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":1752,"end":1759,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"headers"},"type":"HttpHeaders","deprecated":false,"deprecationMessage":"","tagName":{"pos":1746,"end":1751,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":1773,"end":1776,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1767,"end":1772,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"saveAs","args":[{"name":"body","type":"Blob","deprecated":false,"deprecationMessage":""},{"name":"filename","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":36,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n文件另存为\\n","description":"<p>文件另存为</p>\\n","jsdoctags":[{"name":{"pos":981,"end":985,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"body"},"type":"Blob","deprecated":false,"deprecationMessage":"","tagName":{"pos":975,"end":980,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>二进制内容</p>\\n"},{"name":{"pos":1005,"end":1013,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"filename"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":999,"end":1004,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>文件名</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpHeaders, HttpResponse } from \'@angular/common/http\';\\r\\nimport { FetcherService, FetchOptions } from \'./fetcher.service\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\n@Injectable()\\r\\nexport class NzxDownloadService {\\r\\n  constructor(protected fetcher: FetcherService) {}\\r\\n\\r\\n  /**\\r\\n   * 下载文件\\r\\n   * @param options 下载文件配置信息\\r\\n   */\\r\\n  download(options: DownloadOption) {\\r\\n    this.fetcher\\r\\n      .fetch<HttpResponse<Blob>>({ ...options, responseType: \'blob\', observe: \'response\' })\\r\\n      .subscribe(resp => {\\r\\n        const url = options.url;\\r\\n        const filename = this.getFilename(resp.headers, url);\\r\\n        if (options.afterDownload && options.afterDownload(resp, filename) === false) {\\r\\n          return;\\r\\n        }\\r\\n\\r\\n        this.saveAs(resp.body!, filename);\\r\\n        if (options.downloadDone) {\\r\\n          options.downloadDone(resp, filename);\\r\\n        }\\r\\n      });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 文件另存为\\r\\n   * @param body 二进制内容\\r\\n   * @param filename 文件名\\r\\n   */\\r\\n  saveAs(body: Blob, filename: string) {\\r\\n    if (typeof (window.navigator as NzSafeAny).msSaveBlob !== \'undefined\') {\\r\\n      (window.navigator as NzSafeAny).msSaveBlob(body, filename);\\r\\n    }\\r\\n\\r\\n    const blobURL = window.URL.createObjectURL(body as Blob);\\r\\n    const tempLink = document.createElement(\'a\');\\r\\n    tempLink.style.display = \'none\';\\r\\n    tempLink.href = blobURL;\\r\\n    tempLink.setAttribute(\'download\', filename);\\r\\n    if (typeof tempLink.download === \'undefined\') {\\r\\n      tempLink.setAttribute(\'target\', \'_blank\');\\r\\n    }\\r\\n    document.body.appendChild(tempLink);\\r\\n    tempLink.click();\\r\\n    document.body.removeChild(tempLink);\\r\\n    window.URL.revokeObjectURL(blobURL);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取文件名称\\r\\n   * @param headers\\r\\n   * @param url\\r\\n   * @protected\\r\\n   */\\r\\n  protected getFilename(headers: HttpHeaders, url: string): string {\\r\\n    const disposition = headers.get(\'content-disposition\');\\r\\n    const filename = headers.get(\'filename\');\\r\\n    if (filename) {\\r\\n      return decodeURIComponent(filename);\\r\\n    } else if (disposition) {\\r\\n      return disposition.split(\';\')[0].split(\'=\')[1];\\r\\n    } else {\\r\\n      const start = url.lastIndexOf(\'/\') + 1;\\r\\n      const endIndex = url.lastIndexOf(\'?\');\\r\\n      const end = endIndex === -1 ? url.length : endIndex;\\r\\n      return url.substring(start, end);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 下载文件配置信息\\r\\n */\\r\\nexport type DownloadOption = Omit<FetchOptions, \'observe\'> & {\\r\\n  /**\\r\\n   * 请求完成后的回调\\r\\n   * @param resp\\r\\n   * @param filename\\r\\n   */\\r\\n  afterDownload?: (resp: HttpResponse<Blob>, filename: string) => boolean | void;\\r\\n\\r\\n  /**\\r\\n   * 下载并保存完成的回调\\r\\n   * @param resp\\r\\n   * @param filename\\r\\n   */\\r\\n  downloadDone?: (resp: HttpResponse<Blob>, filename: string) => void;\\r\\n};\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"fetcher","type":"FetcherService","deprecated":false,"deprecationMessage":""}],"line":7,"jsdoctags":[{"name":"fetcher","type":"FetcherService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"injectable"},{"name":"NzxLoadingService","id":"injectable-NzxLoadingService-7f34183f8601d24f914789331c22d45b22dfcfc9ede9961f9c4690a31d508389c0f9597ffa0201c43fa8f15968e699cd8ab45909975cd8ae7572f21acc0c1cf8","file":"lib/service/loading.service.ts","properties":[{"name":"loadingId","defaultValue":"\'__MESSAGE_LOADING__\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":10,"modifierKind":[144]}],"methods":[{"name":"hide","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":83,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n隐藏loading\\n","description":"<p>隐藏loading</p>\\n"},{"name":"loading","args":[{"name":"show","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":76,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示或隐藏loading\\n","description":"<p>显示或隐藏loading</p>\\n","jsdoctags":[{"name":{"pos":2736,"end":2740,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"show"},"type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"pos":2730,"end":2735,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否显示</p>\\n"}]},{"name":"show","args":[{"name":"type","type":"\\"message\\" | \\"spin\\"","deprecated":false,"deprecationMessage":"","defaultValue":"\'message\'"},{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'加载中...\'"}],"optional":false,"returnType":"void","typeParameters":[],"line":17,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示loading\\n","description":"<p>显示loading</p>\\n","jsdoctags":[{"name":{"pos":230,"end":234,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"\\"message\\" | \\"spin\\"","deprecated":false,"deprecationMessage":"","defaultValue":"\'message\'","tagName":{"pos":224,"end":229,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>loading类型</p>\\n"},{"name":{"pos":258,"end":265,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'加载中...\'","tagName":{"pos":252,"end":257,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>消息</p>\\n"}]},{"name":"showx","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""},{"name":"type","type":"\\"message\\" | \\"spin\\"","deprecated":false,"deprecationMessage":""},{"name":"html","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":55,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"type","type":"\\"message\\" | \\"spin\\"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"html","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxLoadingService {\\r\\n  readonly loadingId = \'__MESSAGE_LOADING__\';\\r\\n\\r\\n  /**\\r\\n   * 显示loading\\r\\n   * @param type loading类型\\r\\n   * @param message 消息\\r\\n   */\\r\\n  show(type: \'message\' | \'spin\' = \'message\', message: string = \'加载中...\') {\\r\\n    this.showx(this.loadingId, type, () => {\\r\\n      if (type === \'spin\') {\\r\\n        return `\\r\\n        <div class=\\"ant-modal-wrap\\" style=\\"position: fixed; z-index: 999998; background-color: rgba(255, 255, 255, 0.35)\\"></div>\\r\\n        <div\\r\\n          class=\\"ant-spin ant-spin-spinning ant-spin-show-text\\"\\r\\n          style=\\"top: 45%; transform: translate(-50%); z-index: 999999; position: fixed; left: 50%\\"\\r\\n        >\\r\\n          <span class=\\"ant-spin-dot ant-spin-dot-spin\\">\\r\\n            <i class=\\"ant-spin-dot-item\\"></i>\\r\\n            <i class=\\"ant-spin-dot-item\\"></i>\\r\\n            <i class=\\"ant-spin-dot-item\\"></i>\\r\\n            <i class=\\"ant-spin-dot-item\\"></i>\\r\\n          </span>\\r\\n          <div class=\\"ant-spin-text\\">${message}</div>\\r\\n        </div>`;\\r\\n      }\\r\\n\\r\\n      return `\\r\\n      <div class=\\"ant-modal-wrap\\" style=\\"z-index: 999998;background-color: rgba(255, 255, 255,.35);\\"></div>\\r\\n      <div class=\\"ant-message-notice ant-message\\" style=\\"top: 45%; z-index: 999999;\\">\\r\\n        <div class=\\"ant-message-notice-content\\" style=\\"min-width: 150px;\\">\\r\\n          <div class=\\"ant-message-loading\\">\\r\\n            <i class=\\"anticon anticon-loading\\">\\r\\n              <svg viewBox=\\"0 0 1024 1024\\" focusable=\\"false\\" fill=\\"currentColor\\" width=\\"1em\\" height=\\"1em\\"\\r\\n                   class=\\"anticon-spin\\">\\r\\n                <path\\r\\n                  d=\\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\\"></path>\\r\\n              </svg>\\r\\n            </i>\\r\\n            <span>${message}</span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>`;\\r\\n    });\\r\\n  }\\r\\n\\r\\n  private showx(id: string, type: \'message\' | \'spin\', html: () => string) {\\r\\n    const loading = document.getElementById(id);\\r\\n    if (loading) {\\r\\n      if (loading.getAttribute(\'type\') !== type) {\\r\\n        loading.setAttribute(\'type\', type);\\r\\n        loading.innerHTML = html();\\r\\n      }\\r\\n      loading.style.display = \'block\';\\r\\n      return;\\r\\n    }\\r\\n    const div = document.createElement(\'div\');\\r\\n    div.setAttribute(\'type\', type);\\r\\n    div.setAttribute(\'id\', id);\\r\\n    div.innerHTML = html();\\r\\n    document.body.append(div);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 显示或隐藏loading\\r\\n   * @param show 是否显示\\r\\n   */\\r\\n  loading(show: boolean = true): void {\\r\\n    show ? this.show() : this.hide();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 隐藏loading\\r\\n   */\\r\\n  hide() {\\r\\n    const loading = document.getElementById(this.loadingId);\\r\\n    if (loading) {\\r\\n      loading.style.display = \'none\';\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const loadingService = new NzxLoadingService();\\r\\n","type":"injectable"},{"name":"NzxModalDragService","id":"injectable-NzxModalDragService-fbd39b4d19dfc3079a56056d3d325760d12cd681f0bac32d3a048856e9c6c21d5d6082e8e5f0c5563b5cfb89da6191e6ec348f2f82f91dbcaddb6b8665ec0c14","file":"lib/modal/modal-drag.service.ts","properties":[{"name":"DRAG_CLS_PREFIX","defaultValue":"\'NZ-MODAL-WRAP-CLS-\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":11,"modifierKind":[124,144]},{"name":"dragDrop","deprecated":false,"deprecationMessage":"","type":"DragDrop","optional":false,"description":"","line":12,"modifierKind":[123]},{"name":"modal","deprecated":false,"deprecationMessage":"","type":"NzModalService","optional":false,"description":"","line":12,"modifierKind":[123]}],"methods":[{"name":"createDragHandler","args":[{"name":"wrapCls","type":"string","deprecated":false,"deprecationMessage":""},{"name":"nzMask","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true},{"name":"nzModalType","type":"ModalTypes","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"DragRef<T>","typeParameters":["T"],"line":20,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n创建拖拽手柄\\n","description":"<p>创建拖拽手柄</p>\\n","jsdoctags":[{"name":{"pos":471,"end":478,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"wrapCls"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":465,"end":470,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>类名</p>\\n"},{"name":{"pos":495,"end":501,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"nzMask"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":489,"end":494,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否有遮罩</p>\\n"},{"name":{"pos":521,"end":532,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"nzModalType"},"type":"ModalTypes","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":515,"end":520,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>对话框类型</p>\\n"}]},{"name":"fixedWrapElementStyle","args":[{"name":"wrapElement","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":46,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n解决wrap的样式, 设置鼠标可以穿透\\n","description":"<p>解决wrap的样式, 设置鼠标可以穿透</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":1487,"end":1498,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"wrapElement"},"type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":1481,"end":1486,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"getModalMaxZIndex","args":[{"name":"wrapElement","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number | null","typeParameters":[],"line":73,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取所有对话框最大值,并确定是否需要修改\\n","description":"<p>获取所有对话框最大值,并确定是否需要修改</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":2180,"end":2191,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"wrapElement"},"type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":2174,"end":2179,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>待修改z-index 容器</p>\\n"}]},{"name":"getRandomCls","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":37,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取随机类名\\n","description":"<p>获取随机类名</p>\\n"},{"name":"getZIndex","args":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":87,"deprecated":false,"deprecationMessage":"","modifierKind":[122],"jsdoctags":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setMaxZIndex","args":[{"name":"rootElement","type":"HTMLElement","deprecated":false,"deprecationMessage":""},{"name":"wrapElement","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":56,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当前对话框点击时,设置当前对话框z-index为最大\\n","description":"<p>当前对话框点击时,设置当前对话框z-index为最大</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":1699,"end":1710,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"rootElement"},"type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":1693,"end":1698,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前对话框</p>\\n"},{"name":{"pos":1730,"end":1741,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"wrapElement"},"type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":1724,"end":1729,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>待修改z-index 容器</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>对话框拖动服务</p>\\n","rawdescription":"\\n\\n对话框拖动服务\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { DragDrop, DragRef } from \'@angular/cdk/drag-drop\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { ModalTypes, NzModalService } from \'ng-zorro-antd/modal\';\\r\\n\\r\\n/**\\r\\n * 对话框拖动服务\\r\\n */\\r\\n@Injectable()\\r\\nexport class NzxModalDragService {\\r\\n  static readonly DRAG_CLS_PREFIX = \'NZ-MODAL-WRAP-CLS-\';\\r\\n  constructor(public modal: NzModalService, public dragDrop: DragDrop) {}\\r\\n\\r\\n  /**\\r\\n   * 创建拖拽手柄\\r\\n   * @param wrapCls 类名\\r\\n   * @param nzMask 是否有遮罩\\r\\n   * @param nzModalType 对话框类型\\r\\n   */\\r\\n  createDragHandler<T = NzSafeAny>(wrapCls: string, nzMask?: boolean, nzModalType?: ModalTypes): DragRef<T> {\\r\\n    const wrapElement = document.querySelector<HTMLDivElement>(`.${wrapCls}`)!;\\r\\n    const rootElement = wrapElement.querySelector<HTMLDivElement>(`.ant-modal-content`)!;\\r\\n    const handle =\\r\\n      nzModalType === \'confirm\'\\r\\n        ? rootElement.querySelector<HTMLDivElement>(\'.ant-modal-body\')!\\r\\n        : rootElement.querySelector<HTMLDivElement>(\'.ant-modal-header\')!;\\r\\n    this.fixedWrapElementStyle(wrapElement);\\r\\n    if (!(nzMask == null || nzMask)) {\\r\\n      this.setMaxZIndex(rootElement, wrapElement);\\r\\n    }\\r\\n    return this.dragDrop.createDrag(handle).withHandles([handle]).withRootElement(rootElement);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取随机类名\\r\\n   */\\r\\n  getRandomCls() {\\r\\n    return NzxModalDragService.DRAG_CLS_PREFIX + Date.now() + Math.random().toString().replace(\'0.\', \'\');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 解决wrap的样式, 设置鼠标可以穿透\\r\\n   * @param wrapElement\\r\\n   * @protected\\r\\n   */\\r\\n  protected fixedWrapElementStyle(wrapElement: HTMLElement): void {\\r\\n    wrapElement.style.pointerEvents = \'none\';\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 当前对话框点击时,设置当前对话框z-index为最大\\r\\n   * @param rootElement 当前对话框\\r\\n   * @param wrapElement 待修改z-index 容器\\r\\n   * @protected\\r\\n   */\\r\\n  protected setMaxZIndex(rootElement: HTMLElement, wrapElement: HTMLElement): void {\\r\\n    rootElement.addEventListener(\\r\\n      \'mousedown\',\\r\\n      () => {\\r\\n        const maxZIndex = this.getModalMaxZIndex(wrapElement);\\r\\n        if (maxZIndex) {\\r\\n          wrapElement.style.zIndex = maxZIndex + 1 + \'\';\\r\\n        }\\r\\n      },\\r\\n      false\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取所有对话框最大值,并确定是否需要修改\\r\\n   * @param wrapElement 待修改z-index 容器\\r\\n   */\\r\\n  protected getModalMaxZIndex(wrapElement: HTMLElement): number | null {\\r\\n    const wrapZIndex = this.getZIndex(wrapElement);\\r\\n    const maxZIndex = this.modal.openModals.reduce<number>((prev, modal) => {\\r\\n      // @ts-ignore\\r\\n      const element = (modal.containerInstance.host || modal.containerInstance.elementRef).nativeElement;\\r\\n      if (wrapElement === element) {\\r\\n        return prev;\\r\\n      }\\r\\n      const zIndex = this.getZIndex(element);\\r\\n      return zIndex > prev ? zIndex : prev;\\r\\n    }, 0);\\r\\n    return maxZIndex >= wrapZIndex ? maxZIndex : null;\\r\\n  }\\r\\n\\r\\n  protected getZIndex(element: HTMLElement): number {\\r\\n    return +getComputedStyle(element, null).zIndex;\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"modal","type":"NzModalService","deprecated":false,"deprecationMessage":""},{"name":"dragDrop","type":"DragDrop","deprecated":false,"deprecationMessage":""}],"line":11,"jsdoctags":[{"name":"modal","type":"NzModalService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"dragDrop","type":"DragDrop","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"injectable"},{"name":"NzxModalWrapService","id":"injectable-NzxModalWrapService-efd06bc36f6a4b7c3cb60937572eada60a0fc25538b04301910e82e9c5c6f13f56e81fe7e2fcde350eebcac53ae59e27324806121459428a2af2ab4b6095b9c8","file":"lib/modal/nz-modal-wrap.service.ts","properties":[{"name":"modal","deprecated":false,"deprecationMessage":"","type":"NzModalService","optional":false,"description":"","line":10,"modifierKind":[123]},{"name":"modalDragService","deprecated":false,"deprecationMessage":"","type":"NzxModalDragService","optional":false,"description":"","line":10,"modifierKind":[123]}],"methods":[{"name":"closeAll","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":28,"deprecated":false,"deprecationMessage":""},{"name":"confirm","args":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":""},{"name":"confirmType","type":"ConfirmType","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"NzModalRef<T>","typeParameters":["T"],"line":32,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"confirmType","type":"ConfirmType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"create","args":[{"name":"config","type":"ModalOptions<T | R>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"NzModalRef<T, R>","typeParameters":["T","R"],"line":16,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n创建对话框, 增加可拖拽功能\\n","description":"<p>创建对话框, 增加可拖拽功能</p>\\n","jsdoctags":[{"name":{"pos":479,"end":485,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"config"},"type":"ModalOptions<T | R>","deprecated":false,"deprecationMessage":"","tagName":{"pos":473,"end":478,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>ModalOptions</p>\\n"}]},{"name":"createModalConfig","args":[{"name":"config","type":"ModalOptions<T | R>","deprecated":false,"deprecationMessage":""},{"name":"wrapCls","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ModalOptions<T, R>","typeParameters":["T","R"],"line":71,"deprecated":false,"deprecationMessage":"","modifierKind":[122],"jsdoctags":[{"name":"config","type":"ModalOptions<T | R>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"wrapCls","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"createModalWidthDrag","args":[{"name":"config","type":"ModalOptions<T | R>","deprecated":false,"deprecationMessage":""},{"name":"create","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"newConfig","type":"ModalOptions<T | R>","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"NzModalRef<T, R>","typeParameters":["T","R"],"line":52,"deprecated":false,"deprecationMessage":"","modifierKind":[122],"jsdoctags":[{"name":"config","type":"ModalOptions<T | R>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"create","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"newConfig","type":"ModalOptions<T | R>","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}]},{"name":"error","args":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"NzModalRef<T>","typeParameters":["T"],"line":44,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"info","args":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"NzModalRef<T>","typeParameters":["T"],"line":36,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"success","args":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"NzModalRef<T>","typeParameters":["T"],"line":40,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"warning","args":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"NzModalRef<T>","typeParameters":["T"],"line":48,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"options","type":"ModalOptions<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\n\\r\\nimport { Subject } from \'rxjs\';\\r\\nimport { ConfirmType, ModalOptions, NzModalRef, NzModalService } from \'ng-zorro-antd/modal\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzxModalDragService } from \'./modal-drag.service\';\\r\\n\\r\\n@Injectable()\\r\\nexport class NzxModalWrapService {\\r\\n  constructor(public modal: NzModalService, public modalDragService: NzxModalDragService) {}\\r\\n\\r\\n  /**\\r\\n   * 创建对话框, 增加可拖拽功能\\r\\n   * @param config ModalOptions\\r\\n   */\\r\\n  create<T, R = NzSafeAny>(config: ModalOptions<T, R>): NzModalRef<T, R> {\\r\\n    return this.createModalWidthDrag(config, c => this.modal.create(c));\\r\\n  }\\r\\n\\r\\n  get openModals(): NzModalRef[] {\\r\\n    return this.modal.openModals;\\r\\n  }\\r\\n\\r\\n  get afterAllClosed(): Subject<void> {\\r\\n    return this.modal._afterAllClosed;\\r\\n  }\\r\\n\\r\\n  closeAll(): void {\\r\\n    this.modal.closeAll();\\r\\n  }\\r\\n\\r\\n  confirm<T>(options: ModalOptions<T>, confirmType?: ConfirmType): NzModalRef<T> {\\r\\n    return this.createModalWidthDrag(options, c => this.modal.confirm(c));\\r\\n  }\\r\\n\\r\\n  info<T>(options: ModalOptions<T>): NzModalRef<T> {\\r\\n    return this.createModalWidthDrag(options, c => this.modal.info(c));\\r\\n  }\\r\\n\\r\\n  success<T>(options: ModalOptions<T>): NzModalRef<T> {\\r\\n    return this.createModalWidthDrag(options, c => this.modal.success(c));\\r\\n  }\\r\\n\\r\\n  error<T>(options: ModalOptions<T>): NzModalRef<T> {\\r\\n    return this.createModalWidthDrag(options, c => this.modal.error(c));\\r\\n  }\\r\\n\\r\\n  warning<T>(options: ModalOptions<T>): NzModalRef<T> {\\r\\n    return this.createModalWidthDrag(options, c => this.modal.warning(c));\\r\\n  }\\r\\n\\r\\n  protected createModalWidthDrag<T, R = NzSafeAny>(\\r\\n    config: ModalOptions<T, R>,\\r\\n    create: (newConfig: ModalOptions<T, R>) => NzModalRef<T, R>\\r\\n  ) {\\r\\n    const wrapCls = this.modalDragService.getRandomCls();\\r\\n    const newConfig = this.createModalConfig(config, wrapCls);\\r\\n    const modalRef = create(newConfig);\\r\\n\\r\\n    modalRef.afterOpen.subscribe(() => {\\r\\n      const drag = this.modalDragService.createDragHandler(wrapCls, config.nzMask, newConfig.nzModalType);\\r\\n      modalRef.afterClose.subscribe(() => {\\r\\n        if (drag && !drag.dropped) {\\r\\n          drag.dispose();\\r\\n        }\\r\\n      });\\r\\n    });\\r\\n    return modalRef;\\r\\n  }\\r\\n\\r\\n  protected createModalConfig<T, R = NzSafeAny>(config: ModalOptions<T, R>, wrapCls: string): ModalOptions<T, R> {\\r\\n    const defaultConfig: ModalOptions = {\\r\\n      nzMaskClosable: false,\\r\\n      nzTitle: \'提示\'\\r\\n    };\\r\\n    const maskStyle = config.nzMask === false ? { nzMaskStyle: { display: \'none\' } } : {};\\r\\n    const newConfig = Object.assign(defaultConfig, config, maskStyle);\\r\\n    newConfig.nzWrapClassName = (newConfig.nzWrapClassName || \'\') + \' \' + wrapCls;\\r\\n    return newConfig;\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"modal","type":"NzModalService","deprecated":false,"deprecationMessage":""},{"name":"modalDragService","type":"NzxModalDragService","deprecated":false,"deprecationMessage":""}],"line":9,"jsdoctags":[{"name":"modal","type":"NzModalService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"modalDragService","type":"NzxModalDragService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"openModals":{"name":"openModals","getSignature":{"name":"openModals","type":"[]","returnType":"NzModalRef[]","line":20}},"afterAllClosed":{"name":"afterAllClosed","getSignature":{"name":"afterAllClosed","type":"","returnType":"Subject<void>","line":24}}},"type":"injectable"},{"name":"NzxStorageService","id":"injectable-NzxStorageService-e7b002510551e89df9f15ef595535b392f9f6da59d07cde051d06ce9424b2094cb0266c1c2db13b9ce60318a26df0c4b5fa5227b862177e364fa40aefb6694a8","file":"lib/service/storage.service.ts","properties":[{"name":"storage","deprecated":false,"deprecationMessage":"","type":"Storage","optional":false,"description":"","line":15,"decorators":[{"name":"Optional","stringifiedArguments":""}],"modifierKind":[123]}],"methods":[{"name":"clear","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":24,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n清除所有数据\\n","description":"<p>清除所有数据</p>\\n"},{"name":"getItem","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"T | null","typeParameters":["T"],"line":32,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取值\\n","description":"<p>获取值</p>\\n","jsdoctags":[{"name":{"pos":498,"end":501,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":492,"end":497,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>key</p>\\n"}]},{"name":"key","args":[{"name":"index","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string | null","typeParameters":[],"line":41,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取key\\n","description":"<p>获取key</p>\\n","jsdoctags":[{"name":{"pos":710,"end":715,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"index"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":704,"end":709,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>索引</p>\\n"}]},{"name":"removeItem","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":49,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n移除值\\n","description":"<p>移除值</p>\\n","jsdoctags":[{"name":{"pos":839,"end":842,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":833,"end":838,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>key</p>\\n"}]},{"name":"setItem","args":[{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":["T"],"line":58,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n设置值\\n","description":"<p>设置值</p>\\n","jsdoctags":[{"name":{"pos":961,"end":964,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":955,"end":960,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":978,"end":983,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":972,"end":977,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable, Optional } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxStorageService {\\r\\n  /**\\r\\n   * 获取长度\\r\\n   */\\r\\n  get length() {\\r\\n    return this.storage.length;\\r\\n  }\\r\\n\\r\\n  constructor(@Optional() public storage: Storage) {\\r\\n    if (!storage) {\\r\\n      this.storage = localStorage;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 清除所有数据\\r\\n   */\\r\\n  clear() {\\r\\n    this.storage.clear();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取值\\r\\n   * @param key key\\r\\n   */\\r\\n  getItem<T = NzSafeAny>(key: string): T | null {\\r\\n    const value = this.storage.getItem(key);\\r\\n    return value == null ? null : (JSON.parse(value) as T);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取key\\r\\n   * @param index 索引\\r\\n   */\\r\\n  key(index: number): string | null {\\r\\n    return this.storage.key(index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 移除值\\r\\n   * @param key key\\r\\n   */\\r\\n  removeItem(key: string): void {\\r\\n    this.storage.removeItem(key);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 设置值\\r\\n   * @param key\\r\\n   * @param value\\r\\n   */\\r\\n  setItem<T = NzSafeAny>(key: string, value: T): void {\\r\\n    this.storage.setItem(key, JSON.stringify(value));\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"storage","type":"Storage","deprecated":false,"deprecationMessage":""}],"line":13,"jsdoctags":[{"name":"storage","type":"Storage","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"length":{"name":"length","getSignature":{"name":"length","type":"","returnType":"","line":11,"rawdescription":"\\n\\n获取长度\\n","description":"<p>获取长度</p>\\n"}}},"type":"injectable"}],"guards":[{"name":"NzxAuthGuardService","id":"injectable-NzxAuthGuardService-56189a6e62269b78aa8e637aec7efb64645f2c2cd97b83571bec4d7664e6e372d74528b7b28e1af83b4b6c691631a84389803dbf5110bf3987df74610034cc0d","file":"lib/service/auth-guard.service.ts","properties":[{"name":"hasAuth","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":42,"modifierKind":[122]}],"methods":[{"name":"canActivate","args":[{"name":"route","type":"ActivatedRouteSnapshot","deprecated":false,"deprecationMessage":""},{"name":"_state","type":"RouterStateSnapshot | null","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"route","type":"ActivatedRouteSnapshot","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"_state","type":"RouterStateSnapshot | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"canActivateChild","args":[{"name":"childRoute","type":"ActivatedRouteSnapshot","deprecated":false,"deprecationMessage":""},{"name":"state","type":"RouterStateSnapshot","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":73,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"childRoute","type":"ActivatedRouteSnapshot","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"state","type":"RouterStateSnapshot","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"canLoad","args":[{"name":"route","type":"Route","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":68,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"route","type":"Route","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"process","args":[{"name":"data","type":"Data","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":50,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"data","type":"Data","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>权限路由守卫服务, 具体数据格式,由NzxAntdService.hasAuth决定处理</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">const routes: Routes = [\\n{\\n   path: &#39;xxx&#39;,\\n   canActivate: [ NzxAuthGuardService ],\\n   data: { guard: &#39;user1&#39;, noAuthUrl: &#39;/no-permisseion&#39; }\\n},\\n{\\n   path: &#39;xxx&#39;,\\n   canActivate: [ NzxAuthGuardService ],\\n   data: { guard: { auth: [&#39;user1&#39;, &#39;user2&#39;], noAuthUrl: &#39;/no-permisseion&#39;} }}\\n},\\n{\\n   path: &#39;yyy&#39;,\\n   canActivate: [ NzxAuthGuardService ],\\n   data: { guard: ((router, injector, antdService) =&gt; of(true)) as AuthGuardType, noAuthUrl: &#39;/no-permisseion&#39; }\\n}\\n];</code></pre></div>","rawdescription":"\\n\\n权限路由守卫服务, 具体数据格式,由NzxAntdService.hasAuth决定处理\\n```html\\nconst routes: Routes = [\\n{\\n   path: \'xxx\',\\n   canActivate: [ NzxAuthGuardService ],\\n   data: { guard: \'user1\', noAuthUrl: \'/no-permisseion\' }\\n},\\n{\\n   path: \'xxx\',\\n   canActivate: [ NzxAuthGuardService ],\\n   data: { guard: { auth: [\'user1\', \'user2\'], noAuthUrl: \'/no-permisseion\'} }}\\n},\\n{\\n   path: \'yyy\',\\n   canActivate: [ NzxAuthGuardService ],\\n   data: { guard: ((router, injector, antdService) => of(true)) as AuthGuardType, noAuthUrl: \'/no-permisseion\' }\\n}\\n];\\n```","sourceCode":"import { Injectable, Injector } from \'@angular/core\';\\r\\nimport {\\r\\n  ActivatedRouteSnapshot,\\r\\n  CanActivate,\\r\\n  CanActivateChild,\\r\\n  CanLoad,\\r\\n  Data,\\r\\n  Route,\\r\\n  Router,\\r\\n  RouterStateSnapshot\\r\\n} from \'@angular/router\';\\r\\nimport { Observable, of, tap } from \'rxjs\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzxAntdService } from \'@xmagic/nzx-antd\';\\r\\n\\r\\n/**\\r\\n * 权限路由守卫服务, 具体数据格式,由NzxAntdService.hasAuth决定处理\\r\\n * @example\\r\\n * const routes: Routes = [\\r\\n * {\\r\\n *    path: \'xxx\',\\r\\n *    canActivate: [ NzxAuthGuardService ],\\r\\n *    data: { guard: \'user1\', noAuthUrl: \'/no-permisseion\' }\\r\\n * },\\r\\n * {\\r\\n *    path: \'xxx\',\\r\\n *    canActivate: [ NzxAuthGuardService ],\\r\\n *    data: { guard: { auth: [\'user1\', \'user2\'], noAuthUrl: \'/no-permisseion\'} }}\\r\\n * },\\r\\n * {\\r\\n *    path: \'yyy\',\\r\\n *    canActivate: [ NzxAuthGuardService ],\\r\\n *    data: { guard: ((router, injector, antdService) => of(true)) as AuthGuardType, noAuthUrl: \'/no-permisseion\' }\\r\\n * }\\r\\n * ];\\r\\n */\\r\\n@Injectable({\\r\\n  providedIn: \'root\'\\r\\n})\\r\\nexport class NzxAuthGuardService implements CanActivate, CanActivateChild, CanLoad {\\r\\n  protected hasAuth: Required<NzxAntdService>[\'hasAuth\'] = () => of(true);\\r\\n\\r\\n  constructor(private antdService: NzxAntdService, private router: Router, private injector: Injector) {\\r\\n    if (this.antdService.hasAuth) {\\r\\n      this.hasAuth = this.antdService.hasAuth;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private process(data: Data): Observable<boolean> {\\r\\n    const guard: AuthGuardType = data.guard;\\r\\n\\r\\n    if (NzxUtils.isFunction(guard)) {\\r\\n      return guard(this.router, this.injector, this.antdService);\\r\\n    }\\r\\n\\r\\n    return this.hasAuth(guard.auth).pipe(\\r\\n      tap(auth => {\\r\\n        const url = guard.noAuthUrl || this.antdService.noAuthUrl;\\r\\n        if (!auth && url) {\\r\\n          this.router.navigateByUrl(url);\\r\\n        }\\r\\n      })\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // lazy loading\\r\\n  canLoad(route: Route): Observable<boolean> {\\r\\n    return this.process(route.data!);\\r\\n  }\\r\\n\\r\\n  // all children route\\r\\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\\r\\n    return this.canActivate(childRoute, state);\\r\\n  }\\r\\n\\r\\n  // route\\r\\n  canActivate(route: ActivatedRouteSnapshot, _state: RouterStateSnapshot | null): Observable<boolean> {\\r\\n    return this.process(route.data);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 权限路由守卫 使用函数处理\\r\\n */\\r\\nexport type AuthGuardFnType = (router: Router, injector: Injector, antdService: NzxAntdService) => Observable<boolean>;\\r\\n/**\\r\\n * 权限路由守卫配置\\r\\n */\\r\\nexport type AuthGuardType<T = NzSafeAny> = AuthGuardFnType | T;\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""},{"name":"router","type":"Router","deprecated":false,"deprecationMessage":""},{"name":"injector","type":"Injector","deprecated":false,"deprecationMessage":""}],"line":42,"jsdoctags":[{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"router","type":"Router","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"injector","type":"Injector","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"guard"}],"interceptors":[{"name":"HttpCustomServerErrorInterceptor","id":"injectable-HttpCustomServerErrorInterceptor-17f98bb22d5101a93c075c5e988268827d5e14834c3a1fb1e018af0970f706078d43aefc745cf685f7c042386d90567eba4ae16406242ae7afc94d2d8dc0e23e","file":"lib/http-interceptor/http-custom-server-error.interceptor.ts","properties":[{"name":"settings","deprecated":false,"deprecationMessage":"","type":"Required<ResponseSetting>","optional":false,"description":"","line":15,"modifierKind":[122,144]}],"methods":[{"name":"handleError","args":[{"name":"error","type":"HttpError","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":33,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n只抛出自定义异常, 对于http内部异常由拦截器统一处理\\n","description":"<p>只抛出自定义异常, 对于http内部异常由拦截器统一处理</p>\\n","jsdoctags":[{"name":{"pos":1214,"end":1219,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"error"},"type":"HttpError","deprecated":false,"deprecationMessage":"","tagName":{"pos":1208,"end":1213,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"intercept","args":[{"name":"req","type":"HttpRequest<T>","deprecated":false,"deprecationMessage":""},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<HttpEvent<T>>","typeParameters":["T"],"line":25,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>在 http-error-interceptor 后，进行自定义错误处理。</p>\\n","rawdescription":"\\n\\n在 http-error-interceptor 后，进行自定义错误处理。\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \'@angular/common/http\';\\r\\nimport { Observable, throwError, catchError } from \'rxjs\';\\r\\nimport { HttpNotifyService } from \'./http-notify.service\';\\r\\nimport { HttpError } from \'./http.model\';\\r\\nimport { LogoutService } from \'./logout.service\';\\r\\nimport { DEFAULT_RESPONSE_SETTING, NzxAntdService, ResponseSetting } from \'@xmagic/nzx-antd\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\n\\r\\n/**\\r\\n * 在 http-error-interceptor 后，进行自定义错误处理。\\r\\n */\\r\\n@Injectable()\\r\\nexport class HttpCustomServerErrorInterceptor implements HttpInterceptor {\\r\\n  protected readonly settings: Required<ResponseSetting>;\\r\\n\\r\\n  constructor(\\r\\n    protected notify: HttpNotifyService,\\r\\n    protected logoutNotify: LogoutService,\\r\\n    protected antdService: NzxAntdService\\r\\n  ) {\\r\\n    this.settings = NzxUtils.extend({}, DEFAULT_RESPONSE_SETTING, this.antdService.response) as Required<ResponseSetting>;\\r\\n  }\\r\\n\\r\\n  intercept<T>(req: HttpRequest<T>, next: HttpHandler): Observable<HttpEvent<T>> {\\r\\n    return next.handle(req).pipe(catchError(error => this.handleError(error)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 只抛出自定义异常, 对于http内部异常由拦截器统一处理\\r\\n   * @param error\\r\\n   */\\r\\n  handleError(error: HttpError) {\\r\\n    if (error.httpError) {\\r\\n      this.notify.notifyHttpOriginError(error);\\r\\n      // 登录超时  强制下线\\r\\n    } else if (this.settings.timeout(error) || this.settings.forceLogout(error)) {\\r\\n      this.logoutNotify.notifyLogin(error);\\r\\n    } else if (this.settings.defaultError(error)) {\\r\\n      this.notify.notifyCustomServerError(error);\\r\\n    }\\r\\n    return throwError(() => error);\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"notify","type":"HttpNotifyService","deprecated":false,"deprecationMessage":""},{"name":"logoutNotify","type":"LogoutService","deprecated":false,"deprecationMessage":""},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":15,"jsdoctags":[{"name":"notify","type":"HttpNotifyService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"logoutNotify","type":"LogoutService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"interceptor"},{"name":"HttpErrorInterceptor","id":"injectable-HttpErrorInterceptor-2f5406b790321d4e3d96b876cb84884d9ece82fdc4ec72bae14f695ccc33203bb82a127cb3d2060692e7460b208fc7c4fa4e05324ad087c7aab583ba9ad03243","file":"lib/http-interceptor/http-error.interceptor.ts","properties":[],"methods":[{"name":"handleError","args":[{"name":"errorResponse","type":"HttpErrorResponse","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":22,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n将错误响应包装为统一格式\\n","description":"<p>将错误响应包装为统一格式</p>\\n","jsdoctags":[{"name":"errorResponse","type":"HttpErrorResponse","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"intercept","args":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":""},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<HttpEvent<NzSafeAny>>","typeParameters":[],"line":15,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>http 请求发生错误后进行处理</p>\\n","rawdescription":"\\n\\nhttp 请求发生错误后进行处理\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \'@angular/common/http\';\\r\\nimport { Observable, throwError } from \'rxjs\';\\r\\nimport { catchError } from \'rxjs/operators\';\\r\\nimport { HttpError } from \'./http.model\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\n/**\\r\\n * http 请求发生错误后进行处理\\r\\n */\\r\\n@Injectable()\\r\\nexport class HttpErrorInterceptor implements HttpInterceptor {\\r\\n  constructor() {}\\r\\n\\r\\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\\r\\n    return next.handle(req).pipe(catchError(error => this.handleError(error)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 将错误响应包装为统一格式\\r\\n   */\\r\\n  handleError(errorResponse: HttpErrorResponse) {\\r\\n    const { status: code, error, message } = errorResponse;\\r\\n    return throwError(() => new HttpError(true, code, message, error));\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":12},"type":"interceptor"},{"name":"HttpHeaderInterceptor","id":"injectable-HttpHeaderInterceptor-b904d641349928d238be06be0b039706fd80397f43de2d4f2f8bb7e1432591d8a68fc6fb858be07f5ff8d7416adfd1621464edbbf615276ee43fda910c4b1996","file":"lib/http-interceptor/http-header.interceptor.ts","properties":[],"methods":[{"name":"intercept","args":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":""},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<HttpEvent<NzSafeAny>>","typeParameters":[],"line":14,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>对请求头进行处理</p>\\n","rawdescription":"\\n\\n对请求头进行处理\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \'@angular/common/http\';\\r\\nimport { Observable } from \'rxjs\';\\r\\nimport { NzxAntdService } from \'@xmagic/nzx-antd\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\n/**\\r\\n * 对请求头进行处理\\r\\n */\\r\\n@Injectable()\\r\\nexport class HttpHeaderInterceptor implements HttpInterceptor {\\r\\n  constructor(protected antdService: NzxAntdService) {}\\r\\n\\r\\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\\r\\n    const headers: Record<string, string> = { \'X-Requested-With\': \'XMLHttpRequest\' };\\r\\n    if (\\r\\n      !req.headers.has(\'Content-Type\') &&\\r\\n      !(req.body instanceof FormData || req.body instanceof ArrayBuffer || req.body instanceof Blob)\\r\\n    ) {\\r\\n      headers[\'Content-Type\'] =\\r\\n        this.antdService.contentType === \'form\'\\r\\n          ? \'application/x-www-form-urlencoded\'\\r\\n          : \'application/json;charset=utf-8\';\\r\\n    }\\r\\n    const clone = req.clone({\\r\\n      setHeaders: headers\\r\\n    });\\r\\n    return next.handle(clone);\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":11,"jsdoctags":[{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"interceptor"},{"name":"HttpLoadingInterceptor","id":"injectable-HttpLoadingInterceptor-2a6eeba5708b204d8c458440707b6addbbfd542cba90b03e078eb764603d99b7c68d693aaa03eb1179c3449e60514119d2e06d567d7676eb6c1c0d2773c60fed","file":"lib/http-interceptor/http-loading.interceptor.ts","properties":[{"name":"requestCount","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"","line":15,"modifierKind":[121]},{"name":"showStatusChange","defaultValue":"new Subject<boolean>()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":14,"modifierKind":[121]}],"methods":[{"name":"hide","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":40,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n隐藏loading\\n","description":"<p>隐藏loading</p>\\n"},{"name":"intercept","args":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":""},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<HttpEvent<NzSafeAny>>","typeParameters":[],"line":21,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"show","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":32,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示loading\\n","description":"<p>显示loading</p>\\n"}],"deprecated":false,"deprecationMessage":"","description":"<p>http 请求发送时，调用 loading service 显示加载中图标或者做一些其它处理。</p>\\n","rawdescription":"\\n\\nhttp 请求发送时，调用 loading service 显示加载中图标或者做一些其它处理。\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \'@angular/common/http\';\\r\\nimport { Observable, Subject } from \'rxjs\';\\r\\nimport { filter, finalize } from \'rxjs/operators\';\\r\\nimport { HttpLoadingService } from \'./http-loading.service\';\\r\\nimport { LOADING_ENABLED } from \'@xmagic/nzx-antd/service\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n/**\\r\\n * http 请求发送时，调用 loading service 显示加载中图标或者做一些其它处理。\\r\\n */\\r\\n@Injectable()\\r\\nexport class HttpLoadingInterceptor implements HttpInterceptor {\\r\\n  private showStatusChange = new Subject<boolean>();\\r\\n  private requestCount = 0;\\r\\n\\r\\n  constructor(private loadingService: HttpLoadingService) {\\r\\n    this.loadingService.init(this.showStatusChange.pipe(filter(() => this.requestCount === 0)));\\r\\n  }\\r\\n\\r\\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\\r\\n    const show = req.context.get(LOADING_ENABLED);\\r\\n    if (show) {\\r\\n      this.show();\\r\\n    }\\r\\n    return next.handle(req).pipe(finalize(() => show && this.hide()));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 显示loading\\r\\n   */\\r\\n  show() {\\r\\n    this.showStatusChange.next(true);\\r\\n    this.requestCount++;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 隐藏loading\\r\\n   */\\r\\n  hide() {\\r\\n    this.requestCount--;\\r\\n    this.showStatusChange.next(false);\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"loadingService","type":"HttpLoadingService","deprecated":false,"deprecationMessage":""}],"line":15,"jsdoctags":[{"name":"loadingService","type":"HttpLoadingService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"interceptor"},{"name":"HttpParamsInterceptor","id":"injectable-HttpParamsInterceptor-89f1d76f41584890003218c71f0104b9196597fa650dc9acd36c9fa8e2a3cea432030577abbe4f76061d5d44f6b35514f05efcfb287a01897af01dc3b13ac720","file":"lib/http-interceptor/http-params.interceptor.ts","properties":[],"methods":[{"name":"intercept","args":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":""},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<HttpEvent<NzSafeAny>>","typeParameters":[],"line":15,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"processGetParams","args":[{"name":"params","type":"HttpParams","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":28,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"params","type":"HttpParams","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"processParameters","args":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":19,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>请求参数处理</p>\\n","rawdescription":"\\n\\n请求参数处理\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpParams, HttpRequest } from \'@angular/common/http\';\\r\\nimport { Observable } from \'rxjs\';\\r\\nimport { HttpDefaultCodec } from \'./http-default-encoder\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\n\\r\\n/**\\r\\n * 请求参数处理\\r\\n */\\r\\n@Injectable()\\r\\nexport class HttpParamsInterceptor implements HttpInterceptor {\\r\\n  constructor() {}\\r\\n\\r\\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\\r\\n    return next.handle(this.processParameters(req));\\r\\n  }\\r\\n\\r\\n  processParameters(req: HttpRequest<NzSafeAny>) {\\r\\n    if (req.params == null) {\\r\\n      return req;\\r\\n    }\\r\\n    return req.clone({\\r\\n      params: this.processGetParams(req.params)\\r\\n    });\\r\\n  }\\r\\n\\r\\n  processGetParams(params: HttpParams) {\\r\\n    const result: Record<string, NzSafeAny> = { r: Math.random() };\\r\\n\\r\\n    params.keys().reduce((acc, key) => {\\r\\n      const values = params.getAll(key);\\r\\n      if (values) {\\r\\n        acc[key] = values.length > 1 ? values : values[0];\\r\\n        return acc;\\r\\n      }\\r\\n      return acc;\\r\\n    }, result);\\r\\n\\r\\n    return new HttpParams({ fromString: NzxUtils.serialize(result), encoder: HttpDefaultCodec });\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":12},"type":"interceptor"},{"name":"HttpResponseParseInterceptor","id":"injectable-HttpResponseParseInterceptor-66cf38c2550bd4273e45bcbbc3ddeb9318cb4d0633dbdfaed812d9e9b7a87d85c164c3f37dd1f71a3b93b1bc72da4e7fddf2226e6948d3a50eea803a6e149dca","file":"lib/http-interceptor/http-response-parse.interceptor.ts","properties":[{"name":"settings","deprecated":false,"deprecationMessage":"","type":"Required<ResponseSetting>","optional":false,"description":"","line":21,"modifierKind":[122,144]}],"methods":[{"name":"intercept","args":[{"name":"req","type":"HttpRequest<T>","deprecated":false,"deprecationMessage":""},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<HttpEvent<T>>","typeParameters":["T"],"line":26,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"processData","args":[{"name":"subscriber","type":"Subscriber<HttpEvent<T>>","deprecated":false,"deprecationMessage":""},{"name":"req","type":"HttpRequest<T>","deprecated":false,"deprecationMessage":""},{"name":"response","type":"HttpResponse<ResponseModel>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":["T"],"line":40,"deprecated":false,"deprecationMessage":"","modifierKind":[122],"jsdoctags":[{"name":"subscriber","type":"Subscriber<HttpEvent<T>>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"req","type":"HttpRequest<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"response","type":"HttpResponse<ResponseModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>处理服务器返回的数据，改变其结构。</p>\\n","rawdescription":"\\n\\n处理服务器返回的数据，改变其结构。\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport {\\r\\n  HttpEvent,\\r\\n  HttpEventType,\\r\\n  HttpHandler,\\r\\n  HttpInterceptor,\\r\\n  HttpRequest,\\r\\n  HttpResponse\\r\\n} from \'@angular/common/http\';\\r\\nimport { Observable, Subscriber } from \'rxjs\';\\r\\nimport { switchMap } from \'rxjs/operators\';\\r\\nimport { HttpError, ResponseModel } from \'./http.model\';\\r\\nimport { DEFAULT_RESPONSE_SETTING, NzxAntdService, ResponseSetting } from \'@xmagic/nzx-antd\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\n\\r\\n/**\\r\\n * 处理服务器返回的数据，改变其结构。\\r\\n */\\r\\n@Injectable()\\r\\nexport class HttpResponseParseInterceptor implements HttpInterceptor {\\r\\n  protected readonly settings: Required<ResponseSetting>;\\r\\n  constructor(protected antdService: NzxAntdService) {\\r\\n    this.settings = NzxUtils.extend({}, DEFAULT_RESPONSE_SETTING, this.antdService.response) as Required<ResponseSetting>;\\r\\n  }\\r\\n\\r\\n  intercept<T>(req: HttpRequest<T>, next: HttpHandler): Observable<HttpEvent<T>> {\\r\\n    return next.handle(req).pipe(\\r\\n      switchMap(response => {\\r\\n        return new Observable<HttpEvent<T>>(observ => {\\r\\n          if (response.type !== HttpEventType.Response) {\\r\\n            observ.next(response);\\r\\n            return;\\r\\n          }\\r\\n          this.processData<T>(observ, req, response);\\r\\n        });\\r\\n      })\\r\\n    );\\r\\n  }\\r\\n\\r\\n  protected processData<T>(\\r\\n    subscriber: Subscriber<HttpEvent<T>>,\\r\\n    req: HttpRequest<T>,\\r\\n    response: HttpResponse<ResponseModel>\\r\\n  ) {\\r\\n\\r\\n    const contentType = (response.headers.get(\'content-type\') || \'\').toLowerCase();\\r\\n\\r\\n    const isJsonResponse = contentType.indexOf(\'application/json\') !== -1;\\r\\n    if (!isJsonResponse) {\\r\\n      subscriber.next(response as HttpResponse<T>);\\r\\n      subscriber.complete();\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const { data: dataProp, code: codeProp, message: messageProp, success: successProp } = this.settings;\\r\\n\\r\\n    // 处理下载文件错误\\r\\n    if (isJsonResponse && response.body instanceof Blob) {\\r\\n      const reader = new FileReader();\\r\\n      reader.onload = () => {\\r\\n        const err = JSON.parse(reader.result as string) as ResponseModel<T>;\\r\\n        const httpError = new HttpError(false, NzxUtils.get(err, codeProp, 0), NzxUtils.get(err, messageProp), err);\\r\\n        subscriber.error(httpError);\\r\\n      };\\r\\n      reader.readAsText(response.body);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const body = response.body || {};\\r\\n    if (successProp(response)) {\\r\\n      const resp = response.clone({ body: dataProp ? NzxUtils.get(body, dataProp) : body });\\r\\n      subscriber.next(resp);\\r\\n      subscriber.complete();\\r\\n    } else {\\r\\n      const httpError = new HttpError(false, NzxUtils.get(body, codeProp, 0), NzxUtils.get(body, messageProp), body);\\r\\n      subscriber.error(httpError);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":21,"jsdoctags":[{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"interceptor"},{"name":"HttpUrlInterceptor","id":"injectable-HttpUrlInterceptor-50b6f89a774a664ec1fd061b02bff57a2906c3ccf3c0935d94df5ae3bac2d9841b2cf7fae9d03bfdb343620d62800d3cef28b1f7060819256c91082dc56aef29","file":"lib/http-interceptor/http-url.interceptor.ts","properties":[],"methods":[{"name":"intercept","args":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":""},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<HttpEvent<NzSafeAny>>","typeParameters":[],"line":14,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"next","type":"HttpHandler","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"processUrl","args":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"HttpRequest<NzSafeAny>","typeParameters":[],"line":18,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"req","type":"HttpRequest<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>处理 URL</p>\\n","rawdescription":"\\n\\n处理 URL\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \'@angular/common/http\';\\r\\nimport { Observable } from \'rxjs\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { HttpRequestOptions, NzxAntdService } from \'@xmagic/nzx-antd\';\\r\\n\\r\\n/**\\r\\n * 处理 URL\\r\\n */\\r\\n@Injectable()\\r\\nexport class HttpUrlInterceptor implements HttpInterceptor {\\r\\n  constructor(protected antdService: NzxAntdService) {}\\r\\n\\r\\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\\r\\n    return next.handle(this.processUrl(req));\\r\\n  }\\r\\n\\r\\n  processUrl(req: HttpRequest<NzSafeAny>): HttpRequest<NzSafeAny> {\\r\\n    let url = req.url;\\r\\n    if (!/^http/i.test(url)) {\\r\\n      if (!/^\\\\//.test(url)) {\\r\\n        url = \'/\' + url;\\r\\n      }\\r\\n      url = (this.antdService.basePath || \'\') + url;\\r\\n    }\\r\\n\\r\\n    // 使用自定义请求处理器\\r\\n    if (this.antdService.handleRequest) {\\r\\n      const newReq = this.antdService.handleRequest(req, url);\\r\\n      if (newReq) {\\r\\n        if ((newReq as HttpRequest<NzSafeAny>).clone) {\\r\\n          return newReq as HttpRequest<NzSafeAny>;\\r\\n        }\\r\\n        const option = newReq as HttpRequestOptions;\\r\\n        if (!option.url) {\\r\\n          option.url = url;\\r\\n        }\\r\\n        return req.clone(option);\\r\\n      }\\r\\n    }\\r\\n    return req.clone({ url });\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":11,"jsdoctags":[{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"interceptor"}],"classes":[{"name":"AuthContext","id":"class-AuthContext-bd1612d1e33eadfc4c49db9d0c7a9fa2c458ab1fc1a9f2c11a2aae97cd92e8d271761213d1aa833fc77d6d9ad1ba33494038114eb88f8481d6b3fbd9e1b4503b","file":"lib/directive/auth.directive.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Directive, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from \'@angular/core\';\\r\\nimport { of, Subscription } from \'rxjs\';\\r\\nimport { NzxAntdService } from \'@xmagic/nzx-antd\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\n/**\\r\\n * 权限指令, 有权限渲染模板,否则渲染else模板\\r\\n * @example\\r\\n * <button *auth=\\"[\'code1\', \'code2\']; else notAuth\\">有权限时显示</button>\\r\\n * <button *auth=\\"\'code1\'; else notAuth\\">有权限时显示</button>\\r\\n * <ng-template #notAuth>没有权限时显示</ng-template>\\r\\n */\\r\\n@Directive({\\r\\n  selector: \'[auth]\'\\r\\n})\\r\\nexport class AuthDirective<T = unknown> implements OnDestroy {\\r\\n  /** @internal */\\r\\n  static authUseIfTypeGuard: void;\\r\\n  static ngTemplateGuard_auth: \'binding\';\\r\\n  private readonly changeSubscription?: Subscription;\\r\\n  private authSubscription?: Subscription;\\r\\n\\r\\n  protected _context: AuthContext<T> = new AuthContext<T>();\\r\\n  protected _thenTemplateRef: TemplateRef<AuthContext<T>> | null = null;\\r\\n  protected _elseTemplateRef: TemplateRef<AuthContext<T>> | null = null;\\r\\n  protected _thenViewRef: EmbeddedViewRef<AuthContext<T>> | null = null;\\r\\n  protected _elseViewRef: EmbeddedViewRef<AuthContext<T>> | null = null;\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * 为 `auth` 将要渲染的模板确保正确的上下文类型。\\r\\n   * 该方法用于向 Ivy 模板类型检查编译器发出信号，即 `auth` 结构化指令会使用特定的上下文类型渲染其模板。\\r\\n   *\\r\\n   */\\r\\n  static ngTemplateContextGuard<T>(\\r\\n    dir: AuthDirective<T>,\\r\\n    ctx: NzSafeAny\\r\\n  ): ctx is AuthContext<Exclude<T, false | 0 | \'\' | null | undefined>> {\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  protected hasAuth: Required<NzxAntdService>[\'hasAuth\'] = () => of(true);\\r\\n\\r\\n  constructor(\\r\\n    protected _viewContainer: ViewContainerRef,\\r\\n    public templateRef: TemplateRef<AuthContext<T>>,\\r\\n    public antdService: NzxAntdService\\r\\n  ) {\\r\\n    this._thenTemplateRef = templateRef;\\r\\n\\r\\n    if (this.antdService.authChange) {\\r\\n      this.changeSubscription = this.antdService.authChange().subscribe(() => this._updateView());\\r\\n    }\\r\\n\\r\\n    if (this.antdService.hasAuth) {\\r\\n      this.hasAuth = this.antdService.hasAuth;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 布尔表达式，将其作为显示模板的条件进行计算。\\r\\n   *\\r\\n   */\\r\\n  @Input()\\r\\n  set auth(condition: T) {\\r\\n    this._context.$implicit = this._context.auth = condition;\\r\\n    this._updateView();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 当此条件表达式计算为 true 时要显示的模板。\\r\\n   */\\r\\n  @Input()\\r\\n  set authThen(templateRef: TemplateRef<AuthContext<T>> | null) {\\r\\n    assertTemplate(\'authThen\', templateRef);\\r\\n    this._thenTemplateRef = templateRef;\\r\\n    this._thenViewRef = null; // clear previous view if any.\\r\\n    this._updateView();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 当此条件表达式计算为 false 时要显示的模板。\\r\\n   */\\r\\n  @Input()\\r\\n  set authElse(templateRef: TemplateRef<AuthContext<T>> | null) {\\r\\n    assertTemplate(\'authElse\', templateRef);\\r\\n    this._elseTemplateRef = templateRef;\\r\\n    this._elseViewRef = null; // clear previous view if any.\\r\\n    this._updateView();\\r\\n  }\\r\\n\\r\\n  protected _updateView() {\\r\\n    if (this.authSubscription) {\\r\\n      this.authSubscription.unsubscribe();\\r\\n      this.authSubscription = undefined;\\r\\n    }\\r\\n    this.authSubscription = this.hasAuth(this._context.$implicit).subscribe(auth => {\\r\\n      if (this.canRender(auth, this._context.$implicit)) {\\r\\n        if (!this._thenViewRef) {\\r\\n          this._viewContainer.clear();\\r\\n          this._elseViewRef = null;\\r\\n          if (this._thenTemplateRef) {\\r\\n            this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        if (!this._elseViewRef) {\\r\\n          this._viewContainer.clear();\\r\\n          this._thenViewRef = null;\\r\\n          if (this._elseTemplateRef) {\\r\\n            this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否允许渲染\\r\\n   * @param hasAuth 是否有权限\\r\\n   * @param value 权限码\\r\\n   * @protected\\r\\n   */\\r\\n  protected canRender(hasAuth: boolean, value: T) {\\r\\n    return hasAuth;\\r\\n  }\\r\\n\\r\\n  ngOnDestroy(): void {\\r\\n    if (this.changeSubscription) {\\r\\n      this.changeSubscription.unsubscribe();\\r\\n    }\\r\\n    if (this.authSubscription) {\\r\\n      this.authSubscription.unsubscribe();\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @publicApi\\r\\n */\\r\\nexport class AuthContext<T = unknown> {\\r\\n  public $implicit: T = null!;\\r\\n  public auth: T = null!;\\r\\n}\\r\\n\\r\\nfunction assertTemplate(property: string, templateRef: TemplateRef<NzSafeAny> | null): void {\\r\\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\\r\\n  if (!isTemplateRefOrNull) {\\r\\n    throw new Error(`${property} must be a TemplateRef, but received \'${templateRef}\'.`);\\r\\n  }\\r\\n}\\r\\n","properties":[{"name":"$implicit","defaultValue":"null!","deprecated":false,"deprecationMessage":"","type":"T","optional":false,"description":"","line":142,"modifierKind":[123]},{"name":"auth","defaultValue":"null!","deprecated":false,"deprecationMessage":"","type":"T","optional":false,"description":"","line":143,"modifierKind":[123]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"BaseControl","id":"class-BaseControl-cb8fb97d879a7502a50421566f311fce59a7c5e23abdd29677d69932ad035d694541073c60d2e0053d1e7b8d3e7504700253638bcac7917d25d4cf1800120624","file":"lib/util/base-control.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export abstract class BaseControl<T> {\\r\\n  protected nzxDisabled?: boolean;\\r\\n  onChange: (value: T) => void = () => null;\\r\\n  onTouched: () => void = () => null;\\r\\n\\r\\n  registerOnChange(fn: (_: T) => void): void {\\r\\n    this.onChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnTouched(fn: () => void): void {\\r\\n    this.onTouched = fn;\\r\\n  }\\r\\n\\r\\n  setDisabledState?(isDisabled: boolean): void {\\r\\n    this.nzxDisabled = isDisabled;\\r\\n  }\\r\\n}\\r\\n","properties":[{"name":"nzxDisabled","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":2,"modifierKind":[122]},{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":3},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":4}],"methods":[{"name":"registerOnChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"T","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":6,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"T","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":10,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":true,"returnType":"void","typeParameters":[],"line":14,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"FormUtilsClass","id":"class-FormUtilsClass-5684a87b043e20c6b0d21c0e561f82bce02737686526a8cce7c9875bcb201dd3767fdbeaf480f7d162538c97009fb8a9c604cc62aa685329b088cdbaa76c2706","file":"lib/util/form-utils.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { AbstractControl, FormArray, FormControl, FormGroup, ValidationErrors, ValidatorFn } from \'@angular/forms\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzxUtils } from \'./utils\';\\r\\n\\r\\n/**\\r\\n * 表单工具\\r\\n */\\r\\nexport class FormUtilsClass {\\r\\n  /**\\r\\n   * 遍历表单控件\\r\\n   * @param form 表单或者表单元素\\r\\n   * @param callback 回调函数\\r\\n   */\\r\\n  forEachFormControl(form: AbstractControl, callback: (ctrl: AbstractControl) => void) {\\r\\n    if (form instanceof FormGroup) {\\r\\n      callback(form);\\r\\n      for (const i in form.controls) {\\r\\n        const ctrl = form.controls[i];\\r\\n        if (ctrl instanceof FormControl) {\\r\\n          callback(ctrl);\\r\\n        } else {\\r\\n          this.forEachFormControl(ctrl, callback);\\r\\n        }\\r\\n      }\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (form instanceof FormArray) {\\r\\n      callback(form);\\r\\n      for (let i = 0; i < form.length; i++) {\\r\\n        const ctrl = form.at(i);\\r\\n        if (ctrl instanceof FormControl) {\\r\\n          callback(ctrl);\\r\\n        } else {\\r\\n          this.forEachFormControl(ctrl, callback);\\r\\n        }\\r\\n      }\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (form instanceof FormControl) {\\r\\n      callback(form);\\r\\n      return;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 执行验证\\r\\n   * @param form 表单\\r\\n   * @param opts 配置\\r\\n   */\\r\\n  validate(\\r\\n    form: AbstractControl,\\r\\n    opts: {\\r\\n      onlySelf?: boolean;\\r\\n      emitEvent?: boolean;\\r\\n      updateValueAndValidity?: boolean;\\r\\n    } = { updateValueAndValidity: false }\\r\\n  ): boolean {\\r\\n    this.forEachFormControl(form, ctrl => {\\r\\n      ctrl.markAsDirty(opts);\\r\\n      opts.updateValueAndValidity && ctrl.updateValueAndValidity(opts);\\r\\n    });\\r\\n    return form.valid;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 清空错误信息\\r\\n   */\\r\\n  clearError(form: AbstractControl): void {\\r\\n    this.forEachFormControl(form, ctrl => ctrl.setErrors(null));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取错误信息\\r\\n   * @param control\\r\\n   */\\r\\n  getMessage(control: AbstractControl): string | null {\\r\\n    if (!control.errors) {\\r\\n      return null;\\r\\n    }\\r\\n\\r\\n    for (const key in control.errors) {\\r\\n      return control.errors[key]?.message || \'输入不正确\';\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 必填验证\\r\\n   * @param message 错误信息\\r\\n   * @param hasValue 是否有值函数判断\\r\\n   */\\r\\n  required<T = NzSafeAny>(message: string = \'不能为空\', hasValue: (value: T) => boolean = value => !!value): ValidatorFn {\\r\\n    return (control: AbstractControl) => {\\r\\n      return hasValue(control.value) ? null : { required: { message, value: control.value } };\\r\\n    };\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 根据指定函数验证\\r\\n   * @param operator 操作函数\\r\\n   * @param errMessage 错误信息\\r\\n   */\\r\\n  singleValidator<T>(operator: (value: T) => boolean, errMessage: ValidationErrors): ValidatorFn {\\r\\n    return (control: AbstractControl) => {\\r\\n      if (control.value == null || control.value.length === 0) {\\r\\n        return null;\\r\\n      }\\r\\n      return operator(control.value) ? null : errMessage;\\r\\n    };\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 根据正则表达式验证\\r\\n   * @param exp 正则表达式\\r\\n   * @param message 错误信息\\r\\n   */\\r\\n  pattern(exp: RegExp | string, message: string): ValidatorFn {\\r\\n    const reg = NzxUtils.isString(exp) ? new RegExp(exp, \'mig\') : exp;\\r\\n    return this.singleValidator<string>(v => reg.test(v), { pattern: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 小于验证\\r\\n   * @param num 数字\\r\\n   * @param message 错误信息\\r\\n   */\\r\\n  lt(num: number, message: string): ValidatorFn {\\r\\n    return this.singleValidator<string>(v => Number(v) < num, { lt: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 小于等于验证\\r\\n   * @param num 数字\\r\\n   * @param message 错误信息\\r\\n   */\\r\\n  lte(num: number, message: string): ValidatorFn {\\r\\n    return this.singleValidator<string>(v => Number(v) <= num, { lte: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 大于验证\\r\\n   * @param num 数字\\r\\n   * @param message 错误信息\\r\\n   */\\r\\n  gt(num: number, message: string): ValidatorFn {\\r\\n    return this.singleValidator<string>(v => Number(v) > num, { gt: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 大于等于验证\\r\\n   * @param num 数字\\r\\n   * @param message 错误信息\\r\\n   */\\r\\n  gte(num: number, message: string): ValidatorFn {\\r\\n    return this.singleValidator<string>(v => Number(v) >= num, { gte: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 包含指定字符串验证\\r\\n   * @param str 字符串\\r\\n   * @param ignore 忽略大小写\\r\\n   * @param message 错误信息\\r\\n   */\\r\\n  contains(str: string, ignore: boolean, message: string): ValidatorFn {\\r\\n    const newStr = ignore ? str.toLowerCase() : str;\\r\\n    return this.singleValidator<string>(v => (ignore ? v.toLowerCase() : v).indexOf(newStr) !== -1, {\\r\\n      contains: { message }\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * min <= x <= max 验证\\r\\n   * @param min 最小值\\r\\n   * @param max 最大值\\r\\n   * @param message 错误信息\\r\\n   */\\r\\n  between(min: number, max: number, message: string): ValidatorFn {\\r\\n    return this.singleValidator<string>(\\r\\n      value => {\\r\\n        const v = Number(value);\\r\\n        return v >= min && v <= max;\\r\\n      },\\r\\n      { between: { message } }\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 数字校验\\r\\n   * @param minus 是否允许负数\\r\\n   * @param fraction 保留小数有效数字位数\\r\\n   * @param message 错误提示信息\\r\\n   */\\r\\n  number(minus?: boolean, fraction?: number, message: string = \'数字格式错误\'): ValidatorFn {\\r\\n    return this.singleValidator<string>(value => NzxUtils.isNum(value, minus, fraction), { number: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 校验手机号（中国）\\r\\n   * @param message 错误提示信息\\r\\n   */\\r\\n  mobile(message: string = \'手机号格式错误\'): ValidatorFn {\\r\\n    return this.singleValidator<string>(value => NzxUtils.isMobile(value), { mobile: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 校验邮箱\\r\\n   * @param message 错误提示信息\\r\\n   */\\r\\n  email(message: string = \'邮箱格式错误\'): ValidatorFn {\\r\\n    return this.singleValidator<string>(value => NzxUtils.isEmail(value), { email: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 校验ip\\r\\n   * @param message 错误提示信息\\r\\n   */\\r\\n  ip(message: string = \'IP格式错误\'): ValidatorFn {\\r\\n    return this.singleValidator<string>(value => NzxUtils.isIp(value), { ip: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 校验url,支持ip v4, ip v6\\r\\n   * @param message 错误提示信息\\r\\n   */\\r\\n  url(message: string = \'URL格式错误\'): ValidatorFn {\\r\\n    return this.singleValidator<string>(value => NzxUtils.isUrl(value), { url: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 校验中文\\r\\n   * @param message 错误提示信息\\r\\n   */\\r\\n  chinese(message: string = \'只允许输入中文字符\'): ValidatorFn {\\r\\n    return this.singleValidator<string>(value => NzxUtils.isChinese(value), { chinese: { message } });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 验证两个字段\\r\\n   * @param form 表单\\r\\n   * @param otherField 另一个被验证的字段名称\\r\\n   * @param compare 比较器\\r\\n   * @param errMessage  错误提示\\r\\n   */\\r\\n  twoControl(\\r\\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\\r\\n    otherField: Array<string | number> | string,\\r\\n    compare: (v1: NzSafeAny, v2: NzSafeAny) => boolean,\\r\\n    errMessage: ValidationErrors\\r\\n  ): ValidatorFn {\\r\\n    const fn = NzxUtils.isFunction(form) ? form : () => form;\\r\\n    return (control: AbstractControl): ValidationErrors | null => {\\r\\n      if (!control?.value) {\\r\\n        return null;\\r\\n      }\\r\\n\\r\\n      const other = fn().get(otherField);\\r\\n      if (!other?.value) {\\r\\n        return null;\\r\\n      }\\r\\n\\r\\n      if (compare(other?.value, control?.value)) {\\r\\n        if (!other.valid) {\\r\\n          other.updateValueAndValidity();\\r\\n        }\\r\\n        return null;\\r\\n      }\\r\\n      return errMessage;\\r\\n    };\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 两个字段相等验证\\r\\n   * @param form 表单\\r\\n   * @param otherField 另一个被验证的字段名\\r\\n   * @param message 提示信息\\r\\n   */\\r\\n  equalControl(\\r\\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\\r\\n    otherField: Array<string | number> | string,\\r\\n    message: string\\r\\n  ): ValidatorFn {\\r\\n    const errMessage = { equalValidator: { message } };\\r\\n    return this.twoControl(form, otherField, (v1, v2) => v1 === v2, errMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 大于另一个字段验证\\r\\n   * @param form 表单\\r\\n   * @param otherField 另一个被验证的字段名\\r\\n   * @param message 提示信息\\r\\n   */\\r\\n  gtControl(form: FormGroup | FormArray, otherField: Array<string | number> | string, message: string): ValidatorFn {\\r\\n    const errMessage = { gtValidator: { message } };\\r\\n    return this.twoControl(form, otherField, (v1, v2) => Number(v1) > Number(v2), errMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 大于等于另一个字段验证\\r\\n   * @param form 表单\\r\\n   * @param otherField 另一个被验证的字段名\\r\\n   * @param message 提示信息\\r\\n   */\\r\\n  gteControl(\\r\\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\\r\\n    otherField: Array<string | number> | string,\\r\\n    message: string\\r\\n  ): ValidatorFn {\\r\\n    const errMessage = { gteValidator: { message } };\\r\\n    return this.twoControl(form, otherField, (v1, v2) => Number(v1) >= Number(v2), errMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 小于于另一个字段验证\\r\\n   * @param form 表单\\r\\n   * @param otherField 另一个被验证的字段名\\r\\n   * @param message 提示信息\\r\\n   */\\r\\n  ltControl(\\r\\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\\r\\n    otherField: Array<string | number> | string,\\r\\n    message: string\\r\\n  ): ValidatorFn {\\r\\n    const errMessage = { ltValidator: { message } };\\r\\n    return this.twoControl(form, otherField, (v1, v2) => Number(v1) < Number(v2), errMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 小于等于另一个字段验证\\r\\n   * @param form 表单\\r\\n   * @param otherField 另一个被验证的字段名\\r\\n   * @param message 提示信息\\r\\n   */\\r\\n  lteControl(\\r\\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\\r\\n    otherField: Array<string | number> | string,\\r\\n    message: string\\r\\n  ): ValidatorFn {\\r\\n    const errMessage = { lteValidator: { message } };\\r\\n    return this.twoControl(form, otherField, (v1, v2) => Number(v1) <= Number(v2), errMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 唯一验证\\r\\n   * @param form\\r\\n   * @param message\\r\\n   */\\r\\n  unique(form: FormGroup | FormArray, message: string = \'不允许重复\'): ValidatorFn {\\r\\n    return (control: AbstractControl): ValidationErrors | null => {\\r\\n      if (!control.value) {\\r\\n        return null;\\r\\n      }\\r\\n      for (const c in form.controls) {\\r\\n        const ctl = form.get(c);\\r\\n        if (control === ctl) {\\r\\n          continue;\\r\\n        }\\r\\n        if (control.value === ctl?.value) {\\r\\n          return { uniqueValidator: { message } };\\r\\n        }\\r\\n      }\\r\\n      return null;\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const NzxFormUtils = new FormUtilsClass();\\r\\n","properties":[],"description":"<p>表单工具</p>\\n","rawdescription":"\\n\\n表单工具\\n","methods":[{"name":"between","args":[{"name":"min","type":"number","deprecated":false,"deprecationMessage":""},{"name":"max","type":"number","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":179,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nmin <= x <= max 验证\\n","description":"<p>min &lt;= x &lt;= max 验证</p>\\n","jsdoctags":[{"name":{"pos":4432,"end":4435,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"min"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":4426,"end":4431,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最小值</p>\\n"},{"name":{"pos":4453,"end":4456,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"max"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":4447,"end":4452,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最大值</p>\\n"},{"name":{"pos":4474,"end":4481,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":4468,"end":4473,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"}]},{"name":"chinese","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'只允许输入中文字符\'"}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":235,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n校验中文\\n","description":"<p>校验中文</p>\\n","jsdoctags":[{"name":{"pos":5966,"end":5973,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'只允许输入中文字符\'","tagName":{"pos":5960,"end":5965,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误提示信息</p>\\n"}]},{"name":"clearError","args":[{"name":"form","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n清空错误信息\\n","description":"<p>清空错误信息</p>\\n","jsdoctags":[{"name":"form","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"contains","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""},{"name":"ignore","type":"boolean","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":166,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n包含指定字符串验证\\n","description":"<p>包含指定字符串验证</p>\\n","jsdoctags":[{"name":{"pos":4044,"end":4047,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"str"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":4038,"end":4043,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>字符串</p>\\n"},{"name":{"pos":4065,"end":4071,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ignore"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":4059,"end":4064,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>忽略大小写</p>\\n"},{"name":{"pos":4091,"end":4098,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":4085,"end":4090,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"}]},{"name":"email","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'邮箱格式错误\'"}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":211,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n校验邮箱\\n","description":"<p>校验邮箱</p>\\n","jsdoctags":[{"name":{"pos":5328,"end":5335,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'邮箱格式错误\'","tagName":{"pos":5322,"end":5327,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误提示信息</p>\\n"}]},{"name":"equalControl","args":[{"name":"form","type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":""},{"name":"otherField","type":"Array<string | number> | string","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":279,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n两个字段相等验证\\n","description":"<p>两个字段相等验证</p>\\n","jsdoctags":[{"name":{"pos":7078,"end":7082,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":"","tagName":{"pos":7072,"end":7077,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单</p>\\n"},{"name":{"pos":7099,"end":7109,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"otherField"},"type":"Array<string | number> | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7093,"end":7098,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>另一个被验证的字段名</p>\\n"},{"name":{"pos":7134,"end":7141,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7128,"end":7133,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>提示信息</p>\\n"}]},{"name":"forEachFormControl","args":[{"name":"form","type":"AbstractControl","deprecated":false,"deprecationMessage":""},{"name":"callback","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"ctrl","type":"AbstractControl","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":14,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n遍历表单控件\\n","description":"<p>遍历表单控件</p>\\n","jsdoctags":[{"name":{"pos":293,"end":297,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"pos":287,"end":292,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单或者表单元素</p>\\n"},{"name":{"pos":320,"end":328,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"callback"},"type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"ctrl","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"tagName":{"pos":314,"end":319,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>回调函数</p>\\n"}]},{"name":"getMessage","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string | null","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取错误信息\\n","description":"<p>获取错误信息</p>\\n","jsdoctags":[{"name":{"pos":1819,"end":1826,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"control"},"type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"pos":1813,"end":1818,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"gt","args":[{"name":"num","type":"number","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":147,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n大于验证\\n","description":"<p>大于验证</p>\\n","jsdoctags":[{"name":{"pos":3606,"end":3609,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"num"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":3600,"end":3605,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>数字</p>\\n"},{"name":{"pos":3626,"end":3633,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3620,"end":3625,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"}]},{"name":"gtControl","args":[{"name":"form","type":"FormGroup | FormArray","deprecated":false,"deprecationMessage":""},{"name":"otherField","type":"Array<string | number> | string","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":294,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n大于另一个字段验证\\n","description":"<p>大于另一个字段验证</p>\\n","jsdoctags":[{"name":{"pos":7510,"end":7514,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"FormGroup | FormArray","deprecated":false,"deprecationMessage":"","tagName":{"pos":7504,"end":7509,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单</p>\\n"},{"name":{"pos":7531,"end":7541,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"otherField"},"type":"Array<string | number> | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7525,"end":7530,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>另一个被验证的字段名</p>\\n"},{"name":{"pos":7566,"end":7573,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7560,"end":7565,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>提示信息</p>\\n"}]},{"name":"gte","args":[{"name":"num","type":"number","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":156,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n大于等于验证\\n","description":"<p>大于等于验证</p>\\n","jsdoctags":[{"name":{"pos":3822,"end":3825,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"num"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":3816,"end":3821,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>数字</p>\\n"},{"name":{"pos":3842,"end":3849,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3836,"end":3841,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"}]},{"name":"gteControl","args":[{"name":"form","type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":""},{"name":"otherField","type":"Array<string | number> | string","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":305,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n大于等于另一个字段验证\\n","description":"<p>大于等于另一个字段验证</p>\\n","jsdoctags":[{"name":{"pos":7900,"end":7904,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":"","tagName":{"pos":7894,"end":7899,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单</p>\\n"},{"name":{"pos":7921,"end":7931,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"otherField"},"type":"Array<string | number> | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7915,"end":7920,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>另一个被验证的字段名</p>\\n"},{"name":{"pos":7956,"end":7963,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7950,"end":7955,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>提示信息</p>\\n"}]},{"name":"ip","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'IP格式错误\'"}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":219,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n校验ip\\n","description":"<p>校验ip</p>\\n","jsdoctags":[{"name":{"pos":5540,"end":5547,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'IP格式错误\'","tagName":{"pos":5534,"end":5539,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误提示信息</p>\\n"}]},{"name":"lt","args":[{"name":"num","type":"number","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":129,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n小于验证\\n","description":"<p>小于验证</p>\\n","jsdoctags":[{"name":{"pos":3173,"end":3176,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"num"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":3167,"end":3172,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>数字</p>\\n"},{"name":{"pos":3193,"end":3200,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3187,"end":3192,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"}]},{"name":"ltControl","args":[{"name":"form","type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":""},{"name":"otherField","type":"Array<string | number> | string","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":320,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n小于于另一个字段验证\\n","description":"<p>小于于另一个字段验证</p>\\n","jsdoctags":[{"name":{"pos":8344,"end":8348,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":"","tagName":{"pos":8338,"end":8343,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单</p>\\n"},{"name":{"pos":8365,"end":8375,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"otherField"},"type":"Array<string | number> | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":8359,"end":8364,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>另一个被验证的字段名</p>\\n"},{"name":{"pos":8400,"end":8407,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":8394,"end":8399,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>提示信息</p>\\n"}]},{"name":"lte","args":[{"name":"num","type":"number","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":138,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n小于等于验证\\n","description":"<p>小于等于验证</p>\\n","jsdoctags":[{"name":{"pos":3389,"end":3392,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"num"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":3383,"end":3388,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>数字</p>\\n"},{"name":{"pos":3409,"end":3416,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3403,"end":3408,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"}]},{"name":"lteControl","args":[{"name":"form","type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":""},{"name":"otherField","type":"Array<string | number> | string","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":335,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n小于等于另一个字段验证\\n","description":"<p>小于等于另一个字段验证</p>\\n","jsdoctags":[{"name":{"pos":8786,"end":8790,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":"","tagName":{"pos":8780,"end":8785,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单</p>\\n"},{"name":{"pos":8807,"end":8817,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"otherField"},"type":"Array<string | number> | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":8801,"end":8806,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>另一个被验证的字段名</p>\\n"},{"name":{"pos":8842,"end":8849,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":8836,"end":8841,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>提示信息</p>\\n"}]},{"name":"mobile","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'手机号格式错误\'"}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":203,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n校验手机号（中国）\\n","description":"<p>校验手机号（中国）</p>\\n","jsdoctags":[{"name":{"pos":5112,"end":5119,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'手机号格式错误\'","tagName":{"pos":5106,"end":5111,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误提示信息</p>\\n"}]},{"name":"number","args":[{"name":"minus","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true},{"name":"fraction","type":"number","deprecated":false,"deprecationMessage":"","optional":true},{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'数字格式错误\'"}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":195,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n数字校验\\n","description":"<p>数字校验</p>\\n","jsdoctags":[{"name":{"pos":4783,"end":4788,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"minus"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":4777,"end":4782,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否允许负数</p>\\n"},{"name":{"pos":4809,"end":4817,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fraction"},"type":"number","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":4803,"end":4808,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>保留小数有效数字位数</p>\\n"},{"name":{"pos":4842,"end":4849,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'数字格式错误\'","tagName":{"pos":4836,"end":4841,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误提示信息</p>\\n"}]},{"name":"pattern","args":[{"name":"exp","type":"RegExp | string","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":119,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n根据正则表达式验证\\n","description":"<p>根据正则表达式验证</p>\\n","jsdoctags":[{"name":{"pos":2869,"end":2872,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"exp"},"type":"RegExp | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":2863,"end":2868,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>正则表达式</p>\\n"},{"name":{"pos":2892,"end":2899,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":2886,"end":2891,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"}]},{"name":"required","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'不能为空\'"},{"name":"hasValue","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"defaultValue":"value => !!value"}],"optional":false,"returnType":"ValidatorFn","typeParameters":["T"],"line":94,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n必填验证\\n","description":"<p>必填验证</p>\\n","jsdoctags":[{"name":{"pos":2107,"end":2114,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'不能为空\'","tagName":{"pos":2101,"end":2106,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"},{"name":{"pos":2133,"end":2141,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"hasValue"},"type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"defaultValue":"value => !!value","tagName":{"pos":2127,"end":2132,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否有值函数判断</p>\\n"}]},{"name":"singleValidator","args":[{"name":"operator","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}]},{"name":"errMessage","type":"ValidationErrors","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":["T"],"line":105,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n根据指定函数验证\\n","description":"<p>根据指定函数验证</p>\\n","jsdoctags":[{"name":{"pos":2468,"end":2476,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"operator"},"type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"tagName":{"pos":2462,"end":2467,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>操作函数</p>\\n"},{"name":{"pos":2495,"end":2505,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"errMessage"},"type":"ValidationErrors","deprecated":false,"deprecationMessage":"","tagName":{"pos":2489,"end":2494,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误信息</p>\\n"}]},{"name":"twoControl","args":[{"name":"form","type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":""},{"name":"otherField","type":"Array<string | number> | string","deprecated":false,"deprecationMessage":""},{"name":"compare","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"v1","type":"NzSafeAny","deprecated":false,"deprecationMessage":""},{"name":"v2","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}]},{"name":"errMessage","type":"ValidationErrors","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":246,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n验证两个字段\\n","description":"<p>验证两个字段</p>\\n","jsdoctags":[{"name":{"pos":6189,"end":6193,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"FormGroup | FormArray | ","deprecated":false,"deprecationMessage":"","tagName":{"pos":6183,"end":6188,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单</p>\\n"},{"name":{"pos":6210,"end":6220,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"otherField"},"type":"Array<string | number> | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":6204,"end":6209,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>另一个被验证的字段名称</p>\\n"},{"name":{"pos":6246,"end":6253,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"compare"},"type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"v1","type":"NzSafeAny","deprecated":false,"deprecationMessage":""},{"name":"v2","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"tagName":{"pos":6240,"end":6245,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>比较器</p>\\n"},{"name":{"pos":6271,"end":6281,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"errMessage"},"type":"ValidationErrors","deprecated":false,"deprecationMessage":"","tagName":{"pos":6265,"end":6270,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误提示</p>\\n"}]},{"name":"unique","args":[{"name":"form","type":"FormGroup | FormArray","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'不允许重复\'"}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":349,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n唯一验证\\n","description":"<p>唯一验证</p>\\n","jsdoctags":[{"name":{"pos":9224,"end":9228,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"FormGroup | FormArray","deprecated":false,"deprecationMessage":"","tagName":{"pos":9218,"end":9223,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":9242,"end":9249,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'不允许重复\'","tagName":{"pos":9236,"end":9241,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"url","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'URL格式错误\'"}],"optional":false,"returnType":"ValidatorFn","typeParameters":[],"line":227,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n校验url,支持ip v4, ip v6\\n","description":"<p>校验url,支持ip v4, ip v6</p>\\n","jsdoctags":[{"name":{"pos":5759,"end":5766,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'URL格式错误\'","tagName":{"pos":5753,"end":5758,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误提示信息</p>\\n"}]},{"name":"validate","args":[{"name":"form","type":"AbstractControl","deprecated":false,"deprecationMessage":""},{"name":"opts","type":"literal type","deprecated":false,"deprecationMessage":"","defaultValue":"{ updateValueAndValidity: false }"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":52,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n执行验证\\n","description":"<p>执行验证</p>\\n","jsdoctags":[{"name":{"pos":1207,"end":1211,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"pos":1201,"end":1206,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单</p>\\n"},{"name":{"pos":1228,"end":1232,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"opts"},"type":"literal type","deprecated":false,"deprecationMessage":"","defaultValue":"{ updateValueAndValidity: false }","tagName":{"pos":1222,"end":1227,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>配置</p>\\n"}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"HttpError","id":"class-HttpError-680ab031012390456d98af9e7f62a6723cdacbb90ac05f8995f40f11f7f0bbdc25005d25e8c57d52b0bc3b3583e7f75687404fb658612495c239bae271de3004","file":"lib/http-interceptor/http.model.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\n/**\\r\\n * 服务端响应实体, 可以通过设置 http请求参数\\r\\n * {observe: \'response\'} 拿到完整数据\\r\\n */\\r\\nexport interface ResponseModel<T = NzSafeAny> {\\r\\n  /**\\r\\n   * 服务端返回编码\\r\\n   */\\r\\n  code?: number;\\r\\n  message?: string;\\r\\n  data?: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * http 请求出错后，在中间件中封闭为统一的格式。\\r\\n */\\r\\nexport class HttpError<T = NzSafeAny> {\\r\\n  /**\\r\\n   *\\r\\n   * @param httpError 是否是HTTP原始异常\\r\\n   * @param code 错误码, 如果是HTTP原始异常,则为status code\\r\\n   * @param message 错误消息\\r\\n   * @param body 返回数据\\r\\n   */\\r\\n  constructor(public httpError: boolean, public code: number, public message: string, public body: T) {}\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"httpError","type":"boolean","deprecated":false,"deprecationMessage":""},{"name":"code","type":"number","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""},{"name":"body","type":"T","deprecated":false,"deprecationMessage":""}],"line":19,"rawdescription":"\\n\\n\\n","jsdoctags":[{"name":{"pos":368,"end":377,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"httpError"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":362,"end":367,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否是HTTP原始异常</p>\\n"},{"name":{"pos":403,"end":407,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"code"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":397,"end":402,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误码, 如果是HTTP原始异常,则为status code</p>\\n"},{"name":{"pos":452,"end":459,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"message"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":446,"end":451,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>错误消息</p>\\n"},{"name":{"pos":478,"end":482,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"body"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":472,"end":477,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>返回数据</p>\\n"}]},"properties":[{"name":"body","deprecated":false,"deprecationMessage":"","type":"T","optional":false,"description":"返回数据","line":27,"modifierKind":[123]},{"name":"code","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"错误码, 如果是HTTP原始异常,则为status code","line":27,"modifierKind":[123]},{"name":"httpError","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"是否是HTTP原始异常","line":27,"modifierKind":[123]},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"错误消息","line":27,"modifierKind":[123]}],"description":"<p>http 请求出错后，在中间件中封闭为统一的格式。</p>\\n","rawdescription":"\\n\\nhttp 请求出错后，在中间件中封闭为统一的格式。\\n","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LetContext","id":"class-LetContext-3c03768af4325822c834e19d0f50d87d5153d3255a36f5ab67bb7681a9c4fde5081489f6803b058f6e9e1df93df555885799f14952d7e9374e40a49bd68d39c8","file":"lib/directive/let.directive.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n/**\\r\\n * 允许在模板内复用计算值（包含异步），避免重复重新计算。\\r\\n * @example\\r\\n *\\r\\n * <div *let=\\"value1 as v\\">\\r\\n *   <p>{{ v }}</p>\\r\\n * </div>\\r\\n * <div *let=\\"time$ | async as time\\">\\r\\n *   <p>{{ time }}</p>\\r\\n * </div>\\r\\n */\\r\\n@Directive({ selector: \'[let]\' })\\r\\nexport class LetDirective<T> {\\r\\n  @Input() let!: T;\\r\\n\\r\\n  constructor(@Inject(ViewContainerRef) vc: ViewContainerRef, @Inject(TemplateRef) ref: TemplateRef<LetContext<T>>) {\\r\\n    vc.createEmbeddedView(ref, new LetContext<T>(this));\\r\\n  }\\r\\n\\r\\n  static ngTemplateContextGuard<T>(_dir: LetDirective<T>, _ctx: NzSafeAny): _ctx is LetDirective<T> {\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport class LetContext<T> {\\r\\n  constructor(private readonly directive: LetDirective<T>) {}\\r\\n\\r\\n  get $implicit(): T {\\r\\n    return this.directive.let;\\r\\n  }\\r\\n\\r\\n  get let(): T {\\r\\n    return this.directive.let;\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"directive","type":"LetDirective<T>","deprecated":false,"deprecationMessage":""}],"line":28,"jsdoctags":[{"name":"directive","type":"LetDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"properties":[],"methods":[],"indexSignatures":[],"accessors":{"$implicit":{"name":"$implicit","getSignature":{"name":"$implicit","type":"","returnType":"T","line":31}},"let":{"name":"let","getSignature":{"name":"let","type":"","returnType":"T","line":35}}},"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"UtilsClass","id":"class-UtilsClass-6c60f40030524c8b656a2c65b50e676c03dccd118983b28771b5ba028132b8fa233d33f5f661c02fa5fc0bfdc456c60a0ed863aa9e53fb38f03c531ce8e3dace","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ElementRef } from \'@angular/core\';\\r\\nimport { isNil } from \'ng-zorro-antd/core/util\';\\r\\nimport { Observable } from \'rxjs\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\nconst toStr = Object.prototype.toString;\\r\\nconst hasOwn = Object.prototype.hasOwnProperty;\\r\\nconst defineProperty = Object.defineProperty;\\r\\nconst gOPD = Object.getOwnPropertyDescriptor;\\r\\n\\r\\nclass UtilsClass {\\r\\n  assign = this.extend;\\r\\n\\r\\n  defaultIfy<T = NzSafeAny>(obj: T, defaultValue: NzSafeAny) {\\r\\n    return isNil(obj) ? defaultValue : obj;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 根据属性路径获取对象的属性值\\r\\n   * @param obj 原始对象\\r\\n   * @param path 属性路径\\r\\n   * @param defaultValue 当属性不存在或为undefined返回defaultValue\\r\\n   */\\r\\n  get(obj: NzSafeAny, path?: string | string[], defaultValue?: NzSafeAny) {\\r\\n    if (!obj || path == null || path.length === 0) {\\r\\n      return defaultValue;\\r\\n    }\\r\\n    if (!Array.isArray(path)) {\\r\\n      path = path.indexOf(\'.\') ? path.split(\'.\') : [path];\\r\\n    }\\r\\n    if (path.length === 1) {\\r\\n      const checkObj = obj[path[0]];\\r\\n      return typeof checkObj === \'undefined\' ? defaultValue : checkObj;\\r\\n    }\\r\\n    return path.reduce((o, k) => (o || {})[k], obj) || defaultValue;\\r\\n  }\\r\\n\\r\\n  trim(string: string) {\\r\\n    return (string || \'\').replace(/^[\\\\s\\\\uFEFF]+|[\\\\s\\\\uFEFF]+$/g, \'\');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取唯一Id号\\r\\n   */\\r\\n  getUUID() {\\r\\n    return Date.now() + Math.random().toString().replace(\'0.\', \'\');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 深度clone\\r\\n   * @param target\\r\\n   */\\r\\n  clone<T = NzSafeAny>(target: T): T {\\r\\n    const _target = NzxUtils.isArray(target) ? [] : {};\\r\\n    return this.extend(_target as T, target);\\r\\n  }\\r\\n\\r\\n  // If name is \'__proto__\', and Object.defineProperty is available, define __proto__ as an own property on target\\r\\n  private setProperty<T = NzSafeAny>(target: T, options: { name: string; newValue: NzSafeAny }) {\\r\\n    if (defineProperty && options.name === \'__proto__\') {\\r\\n      defineProperty(target, options.name, {\\r\\n        enumerable: true,\\r\\n        configurable: true,\\r\\n        value: options.newValue,\\r\\n        writable: true\\r\\n      });\\r\\n    } else {\\r\\n      // @ts-ignore\\r\\n      target[options.name] = options.newValue;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Return undefined instead of __proto__ if \'__proto__\' is not an own property\\r\\n  private getProperty<T = NzSafeAny>(obj: T, name: string) {\\r\\n    if (name === \'__proto__\') {\\r\\n      if (!hasOwn.call(obj, name)) {\\r\\n        return void 0;\\r\\n      } else if (gOPD) {\\r\\n        // @ts-ignore\\r\\n        return gOPD(obj, name).value;\\r\\n      }\\r\\n    }\\r\\n    // @ts-ignore\\r\\n    return obj[name];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 继承\\r\\n   * @param target\\r\\n   * @param args\\r\\n   */\\r\\n  extend<T = NzSafeAny>(target: T, ...args: NzSafeAny[]): T {\\r\\n    let copyIsArray, clone;\\r\\n\\r\\n    for (const options of args) {\\r\\n      if (options == null) {\\r\\n        continue;\\r\\n      }\\r\\n\\r\\n      for (const name in options) {\\r\\n        const src = this.getProperty(target, name);\\r\\n        const copy = this.getProperty(options, name);\\r\\n        if (target === copy || copy === undefined) {\\r\\n          continue;\\r\\n        }\\r\\n\\r\\n        // tslint:disable-next-line:no-conditional-assignment\\r\\n        if (NzxUtils.isPlainObject(copy) || (copyIsArray = NzxUtils.isArray(copy))) {\\r\\n          if (copyIsArray) {\\r\\n            copyIsArray = false;\\r\\n            clone = src && NzxUtils.isArray(src) ? src : [];\\r\\n          } else {\\r\\n            clone = src && NzxUtils.isPlainObject(src) ? src : {};\\r\\n          }\\r\\n\\r\\n          this.setProperty(target, { name, newValue: this.extend(clone, copy) });\\r\\n        } else {\\r\\n          this.setProperty(target, { name, newValue: copy });\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return target;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 根据开始和结束数字返回一个数组\\r\\n   * @param start 起始数字\\r\\n   * @param end 结束数字\\r\\n   * @param fill 填充内容,默认\\r\\n   */\\r\\n  range<T = NzSafeAny>(start: number, end: number, fill?: ((num: number, index: number) => T) | T): T[] {\\r\\n    const list: T[] = [];\\r\\n    const fn = fill == null ? (i: number) => i as unknown as T : this.isFunction(fill) ? fill : () => fill;\\r\\n    let index = 0;\\r\\n    for (let i = start; i < end; i++) {\\r\\n      list.push(fn(i, index++));\\r\\n    }\\r\\n    return list;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 遍历树结构\\r\\n   * @param treeNodes TreeNode[]\\r\\n   * @param accept 函数返回false即结束遍历, true或者undefined将继续遍历\\r\\n   * @param childrenName 子节点字段名称\\r\\n   */\\r\\n  forEachTree<T extends TreeNode>(\\r\\n    treeNodes: T[],\\r\\n    accept: (node: T, parentNode: T | undefined, level: number) => boolean | void,\\r\\n    childrenName: keyof T | TreeChildren<T> = \'children\'\\r\\n  ): void {\\r\\n    if (!treeNodes || !treeNodes.length) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const getChildren =\\r\\n      typeof childrenName === \'string\' ? (node: T) => node[childrenName] : (childrenName as TreeChildren<T>);\\r\\n\\r\\n    let stack: T[] = [...treeNodes];\\r\\n    const parents: { count: number; parent?: T; level: number }[] = [{ count: treeNodes.length, level: 0 }];\\r\\n    let counter = 0;\\r\\n\\r\\n    while (stack.length) {\\r\\n      const item = stack.shift()!;\\r\\n      const parent = parents[0];\\r\\n      if (++counter ===  parent.count) {\\r\\n        parents.shift();\\r\\n        counter = 0;\\r\\n      }\\r\\n      if (accept(item, parent.parent, parent.level) === false) {\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      const children = getChildren(item, parent.parent, parent.level);\\r\\n      if (children && children.length) {\\r\\n        stack = stack.concat(children);\\r\\n        parents.push({count: children.length, parent: item, level: parent.level + 1});\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 过滤树, 生成新的树结构\\r\\n   * @param treeNodes 树结构\\r\\n   * @param predicate 过滤函数\\r\\n   * @param childrenName 子节点名称,默认 \'children\'\\r\\n   */\\r\\n  filterTree<T extends TreeNode>(\\r\\n    treeNodes: T[],\\r\\n    predicate: (node: T) => boolean,\\r\\n    childrenName: keyof T = \'children\'\\r\\n  ): T[] {\\r\\n    const filter = (list: T[], children: T[]) => {\\r\\n      for (const node of list) {\\r\\n        const newNode: T = { ...node, [childrenName]: [] };\\r\\n        if (node[childrenName]?.length) {\\r\\n          filter(node[childrenName], newNode[childrenName]);\\r\\n        }\\r\\n\\r\\n        if (predicate(newNode)) {\\r\\n          children.push(newNode);\\r\\n        }\\r\\n      }\\r\\n    };\\r\\n    const result: T[] = [];\\r\\n    filter(treeNodes, result);\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 列表转树结构\\r\\n   * @param list 列表数据\\r\\n   * @param idName id的属性名\\r\\n   * @param pidName parentId属性名\\r\\n   * @param childrenName children属性名\\r\\n   */\\r\\n  listToTree<T extends { pid?: string; id?: string; [key: string]: NzSafeAny }>(\\r\\n    list: T[],\\r\\n    idName: keyof T = \'id\',\\r\\n    pidName: keyof T = \'pid\',\\r\\n    childrenName: string = \'children\'\\r\\n  ): T[] {\\r\\n    if (!list || !list.length) {\\r\\n      return [];\\r\\n    }\\r\\n    const nodeMap: { [key: string]: NzSafeAny } = {};\\r\\n    for (const node of list) {\\r\\n      nodeMap[node[idName]] = node;\\r\\n      // @ts-ignore\\r\\n      node[childrenName] = [];\\r\\n    }\\r\\n\\r\\n    const treeNodes: T[] = [];\\r\\n    for (const node of list) {\\r\\n      const pid = node[pidName];\\r\\n      const parent = nodeMap[node[pidName]];\\r\\n      if (pid && parent) {\\r\\n        parent[childrenName].push(node);\\r\\n      } else {\\r\\n        treeNodes.push(node);\\r\\n      }\\r\\n    }\\r\\n    return treeNodes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取同步请求的响应结果\\r\\n   * @param observable\\r\\n   * @example\\r\\n   * const myObservable = this.http.get<string>(\'url\', { context: new HttpContext().set(SYNCED_ENABLED, true)});\\r\\n   * const value = getAjaxValue(myObservable); // value为string类型\\r\\n   */\\r\\n  getAjaxValue<T = NzSafeAny>(observable: Observable<T>) {\\r\\n    let value!: T;\\r\\n    observable.subscribe(result => (value = result)).unsubscribe();\\r\\n    return value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 根据不同的参数类型 获取dom元素\\r\\n   * @param target\\r\\n   */\\r\\n  getElement(target: ElementRef | HTMLElement | string): HTMLElement | null {\\r\\n    if (!target) {\\r\\n      return null;\\r\\n    }\\r\\n\\r\\n    if (target instanceof HTMLElement) {\\r\\n      return target;\\r\\n    }\\r\\n\\r\\n    const eleRef = target as ElementRef;\\r\\n    if (eleRef.nativeElement) {\\r\\n      return eleRef.nativeElement;\\r\\n    }\\r\\n\\r\\n    if (typeof target === \'string\') {\\r\\n      return document.querySelector(target);\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 字符串模版函数\\r\\n   * @param template 模版\\r\\n   * @param data 数据\\r\\n   * @return 返回渲染后的Html\\r\\n   * @example\\r\\n   * Utils.format(\'{s.0.name}\', { s: [{name: 111}] }) => 111\\r\\n   */\\r\\n  format(template: string | null, data?: Record<string, NzSafeAny>): string {\\r\\n    if (template == null || !data) {\\r\\n      return template || \'\';\\r\\n    }\\r\\n    return template.replace(/\\\\{([\\\\w\\\\.]*)\\\\}/g, (str, key) => {\\r\\n      const path = key.split(\'.\');\\r\\n      let v = data[path.shift()];\\r\\n      for (let i = 0, size = path.length; i < size && v !== null; i++) {\\r\\n        v = v[path[i]];\\r\\n      }\\r\\n      return v == null ? \'\' : v.toString();\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 对Date的扩展，将 Date 转化为指定格式的String\\r\\n   * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\\r\\n   * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\\r\\n   * eg:\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-MM-dd hh:mm:ss.S\') ==> 2006-07-02 08:09:04.423\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-MM-dd 星期E HH:mm:ss\') ==> 2009-03-10 星期二 20:09:04\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-MM-dd 星期e hh:mm:ss\') ==> 2009-03-10 星期2 08:09:04\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-MM-dd 第w周 hh:mm:ss\') ==> 2009-03-10 第2周 08:09:04\\r\\n   * NeKit.formatDate(new Date(), \'yyyy-M-d h:m:s.S\') ==> 2006-7-2 8:9:4.18\\r\\n   */\\r\\n  formatDate(srcDate: Date, fmt: string) {\\r\\n    if (!srcDate) {\\r\\n      return \'\';\\r\\n    }\\r\\n    const week = {\\r\\n      0: \'\\\\u65e5\',\\r\\n      1: \'\\\\u4e00\',\\r\\n      2: \'\\\\u4e8c\',\\r\\n      3: \'\\\\u4e09\',\\r\\n      4: \'\\\\u56db\',\\r\\n      5: \'\\\\u4e94\',\\r\\n      6: \'\\\\u516d\'\\r\\n    };\\r\\n\\r\\n    const o = {\\r\\n      \'M+\': srcDate.getMonth() + 1,\\r\\n      \'d+\': srcDate.getDate(),\\r\\n      \'h+\': srcDate.getHours() % 12 === 0 ? 12 : srcDate.getHours() % 12,\\r\\n      \'H+\': srcDate.getHours(),\\r\\n      \'m+\': srcDate.getMinutes(),\\r\\n      \'s+\': srcDate.getSeconds(),\\r\\n      \'q+\': Math.floor((srcDate.getMonth() + 3) / 3),\\r\\n      \'S+\': srcDate.getMilliseconds(),\\r\\n      \'e+\': srcDate.getDay(),\\r\\n      // @ts-ignore\\r\\n      E: week[srcDate.getDay()],\\r\\n      \'w+\': (date => {\\r\\n        const date2 = new Date(date.getFullYear(), 0, 1);\\r\\n        const day = (date2.getDay() ? date2.getDay() : 7) - (date.getDay() ? date.getDay() : 7);\\r\\n        return Math.ceil(Math.round((date.getTime() - date2.getTime() + day * (24 * 3600000)) / 86400000) / 7) + 1;\\r\\n      })(srcDate)\\r\\n    };\\r\\n    if (/(y+)/.test(fmt)) {\\r\\n      fmt = fmt.replace(RegExp.$1, (srcDate.getFullYear() + \'\').substr(4 - RegExp.$1.length));\\r\\n    }\\r\\n    for (const k in o) {\\r\\n      if (new RegExp(\'(\' + k + \')\').test(fmt)) {\\r\\n        // @ts-ignore\\r\\n        fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : (\'00\' + o[k]).substr((\'\' + o[k]).length));\\r\\n      }\\r\\n    }\\r\\n    return fmt;\\r\\n  }\\r\\n\\r\\n  is(val: unknown, type: string) {\\r\\n    return toStr.call(val) === `[object ${type}]`;\\r\\n  }\\r\\n\\r\\n  isDef<T = unknown>(val?: T): val is T {\\r\\n    return typeof val !== \'undefined\';\\r\\n  }\\r\\n\\r\\n  isUnDef<T = unknown>(val?: T): val is T {\\r\\n    return !this.isDef(val);\\r\\n  }\\r\\n\\r\\n  isObject(val: NzSafeAny): val is Record<NzSafeAny, NzSafeAny> {\\r\\n    return val !== null && this.is(val, \'Object\');\\r\\n  }\\r\\n\\r\\n  isEmpty<T = unknown>(val: T): val is T {\\r\\n    // @ts-ignore\\r\\n    return val == null || val.length === 0;\\r\\n  }\\r\\n\\r\\n  isDate(val: unknown): val is Date {\\r\\n    return this.is(val, \'Date\');\\r\\n  }\\r\\n\\r\\n  isNull(val: unknown): val is null {\\r\\n    return val === null;\\r\\n  }\\r\\n\\r\\n  isNil(val: unknown): val is null | undefined {\\r\\n    return this.isUnDef(val) && this.isNull(val);\\r\\n  }\\r\\n\\r\\n  isNotNil(val: unknown): val is null | undefined {\\r\\n    return !this.isNil(val);\\r\\n  }\\r\\n\\r\\n  isNumber(val: unknown): val is number {\\r\\n    return this.is(val, \'Number\');\\r\\n  }\\r\\n\\r\\n  isPromise<T = NzSafeAny>(val: unknown): val is Promise<T> {\\r\\n    return this.is(val, \'Promise\') || (this.isObject(val) && this.isFunction(val.then) && this.isFunction(val.catch));\\r\\n  }\\r\\n\\r\\n  isObservable(obj: NzSafeAny): obj is Observable<NzSafeAny> {\\r\\n    return obj instanceof Observable || (obj && typeof obj.subscribe === \'function\');\\r\\n  }\\r\\n\\r\\n  isString(val: unknown): val is string {\\r\\n    return this.is(val, \'String\');\\r\\n  }\\r\\n\\r\\n  isFunction(val: unknown): val is Function {\\r\\n    return typeof val === \'function\';\\r\\n  }\\r\\n\\r\\n  isBoolean(val: unknown): val is boolean {\\r\\n    return this.is(val, \'Boolean\');\\r\\n  }\\r\\n\\r\\n  isRegExp(val: unknown): val is RegExp {\\r\\n    return this.is(val, \'RegExp\');\\r\\n  }\\r\\n\\r\\n  isArray(val: NzSafeAny): val is Array<NzSafeAny> {\\r\\n    if (typeof Array.isArray === \'function\') {\\r\\n      return Array.isArray(val);\\r\\n    }\\r\\n    return toStr.call(val) === \'[object Array]\';\\r\\n  }\\r\\n\\r\\n  isWindow(val: NzSafeAny): val is Window {\\r\\n    return typeof window !== \'undefined\' && this.is(val, \'Window\');\\r\\n  }\\r\\n\\r\\n  isElement(val: unknown): val is Element {\\r\\n    return this.isObject(val) && !!val.tagName;\\r\\n  }\\r\\n\\r\\n  isMap(val: unknown): val is Map<NzSafeAny, NzSafeAny> {\\r\\n    return this.is(val, \'Map\');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否为手机号（中国）\\r\\n   * @param value\\r\\n   */\\r\\n  isMobile(value: string): boolean {\\r\\n    return /^(0|\\\\\\\\+?86|17951)?1[0-9]{10}$/.test(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否IP4地址（支持v4、v6）\\r\\n   * @param ip\\r\\n   */\\r\\n  isIp(ip: string) {\\r\\n    return /^(?:^(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}$)|(?:^(?:(?:[a-fA-F\\\\\\\\d]{1,4}:){7}(?:[a-fA-F\\\\\\\\d]{1,4}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|:[a-fA-F\\\\\\\\d]{1,4}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){4}(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){3}(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){2}(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\\\\\\\d]{1,4}:){1}(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\\\\\\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)(?:\\\\\\\\.(?:25[0-5]|2[0-4]\\\\\\\\d|1\\\\\\\\d\\\\\\\\d|[1-9]\\\\\\\\d|\\\\\\\\d)){3}|(?::[a-fA-F\\\\\\\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)$/.test(\\r\\n      ip\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否是url\\r\\n   * @param path\\r\\n   */\\r\\n  isUrl(path: string): boolean {\\r\\n    return /(((^https?:(?:\\\\/\\\\/)?)(?:[-;:&=\\\\+\\\\$,\\\\w]+@)?[A-Za-z0-9.-]+(?::\\\\d+)?|(?:www.|[-;:&=\\\\+\\\\$,\\\\w]+@)[A-Za-z0-9.-]+)((?:\\\\/[\\\\+~%\\\\/.\\\\w-_]*)?\\\\??(?:[-\\\\+=&;%@.\\\\w_]*)#?(?:[\\\\w]*))?)$/.test(\\r\\n      path\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否中文\\r\\n   * @param value 测试字符串\\r\\n   */\\r\\n  isChinese(value: string): boolean {\\r\\n    return /^[\\\\u4e00-\\\\u9fa5]+$/.test(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否为数值\\r\\n   * @param value\\r\\n   * @param minus 是否允许负数\\r\\n   * @param fraction 最大保留小数位数\\r\\n   */\\r\\n  isNum(value: string, minus?: boolean, fraction?: number): boolean {\\r\\n    const regex =\\r\\n      (minus ? \'^-?\' : \'^\') +\\r\\n      `(([1-9]{1}\\\\\\\\d*)|(0{1}))` +\\r\\n      (fraction && fraction > 0 ? `(\\\\\\\\.\\\\\\\\d{1,${fraction}})?$` : \'$\');\\r\\n    return new RegExp(regex).test(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否为邮箱\\r\\n   * @param value\\r\\n   */\\r\\n  isEmail(value: string) {\\r\\n    return /^([a-z0-9_\\\\.-]+)@([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})$/.test(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否是纯对象值\\r\\n   * @param obj\\r\\n   */\\r\\n  isPlainObject<T = NzSafeAny>(obj: T) {\\r\\n    if (!obj || toStr.call(obj) !== \'[object Object]\') {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    const hasOwnConstructor = hasOwn.call(obj, \'constructor\');\\r\\n    const hasIsPrototypeOf =\\r\\n      // @ts-ignore\\r\\n      obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, \'isPrototypeOf\');\\r\\n    // @ts-ignore\\r\\n    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    let key;\\r\\n    for (key in obj) {\\r\\n      /**/\\r\\n    }\\r\\n\\r\\n    return typeof key === \'undefined\' || hasOwn.call(obj, key);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 转换为日期\\r\\n   * @param date 待转换的值\\r\\n   */\\r\\n  toDate(date?: Date | string | number): Date | null {\\r\\n    if (date == null) {\\r\\n      return null;\\r\\n    }\\r\\n    if (this.isDate(date)) {\\r\\n      return date;\\r\\n    }\\r\\n    if (this.isNumber(date)) {\\r\\n      return new Date(date);\\r\\n    }\\r\\n    if (this.isString(date)) {\\r\\n      const value = Date.parse(date);\\r\\n      if (isNaN(value)) {\\r\\n        const match = date.match(/\\\\d+/g);\\r\\n        if (match) {\\r\\n          // @ts-ignore\\r\\n          return new Date(...match);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 合并对象到FormData\\r\\n   * @param obj 要合并的对象\\r\\n   * @param {FormData} form 表单\\r\\n   */\\r\\n  mergeFormData<T>(form: FormData, obj: T): void {\\r\\n    const list = this.serializeParams(obj);\\r\\n    for (const it of list) {\\r\\n      form.append(it.key, it.value);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 把js对象序列化对请求数据,格式为 a=av&b=bv...&n=nv\\r\\n   * @param obj\\r\\n   * @returns\\r\\n   */\\r\\n  serialize<T>(obj: T): string {\\r\\n    const list = this.serializeParams<T>(obj);\\r\\n    let query = \'\';\\r\\n    for (const it of list) {\\r\\n      query += encodeURIComponent(it.key) + \'=\' + encodeURIComponent(it.value) + \'&\';\\r\\n    }\\r\\n    return query === \'\' ? query : query.substr(0, query.length - 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 把js对象序列化对请求数据\\r\\n   * @param obj\\r\\n   * @returns\\r\\n   */\\r\\n  serializeParams<T>(obj: T): Record<string, NzSafeAny>[] {\\r\\n    if (!obj) {\\r\\n      return [];\\r\\n    }\\r\\n\\r\\n    const query: Record<string, NzSafeAny>[] = [];\\r\\n    this.buildParam(obj, query);\\r\\n    return query;\\r\\n  }\\r\\n\\r\\n  private buildParam<T extends Record<string, NzSafeAny>>(inObj: T, list: Record<string, NzSafeAny>[]) {\\r\\n    let value: NzSafeAny;\\r\\n    let subName: string;\\r\\n    let innerObj: Record<string, string>;\\r\\n    for (const name in inObj) {\\r\\n      value = inObj[name];\\r\\n      if (value instanceof Array) {\\r\\n        for (let i = 0; i < value.length; ++i) {\\r\\n          if (value[i] instanceof Array || value[i] instanceof Object) {\\r\\n            if (value[i].toJSON) {\\r\\n              list.push({ key: name, value: value[i].toJSON() });\\r\\n              continue;\\r\\n            }\\r\\n            innerObj = {};\\r\\n            innerObj[name + \'[\' + i + \']\'] = value[i];\\r\\n            this.buildParam(innerObj, list);\\r\\n          } else if (value[i] !== undefined && value[i] !== null) {\\r\\n            list.push({ key: name, value: value[i] });\\r\\n          }\\r\\n        }\\r\\n        continue;\\r\\n      }\\r\\n      if (value instanceof Object) {\\r\\n        if (value.toJSON) {\\r\\n          list.push({ key: name, value: value.toJSON() });\\r\\n          continue;\\r\\n        }\\r\\n\\r\\n        for (subName of Object.keys(value)) {\\r\\n          innerObj = {};\\r\\n          innerObj[name + \'.\' + subName] = value[subName];\\r\\n          this.buildParam(innerObj, list);\\r\\n        }\\r\\n        continue;\\r\\n      }\\r\\n      if (value !== undefined && value !== null) {\\r\\n        list.push({ key: name, value });\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const NzxUtils = new UtilsClass();\\r\\n\\r\\n/**\\r\\n * 树节点\\r\\n */\\r\\nexport interface TreeNode {\\r\\n  [key: string]: NzSafeAny;\\r\\n\\r\\n  /**\\r\\n   * 子节点\\r\\n   */\\r\\n  children?: TreeNode[];\\r\\n}\\r\\n\\r\\nexport type TreeChildren<T = NzSafeAny> = (node: T, parentNode: T | undefined, level: number) => T[] | null;\\r\\n","properties":[{"name":"assign","defaultValue":"this.extend","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":12}],"methods":[{"name":"buildParam","args":[{"name":"inObj","type":"T","deprecated":false,"deprecationMessage":""},{"name":"list","type":"Record<string, NzSafeAny>[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":["T"],"line":597,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"inObj","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"list","type":"Record<string, NzSafeAny>[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"clone","args":[{"name":"target","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"T","typeParameters":["T"],"line":53,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n深度clone\\n","description":"<p>深度clone</p>\\n","jsdoctags":[{"name":{"pos":1422,"end":1428,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"target"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":1416,"end":1421,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"defaultIfy","args":[{"name":"obj","type":"T","deprecated":false,"deprecationMessage":""},{"name":"defaultValue","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":["T"],"line":14,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"obj","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"defaultValue","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"extend","args":[{"name":"target","type":"T","deprecated":false,"deprecationMessage":""},{"name":"args","type":"NzSafeAny[]","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"optional":false,"returnType":"T","typeParameters":["T"],"line":92,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n继承\\n","description":"<p>继承</p>\\n","jsdoctags":[{"name":{"pos":2550,"end":2556,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"target"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":2544,"end":2549,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":2570,"end":2574,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"args"},"type":"NzSafeAny[]","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2564,"end":2569,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"filterTree","args":[{"name":"treeNodes","type":"T[]","deprecated":false,"deprecationMessage":""},{"name":"predicate","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"node","type":"T","deprecated":false,"deprecationMessage":""}]},{"name":"childrenName","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"\'children\'"}],"optional":false,"returnType":"T[]","typeParameters":["T"],"line":189,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n过滤树, 生成新的树结构\\n","description":"<p>过滤树, 生成新的树结构</p>\\n","jsdoctags":[{"name":{"pos":5418,"end":5427,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"treeNodes"},"type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":5412,"end":5417,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>树结构</p>\\n"},{"name":{"pos":5445,"end":5454,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"predicate"},"type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"node","type":"T","deprecated":false,"deprecationMessage":""}],"tagName":{"pos":5439,"end":5444,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>过滤函数</p>\\n"},{"name":{"pos":5473,"end":5485,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"childrenName"},"type":"","deprecated":false,"deprecationMessage":"","defaultValue":"\'children\'","tagName":{"pos":5467,"end":5472,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>子节点名称,默认 &#39;children&#39;</p>\\n"}]},{"name":"forEachTree","args":[{"name":"treeNodes","type":"T[]","deprecated":false,"deprecationMessage":""},{"name":"accept","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"node","type":"T","deprecated":false,"deprecationMessage":""},{"name":"parentNode","type":"T | undefined","deprecated":false,"deprecationMessage":""},{"name":"level","type":"number","deprecated":false,"deprecationMessage":""}]},{"name":"childrenName","type":" | TreeChildren<T>","deprecated":false,"deprecationMessage":"","defaultValue":"\'children\'"}],"optional":false,"returnType":"void","typeParameters":["T"],"line":148,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n遍历树结构\\n","description":"<p>遍历树结构</p>\\n","jsdoctags":[{"name":{"pos":4113,"end":4122,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"treeNodes"},"type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":4107,"end":4112,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>TreeNode[]</p>\\n"},{"name":{"pos":4147,"end":4153,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"accept"},"type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"node","type":"T","deprecated":false,"deprecationMessage":""},{"name":"parentNode","type":"T | undefined","deprecated":false,"deprecationMessage":""},{"name":"level","type":"number","deprecated":false,"deprecationMessage":""}],"tagName":{"pos":4141,"end":4146,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>函数返回false即结束遍历, true或者undefined将继续遍历</p>\\n"},{"name":{"pos":4204,"end":4216,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"childrenName"},"type":" | TreeChildren<T>","deprecated":false,"deprecationMessage":"","defaultValue":"\'children\'","tagName":{"pos":4198,"end":4203,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>子节点字段名称</p>\\n"}]},{"name":"format","args":[{"name":"template","type":"string | null","deprecated":false,"deprecationMessage":""},{"name":"data","type":"Record<string | NzSafeAny>","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"string","typeParameters":[],"line":292,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n字符串模版函数\\n```html\\nUtils.format(\'{s.0.name}\', { s: [{name: 111}] }) => 111\\n```","description":"<p>字符串模版函数</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">Utils.format(&#39;{s.0.name}&#39;, { s: [{name: 111}] }) =&gt; 111</code></pre></div>","jsdoctags":[{"name":{"pos":7975,"end":7983,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"template"},"type":"string | null","deprecated":false,"deprecationMessage":"","tagName":{"pos":7969,"end":7974,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>模版</p>\\n"},{"name":{"pos":8000,"end":8004,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"data"},"type":"Record<string | NzSafeAny>","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":7994,"end":7999,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>数据</p>\\n"},{"tagName":{"pos":8015,"end":8021,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":105,"escapedText":"return"},"comment":"<p>返回渲染后的Html</p>\\n"},{"tagName":{"pos":8040,"end":8047,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>Utils.format(&#39;{s.0.name}&#39;, { s: [{name: 111}] }) =&gt; 111</p>\\n"}]},{"name":"formatDate","args":[{"name":"srcDate","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"fmt","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":317,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n对Date的扩展，将 Date 转化为指定格式的String\\n月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\\n年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\\neg:\\nNeKit.formatDate(new Date(), \'yyyy-MM-dd hh:mm:ss.S\') ==> 2006-07-02 08:09:04.423\\nNeKit.formatDate(new Date(), \'yyyy-MM-dd 星期E HH:mm:ss\') ==> 2009-03-10 星期二 20:09:04\\nNeKit.formatDate(new Date(), \'yyyy-MM-dd 星期e hh:mm:ss\') ==> 2009-03-10 星期2 08:09:04\\nNeKit.formatDate(new Date(), \'yyyy-MM-dd 第w周 hh:mm:ss\') ==> 2009-03-10 第2周 08:09:04\\nNeKit.formatDate(new Date(), \'yyyy-M-d h:m:s.S\') ==> 2006-7-2 8:9:4.18\\n","description":"<p>对Date的扩展，将 Date 转化为指定格式的String\\n月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\\n年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\\neg:\\nNeKit.formatDate(new Date(), &#39;yyyy-MM-dd hh:mm:ss.S&#39;) ==&gt; 2006-07-02 08:09:04.423\\nNeKit.formatDate(new Date(), &#39;yyyy-MM-dd 星期E HH:mm:ss&#39;) ==&gt; 2009-03-10 星期二 20:09:04\\nNeKit.formatDate(new Date(), &#39;yyyy-MM-dd 星期e hh:mm:ss&#39;) ==&gt; 2009-03-10 星期2 08:09:04\\nNeKit.formatDate(new Date(), &#39;yyyy-MM-dd 第w周 hh:mm:ss&#39;) ==&gt; 2009-03-10 第2周 08:09:04\\nNeKit.formatDate(new Date(), &#39;yyyy-M-d h:m:s.S&#39;) ==&gt; 2006-7-2 8:9:4.18</p>\\n","jsdoctags":[{"name":"srcDate","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"fmt","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"get","args":[{"name":"obj","type":"NzSafeAny","deprecated":false,"deprecationMessage":""},{"name":"path","type":"string | string[]","deprecated":false,"deprecationMessage":"","optional":true},{"name":"defaultValue","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"any","typeParameters":[],"line":24,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n根据属性路径获取对象的属性值\\n","description":"<p>根据属性路径获取对象的属性值</p>\\n","jsdoctags":[{"name":{"pos":578,"end":581,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"obj"},"type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"pos":572,"end":577,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>原始对象</p>\\n"},{"name":{"pos":600,"end":604,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"path"},"type":"string | string[]","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":594,"end":599,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>属性路径</p>\\n"},{"name":{"pos":623,"end":635,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"defaultValue"},"type":"NzSafeAny","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":617,"end":622,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当属性不存在或为undefined返回defaultValue</p>\\n"}]},{"name":"getAjaxValue","args":[{"name":"observable","type":"Observable<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"T","typeParameters":["T"],"line":254,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取同步请求的响应结果\\n```html\\nconst myObservable = this.http.get<string>(\'url\', { context: new HttpContext().set(SYNCED_ENABLED, true)});\\nconst value = getAjaxValue(myObservable); // value为string类型\\n```","description":"<p>获取同步请求的响应结果</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">const myObservable = this.http.get&lt;string&gt;(&#39;url&#39;, { context: new HttpContext().set(SYNCED_ENABLED, true)});\\nconst value = getAjaxValue(myObservable); // value为string类型</code></pre></div>","jsdoctags":[{"name":{"pos":7057,"end":7067,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"observable"},"type":"Observable<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":7051,"end":7056,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":7075,"end":7082,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>const myObservable = this.http.get<string>(&#39;url&#39;, { context: new HttpContext().set(SYNCED_ENABLED, true)});\\nconst value = getAjaxValue(myObservable); // value为string类型</p>\\n"}]},{"name":"getElement","args":[{"name":"target","type":"ElementRef | HTMLElement | string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"HTMLElement | null","typeParameters":[],"line":264,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n根据不同的参数类型 获取dom元素\\n","description":"<p>根据不同的参数类型 获取dom元素</p>\\n","jsdoctags":[{"name":{"pos":7489,"end":7495,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"target"},"type":"ElementRef | HTMLElement | string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7483,"end":7488,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"getProperty","args":[{"name":"obj","type":"T","deprecated":false,"deprecationMessage":""},{"name":"name","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":["T"],"line":74,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"obj","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"name","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getUUID","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":45,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取唯一Id号\\n","description":"<p>获取唯一Id号</p>\\n"},{"name":"is","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""},{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":361,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"type","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isArray","args":[{"name":"val","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Array<NzSafeAny>","typeParameters":[],"line":426,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isBoolean","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":418,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isChinese","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":477,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否中文\\n","description":"<p>是否中文</p>\\n","jsdoctags":[{"name":{"pos":14715,"end":14720,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":14709,"end":14714,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>测试字符串</p>\\n"}]},{"name":"isDate","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Date","typeParameters":[],"line":382,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isDef","args":[{"name":"val","type":"T","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"T","typeParameters":["T"],"line":365,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"T","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"isElement","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Element","typeParameters":[],"line":437,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isEmail","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":499,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否为邮箱\\n","description":"<p>是否为邮箱</p>\\n","jsdoctags":[{"name":{"pos":15237,"end":15242,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":15231,"end":15236,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"isEmpty","args":[{"name":"val","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"T","typeParameters":["T"],"line":377,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isFunction","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Function","typeParameters":[],"line":414,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isIp","args":[{"name":"ip","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":457,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否IP4地址（支持v4、v6）\\n","description":"<p>是否IP4地址（支持v4、v6）</p>\\n","jsdoctags":[{"name":{"pos":12962,"end":12964,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ip"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":12956,"end":12961,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"isMap","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Map<NzSafeAny | NzSafeAny>","typeParameters":[],"line":441,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isMobile","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":449,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否为手机号（中国）\\n","description":"<p>是否为手机号（中国）</p>\\n","jsdoctags":[{"name":{"pos":12804,"end":12809,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":12798,"end":12803,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"isNil","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"null | undefined","typeParameters":[],"line":390,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isNotNil","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"null | undefined","typeParameters":[],"line":394,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isNull","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"","typeParameters":[],"line":386,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isNum","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""},{"name":"minus","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true},{"name":"fraction","type":"number","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"boolean","typeParameters":[],"line":487,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否为数值\\n","description":"<p>是否为数值</p>\\n","jsdoctags":[{"name":{"pos":14858,"end":14863,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":14852,"end":14857,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":14877,"end":14882,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"minus"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":14871,"end":14876,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否允许负数</p>\\n"},{"name":{"pos":14903,"end":14911,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fraction"},"type":"number","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":14897,"end":14902,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最大保留小数位数</p>\\n"}]},{"name":"isNumber","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":398,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isObject","args":[{"name":"val","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Record<NzSafeAny | NzSafeAny>","typeParameters":[],"line":373,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isObservable","args":[{"name":"obj","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<NzSafeAny>","typeParameters":[],"line":406,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"obj","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isPlainObject","args":[{"name":"obj","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":["T"],"line":507,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否是纯对象值\\n","description":"<p>是否是纯对象值</p>\\n","jsdoctags":[{"name":{"pos":15394,"end":15397,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"obj"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":15388,"end":15393,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"isPromise","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<T>","typeParameters":["T"],"line":402,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isRegExp","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"RegExp","typeParameters":[],"line":422,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isString","args":[{"name":"val","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":410,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isUnDef","args":[{"name":"val","type":"T","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"T","typeParameters":["T"],"line":369,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"T","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"isUrl","args":[{"name":"path","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":467,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否是url\\n","description":"<p>是否是url</p>\\n","jsdoctags":[{"name":{"pos":14425,"end":14429,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"path"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":14419,"end":14424,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"isWindow","args":[{"name":"val","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Window","typeParameters":[],"line":433,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"listToTree","args":[{"name":"list","type":"T[]","deprecated":false,"deprecationMessage":""},{"name":"idName","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"\'id\'"},{"name":"pidName","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"\'pid\'"},{"name":"childrenName","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'children\'"}],"optional":false,"returnType":"T[]","typeParameters":["T"],"line":218,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n列表转树结构\\n","description":"<p>列表转树结构</p>\\n","jsdoctags":[{"name":{"pos":6143,"end":6147,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"list"},"type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":6137,"end":6142,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>列表数据</p>\\n"},{"name":{"pos":6166,"end":6172,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"idName"},"type":"","deprecated":false,"deprecationMessage":"","defaultValue":"\'id\'","tagName":{"pos":6160,"end":6165,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>id的属性名</p>\\n"},{"name":{"pos":6193,"end":6200,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"pidName"},"type":"","deprecated":false,"deprecationMessage":"","defaultValue":"\'pid\'","tagName":{"pos":6187,"end":6192,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>parentId属性名</p>\\n"},{"name":{"pos":6226,"end":6238,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"childrenName"},"type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'children\'","tagName":{"pos":6220,"end":6225,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>children属性名</p>\\n"}]},{"name":"mergeFormData","args":[{"name":"form","type":"FormData","deprecated":false,"deprecationMessage":""},{"name":"obj","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":["T"],"line":561,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n合并对象到FormData\\n","description":"<p>合并对象到FormData</p>\\n","jsdoctags":[{"name":{"pos":16650,"end":16654,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"form"},"type":"FormData","deprecated":false,"deprecationMessage":"","tagName":{"pos":16633,"end":16638,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表单</p>\\n","typeExpression":{"pos":16639,"end":16649,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":307,"type":{"pos":16640,"end":16648,"flags":4194304,"modifierFlagsCache":0,"transformFlags":1,"kind":177,"typeName":{"pos":16640,"end":16648,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"FormData"}}}},{"name":{"pos":16615,"end":16618,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"obj"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":16609,"end":16614,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>要合并的对象</p>\\n"}]},{"name":"range","args":[{"name":"start","type":"number","deprecated":false,"deprecationMessage":""},{"name":"end","type":"number","deprecated":false,"deprecationMessage":""},{"name":"fill","type":" | T","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"T[]","typeParameters":["T"],"line":132,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n根据开始和结束数字返回一个数组\\n","description":"<p>根据开始和结束数字返回一个数组</p>\\n","jsdoctags":[{"name":{"pos":3645,"end":3650,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"start"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":3639,"end":3644,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>起始数字</p>\\n"},{"name":{"pos":3669,"end":3672,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"end"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":3663,"end":3668,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>结束数字</p>\\n"},{"name":{"pos":3691,"end":3695,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fill"},"type":" | T","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":3685,"end":3690,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>填充内容,默认</p>\\n"}]},{"name":"serialize","args":[{"name":"obj","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":["T"],"line":573,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n把js对象序列化对请求数据,格式为 a=av&b=bv...&n=nv\\n","description":"<p>把js对象序列化对请求数据,格式为 a=av&amp;b=bv...&amp;n=nv</p>\\n","jsdoctags":[{"name":{"pos":16906,"end":16909,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"obj"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":16900,"end":16905,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":16917,"end":16924,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]},{"name":"serializeParams","args":[{"name":"obj","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Record[]","typeParameters":["T"],"line":587,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n把js对象序列化对请求数据\\n","description":"<p>把js对象序列化对请求数据</p>\\n","jsdoctags":[{"name":{"pos":17276,"end":17279,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"obj"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":17270,"end":17275,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":17287,"end":17294,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]},{"name":"setProperty","args":[{"name":"target","type":"T","deprecated":false,"deprecationMessage":""},{"name":"options","type":"literal type","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":["T"],"line":59,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"target","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"options","type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"toDate","args":[{"name":"date","type":"Date | string | number","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Date | null","typeParameters":[],"line":533,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n转换为日期\\n","description":"<p>转换为日期</p>\\n","jsdoctags":[{"name":{"pos":16045,"end":16049,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"date"},"type":"Date | string | number","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":16039,"end":16044,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>待转换的值</p>\\n"}]},{"name":"trim","args":[{"name":"string","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"string","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]}],"directives":[{"name":"AuthDirective","id":"directive-AuthDirective-bd1612d1e33eadfc4c49db9d0c7a9fa2c458ab1fc1a9f2c11a2aae97cd92e8d271761213d1aa833fc77d6d9ad1ba33494038114eb88f8481d6b3fbd9e1b4503b","file":"lib/directive/auth.directive.ts","type":"directive","description":"<p>权限指令, 有权限渲染模板,否则渲染else模板</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">&lt;button *auth=&quot;[&#39;code1&#39;, &#39;code2&#39;]; else notAuth&quot;&gt;有权限时显示&lt;/button&gt;\\n&lt;button *auth=&quot;&#39;code1&#39;; else notAuth&quot;&gt;有权限时显示&lt;/button&gt;\\n&lt;ng-template #notAuth&gt;没有权限时显示&lt;/ng-template&gt;</code></pre></div>","rawdescription":"\\n\\n权限指令, 有权限渲染模板,否则渲染else模板\\n```html\\n<button *auth=\\"[\'code1\', \'code2\']; else notAuth\\">有权限时显示</button>\\n<button *auth=\\"\'code1\'; else notAuth\\">有权限时显示</button>\\n<ng-template #notAuth>没有权限时显示</ng-template>\\n```","sourceCode":"import { Directive, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from \'@angular/core\';\\r\\nimport { of, Subscription } from \'rxjs\';\\r\\nimport { NzxAntdService } from \'@xmagic/nzx-antd\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\'\\r\\n\\r\\n/**\\r\\n * 权限指令, 有权限渲染模板,否则渲染else模板\\r\\n * @example\\r\\n * <button *auth=\\"[\'code1\', \'code2\']; else notAuth\\">有权限时显示</button>\\r\\n * <button *auth=\\"\'code1\'; else notAuth\\">有权限时显示</button>\\r\\n * <ng-template #notAuth>没有权限时显示</ng-template>\\r\\n */\\r\\n@Directive({\\r\\n  selector: \'[auth]\'\\r\\n})\\r\\nexport class AuthDirective<T = unknown> implements OnDestroy {\\r\\n  /** @internal */\\r\\n  static authUseIfTypeGuard: void;\\r\\n  static ngTemplateGuard_auth: \'binding\';\\r\\n  private readonly changeSubscription?: Subscription;\\r\\n  private authSubscription?: Subscription;\\r\\n\\r\\n  protected _context: AuthContext<T> = new AuthContext<T>();\\r\\n  protected _thenTemplateRef: TemplateRef<AuthContext<T>> | null = null;\\r\\n  protected _elseTemplateRef: TemplateRef<AuthContext<T>> | null = null;\\r\\n  protected _thenViewRef: EmbeddedViewRef<AuthContext<T>> | null = null;\\r\\n  protected _elseViewRef: EmbeddedViewRef<AuthContext<T>> | null = null;\\r\\n\\r\\n  /**\\r\\n   *\\r\\n   * 为 `auth` 将要渲染的模板确保正确的上下文类型。\\r\\n   * 该方法用于向 Ivy 模板类型检查编译器发出信号，即 `auth` 结构化指令会使用特定的上下文类型渲染其模板。\\r\\n   *\\r\\n   */\\r\\n  static ngTemplateContextGuard<T>(\\r\\n    dir: AuthDirective<T>,\\r\\n    ctx: NzSafeAny\\r\\n  ): ctx is AuthContext<Exclude<T, false | 0 | \'\' | null | undefined>> {\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  protected hasAuth: Required<NzxAntdService>[\'hasAuth\'] = () => of(true);\\r\\n\\r\\n  constructor(\\r\\n    protected _viewContainer: ViewContainerRef,\\r\\n    public templateRef: TemplateRef<AuthContext<T>>,\\r\\n    public antdService: NzxAntdService\\r\\n  ) {\\r\\n    this._thenTemplateRef = templateRef;\\r\\n\\r\\n    if (this.antdService.authChange) {\\r\\n      this.changeSubscription = this.antdService.authChange().subscribe(() => this._updateView());\\r\\n    }\\r\\n\\r\\n    if (this.antdService.hasAuth) {\\r\\n      this.hasAuth = this.antdService.hasAuth;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 布尔表达式，将其作为显示模板的条件进行计算。\\r\\n   *\\r\\n   */\\r\\n  @Input()\\r\\n  set auth(condition: T) {\\r\\n    this._context.$implicit = this._context.auth = condition;\\r\\n    this._updateView();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 当此条件表达式计算为 true 时要显示的模板。\\r\\n   */\\r\\n  @Input()\\r\\n  set authThen(templateRef: TemplateRef<AuthContext<T>> | null) {\\r\\n    assertTemplate(\'authThen\', templateRef);\\r\\n    this._thenTemplateRef = templateRef;\\r\\n    this._thenViewRef = null; // clear previous view if any.\\r\\n    this._updateView();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 当此条件表达式计算为 false 时要显示的模板。\\r\\n   */\\r\\n  @Input()\\r\\n  set authElse(templateRef: TemplateRef<AuthContext<T>> | null) {\\r\\n    assertTemplate(\'authElse\', templateRef);\\r\\n    this._elseTemplateRef = templateRef;\\r\\n    this._elseViewRef = null; // clear previous view if any.\\r\\n    this._updateView();\\r\\n  }\\r\\n\\r\\n  protected _updateView() {\\r\\n    if (this.authSubscription) {\\r\\n      this.authSubscription.unsubscribe();\\r\\n      this.authSubscription = undefined;\\r\\n    }\\r\\n    this.authSubscription = this.hasAuth(this._context.$implicit).subscribe(auth => {\\r\\n      if (this.canRender(auth, this._context.$implicit)) {\\r\\n        if (!this._thenViewRef) {\\r\\n          this._viewContainer.clear();\\r\\n          this._elseViewRef = null;\\r\\n          if (this._thenTemplateRef) {\\r\\n            this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        if (!this._elseViewRef) {\\r\\n          this._viewContainer.clear();\\r\\n          this._thenViewRef = null;\\r\\n          if (this._elseTemplateRef) {\\r\\n            this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否允许渲染\\r\\n   * @param hasAuth 是否有权限\\r\\n   * @param value 权限码\\r\\n   * @protected\\r\\n   */\\r\\n  protected canRender(hasAuth: boolean, value: T) {\\r\\n    return hasAuth;\\r\\n  }\\r\\n\\r\\n  ngOnDestroy(): void {\\r\\n    if (this.changeSubscription) {\\r\\n      this.changeSubscription.unsubscribe();\\r\\n    }\\r\\n    if (this.authSubscription) {\\r\\n      this.authSubscription.unsubscribe();\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @publicApi\\r\\n */\\r\\nexport class AuthContext<T = unknown> {\\r\\n  public $implicit: T = null!;\\r\\n  public auth: T = null!;\\r\\n}\\r\\n\\r\\nfunction assertTemplate(property: string, templateRef: TemplateRef<NzSafeAny> | null): void {\\r\\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\\r\\n  if (!isTemplateRefOrNull) {\\r\\n    throw new Error(`${property} must be a TemplateRef, but received \'${templateRef}\'.`);\\r\\n  }\\r\\n}\\r\\n","selector":"[auth]","providers":[],"inputsClass":[{"name":"auth","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n布尔表达式，将其作为显示模板的条件进行计算。\\n\\n","description":"<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\\n","line":65,"type":"T","decorators":[]},{"name":"authElse","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当此条件表达式计算为 false 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 false 时要显示的模板。</p>\\n","line":85,"type":"TemplateRef | null","decorators":[]},{"name":"authThen","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当此条件表达式计算为 true 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 true 时要显示的模板。</p>\\n","line":74,"type":"TemplateRef | null","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"_context","defaultValue":"new AuthContext<T>()","deprecated":false,"deprecationMessage":"","type":"AuthContext<T>","optional":false,"description":"","line":23,"modifierKind":[122]},{"name":"_elseTemplateRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"TemplateRef<AuthContext<T>> | null","optional":false,"description":"","line":25,"modifierKind":[122]},{"name":"_elseViewRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"EmbeddedViewRef<AuthContext<T>> | null","optional":false,"description":"","line":27,"modifierKind":[122]},{"name":"_thenTemplateRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"TemplateRef<AuthContext<T>> | null","optional":false,"description":"","line":24,"modifierKind":[122]},{"name":"_thenViewRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"EmbeddedViewRef<AuthContext<T>> | null","optional":false,"description":"","line":26,"modifierKind":[122]},{"name":"antdService","deprecated":false,"deprecationMessage":"","type":"NzxAntdService","optional":false,"description":"","line":47,"modifierKind":[123]},{"name":"authSubscription","deprecated":false,"deprecationMessage":"","type":"Subscription","optional":true,"description":"","line":21,"modifierKind":[121]},{"name":"authUseIfTypeGuard","deprecated":false,"deprecationMessage":"","type":"void","optional":false,"description":"","line":18,"rawdescription":"","modifierKind":[124],"jsdoctags":[{"pos":597,"end":607,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":598,"end":606,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]},{"name":"changeSubscription","deprecated":false,"deprecationMessage":"","type":"Subscription","optional":true,"description":"","line":20,"modifierKind":[121,144]},{"name":"hasAuth","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":42,"modifierKind":[122]},{"name":"ngTemplateGuard_auth","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":19,"modifierKind":[124]},{"name":"templateRef","deprecated":false,"deprecationMessage":"","type":"TemplateRef<AuthContext<T>>","optional":false,"description":"","line":46,"modifierKind":[123]}],"methodsClass":[{"name":"_updateView","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":92,"deprecated":false,"deprecationMessage":"","modifierKind":[122]},{"name":"canRender","args":[{"name":"hasAuth","type":"boolean","deprecated":false,"deprecationMessage":""},{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":124,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否允许渲染\\n","description":"<p>是否允许渲染</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":3741,"end":3748,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"hasAuth"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":3735,"end":3740,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否有权限</p>\\n"},{"name":{"pos":3768,"end":3773,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":3762,"end":3767,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>权限码</p>\\n"}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":128,"deprecated":false,"deprecationMessage":""},{"name":"ngTemplateContextGuard","args":[{"name":"dir","type":"AuthDirective<T>","deprecated":false,"deprecationMessage":""},{"name":"ctx","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"AuthContext<Exclude<T,  | \\"0\\" | string | null | undefined>>","typeParameters":["T"],"line":35,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\n为 `auth` 将要渲染的模板确保正确的上下文类型。\\n该方法用于向 Ivy 模板类型检查编译器发出信号，即 `auth` 结构化指令会使用特定的上下文类型渲染其模板。\\n\\n","description":"<p>为 <code>auth</code> 将要渲染的模板确保正确的上下文类型。\\n该方法用于向 Ivy 模板类型检查编译器发出信号，即 <code>auth</code> 结构化指令会使用特定的上下文类型渲染其模板。</p>\\n","modifierKind":[124],"jsdoctags":[{"name":"dir","type":"AuthDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"ctx","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"implements":["OnDestroy"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"_viewContainer","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""},{"name":"templateRef","type":"TemplateRef<AuthContext<T>>","deprecated":false,"deprecationMessage":""},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":42,"jsdoctags":[{"name":"_viewContainer","type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"templateRef","type":"TemplateRef<AuthContext<T>>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"auth":{"name":"auth","setSignature":{"name":"auth","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"condition","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":65,"rawdescription":"\\n\\n布尔表达式，将其作为显示模板的条件进行计算。\\n\\n","description":"<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\\n","jsdoctags":[{"name":"condition","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"authThen":{"name":"authThen","setSignature":{"name":"authThen","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"templateRef","type":"TemplateRef<AuthContext<T>> | null","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":74,"rawdescription":"\\n\\n当此条件表达式计算为 true 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 true 时要显示的模板。</p>\\n","jsdoctags":[{"name":"templateRef","type":"TemplateRef<AuthContext<T>> | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"authElse":{"name":"authElse","setSignature":{"name":"authElse","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"templateRef","type":"TemplateRef<AuthContext<T>> | null","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":85,"rawdescription":"\\n\\n当此条件表达式计算为 false 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 false 时要显示的模板。</p>\\n","jsdoctags":[{"name":"templateRef","type":"TemplateRef<AuthContext<T>> | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"AuthNotDirective","id":"directive-AuthNotDirective-484d1ebfd72b39344d50c85762b9c453e767e691690fd36015c57a2bcbba21e1e6d8a1382b751d8ff50107b34d17011241a5c2e7b997b75d981583874000d02b","file":"lib/directive/auth.not.directive.ts","type":"directive","description":"<p>权限指令, 无权限渲染模板,否则渲染else模板</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">&lt;button *auth.not=&quot;[&#39;code1&#39;, &#39;code2&#39;]; else hasAuth&quot;&gt;没有有权限时显示&lt;/button&gt;\\n&lt;button *auth.not=&quot;&#39;code1&#39;; else hasAuth&quot;&gt;没有有权限时显示&lt;/button&gt;\\n&lt;ng-template #hasAuth&gt;有权限时显示&lt;/ng-template&gt;</code></pre></div>","rawdescription":"\\n\\n权限指令, 无权限渲染模板,否则渲染else模板\\n```html\\n<button *auth.not=\\"[\'code1\', \'code2\']; else hasAuth\\">没有有权限时显示</button>\\n<button *auth.not=\\"\'code1\'; else hasAuth\\">没有有权限时显示</button>\\n<ng-template #hasAuth>有权限时显示</ng-template>\\n```","sourceCode":"import { Directive, Input, TemplateRef, ViewContainerRef } from \'@angular/core\';\\r\\nimport { NzxAntdService } from \'@xmagic/nzx-antd\';\\r\\nimport { AuthContext, AuthDirective } from \'./auth.directive\';\\r\\n\\r\\n/**\\r\\n * 权限指令, 无权限渲染模板,否则渲染else模板\\r\\n * @example\\r\\n * <button *auth.not=\\"[\'code1\', \'code2\']; else hasAuth\\">没有有权限时显示</button>\\r\\n * <button *auth.not=\\"\'code1\'; else hasAuth\\">没有有权限时显示</button>\\r\\n * <ng-template #hasAuth>有权限时显示</ng-template>\\r\\n */\\r\\n@Directive({\\r\\n  selector: \'[auth.not]\'\\r\\n})\\r\\nexport class AuthNotDirective<T = unknown> extends AuthDirective {\\r\\n  /** @internal */\\r\\n  static authNotUseIfTypeGuard: void;\\r\\n  static ngTemplateGuard_authNot: \'binding\';\\r\\n\\r\\n  /**\\r\\n   * 布尔表达式，将其作为显示模板的条件进行计算。\\r\\n   *\\r\\n   */\\r\\n  @Input(\'auth.not\')\\r\\n  set authNot(condition: T) {\\r\\n    super.auth = condition;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 当此条件表达式计算为 true 时要显示的模板。\\r\\n   */\\r\\n  @Input(\'auth.notThen\')\\r\\n  set authNotThen(templateRef: TemplateRef<AuthContext<T>> | null) {\\r\\n    super.authThen = templateRef;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 当此条件表达式计算为 false 时要显示的模板。\\r\\n   */\\r\\n  @Input(\'auth.notElse\')\\r\\n  set authNotElse(templateRef: TemplateRef<AuthContext<T>> | null) {\\r\\n    super.authElse = templateRef;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否允许渲染, 没有权限的时候渲染\\r\\n   * @param hasAuth 是否有权限\\r\\n   * @param value 权限码\\r\\n   * @protected\\r\\n   */\\r\\n  protected override canRender(hasAuth: boolean, value: T) {\\r\\n    return !hasAuth;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    protected override _viewContainer: ViewContainerRef,\\r\\n    public override templateRef: TemplateRef<AuthContext<T>>,\\r\\n    public override antdService: NzxAntdService\\r\\n  ) {\\r\\n    super(_viewContainer, templateRef, antdService);\\r\\n  }\\r\\n}\\r\\n","selector":"[auth.not]","providers":[],"inputsClass":[{"name":"auth.not","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n布尔表达式，将其作为显示模板的条件进行计算。\\n\\n","description":"<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\\n","line":25,"type":"T","decorators":[]},{"name":"auth.notElse","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当此条件表达式计算为 false 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 false 时要显示的模板。</p>\\n","line":41,"type":"TemplateRef | null","decorators":[]},{"name":"auth.notThen","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当此条件表达式计算为 true 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 true 时要显示的模板。</p>\\n","line":33,"type":"TemplateRef | null","decorators":[]},{"name":"auth","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n布尔表达式，将其作为显示模板的条件进行计算。\\n\\n","description":"<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\\n","line":65,"type":"T","decorators":[],"inheritance":{"file":"AuthDirective"}},{"name":"authElse","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当此条件表达式计算为 false 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 false 时要显示的模板。</p>\\n","line":85,"type":"TemplateRef | null","decorators":[],"inheritance":{"file":"AuthDirective"}},{"name":"authThen","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当此条件表达式计算为 true 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 true 时要显示的模板。</p>\\n","line":74,"type":"TemplateRef | null","decorators":[],"inheritance":{"file":"AuthDirective"}}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"antdService","deprecated":false,"deprecationMessage":"","type":"NzxAntdService","optional":false,"description":"","line":58,"modifierKind":[123,158],"inheritance":{"file":"AuthDirective"}},{"name":"authNotUseIfTypeGuard","deprecated":false,"deprecationMessage":"","type":"void","optional":false,"description":"","line":17,"rawdescription":"","modifierKind":[124],"jsdoctags":[{"pos":556,"end":566,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":557,"end":565,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]},{"name":"ngTemplateGuard_authNot","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":18,"modifierKind":[124]},{"name":"templateRef","deprecated":false,"deprecationMessage":"","type":"TemplateRef<AuthContext<T>>","optional":false,"description":"","line":57,"modifierKind":[123,158],"inheritance":{"file":"AuthDirective"}},{"name":"_context","defaultValue":"new AuthContext<T>()","deprecated":false,"deprecationMessage":"","type":"AuthContext<T>","optional":false,"description":"","line":23,"modifierKind":[122],"inheritance":{"file":"AuthDirective"}},{"name":"_elseTemplateRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"TemplateRef<AuthContext<T>> | null","optional":false,"description":"","line":25,"modifierKind":[122],"inheritance":{"file":"AuthDirective"}},{"name":"_elseViewRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"EmbeddedViewRef<AuthContext<T>> | null","optional":false,"description":"","line":27,"modifierKind":[122],"inheritance":{"file":"AuthDirective"}},{"name":"_thenTemplateRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"TemplateRef<AuthContext<T>> | null","optional":false,"description":"","line":24,"modifierKind":[122],"inheritance":{"file":"AuthDirective"}},{"name":"_thenViewRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"EmbeddedViewRef<AuthContext<T>> | null","optional":false,"description":"","line":26,"modifierKind":[122],"inheritance":{"file":"AuthDirective"}},{"name":"authSubscription","deprecated":false,"deprecationMessage":"","type":"Subscription","optional":true,"description":"","line":21,"modifierKind":[121],"inheritance":{"file":"AuthDirective"}},{"name":"authUseIfTypeGuard","deprecated":false,"deprecationMessage":"","type":"void","optional":false,"description":"","line":18,"rawdescription":"","modifierKind":[124],"jsdoctags":[{"pos":597,"end":607,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":598,"end":606,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"inheritance":{"file":"AuthDirective"}},{"name":"changeSubscription","deprecated":false,"deprecationMessage":"","type":"Subscription","optional":true,"description":"","line":20,"modifierKind":[121,144],"inheritance":{"file":"AuthDirective"}},{"name":"hasAuth","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":42,"modifierKind":[122],"inheritance":{"file":"AuthDirective"}},{"name":"ngTemplateGuard_auth","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":19,"modifierKind":[124],"inheritance":{"file":"AuthDirective"}}],"methodsClass":[{"name":"canRender","args":[{"name":"hasAuth","type":"boolean","deprecated":false,"deprecationMessage":""},{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":51,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否允许渲染, 没有权限的时候渲染\\n","description":"<p>是否允许渲染, 没有权限的时候渲染</p>\\n","modifierKind":[122,158],"jsdoctags":[{"name":{"pos":1205,"end":1212,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"hasAuth"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":1199,"end":1204,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否有权限</p>\\n"},{"name":{"pos":1232,"end":1237,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":1226,"end":1231,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>权限码</p>\\n"}],"inheritance":{"file":"AuthDirective"}},{"name":"_updateView","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":92,"deprecated":false,"deprecationMessage":"","modifierKind":[122],"inheritance":{"file":"AuthDirective"}},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":128,"deprecated":false,"deprecationMessage":"","inheritance":{"file":"AuthDirective"}},{"name":"ngTemplateContextGuard","args":[{"name":"dir","type":"AuthDirective<T>","deprecated":false,"deprecationMessage":""},{"name":"ctx","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"AuthContext<Exclude<T,  | \\"0\\" | string | null | undefined>>","typeParameters":["T"],"line":35,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\n为 `auth` 将要渲染的模板确保正确的上下文类型。\\n该方法用于向 Ivy 模板类型检查编译器发出信号，即 `auth` 结构化指令会使用特定的上下文类型渲染其模板。\\n\\n","description":"<p>为 <code>auth</code> 将要渲染的模板确保正确的上下文类型。\\n该方法用于向 Ivy 模板类型检查编译器发出信号，即 <code>auth</code> 结构化指令会使用特定的上下文类型渲染其模板。</p>\\n","modifierKind":[124],"jsdoctags":[{"name":"dir","type":"AuthDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"ctx","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}],"inheritance":{"file":"AuthDirective"}}],"extends":"AuthDirective","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"_viewContainer","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""},{"name":"templateRef","type":"TemplateRef<AuthContext<T>>","deprecated":false,"deprecationMessage":""},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":53,"jsdoctags":[{"name":"_viewContainer","type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"templateRef","type":"TemplateRef<AuthContext<T>>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"authNot":{"name":"authNot","setSignature":{"name":"authNot","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"condition","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":25,"rawdescription":"\\n\\n布尔表达式，将其作为显示模板的条件进行计算。\\n\\n","description":"<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\\n","jsdoctags":[{"name":"condition","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"authNotThen":{"name":"authNotThen","setSignature":{"name":"authNotThen","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"templateRef","type":"TemplateRef<AuthContext<T>> | null","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":33,"rawdescription":"\\n\\n当此条件表达式计算为 true 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 true 时要显示的模板。</p>\\n","jsdoctags":[{"name":"templateRef","type":"TemplateRef<AuthContext<T>> | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"authNotElse":{"name":"authNotElse","setSignature":{"name":"authNotElse","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"templateRef","type":"TemplateRef<AuthContext<T>> | null","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":41,"rawdescription":"\\n\\n当此条件表达式计算为 false 时要显示的模板。\\n","description":"<p>当此条件表达式计算为 false 时要显示的模板。</p>\\n","jsdoctags":[{"name":"templateRef","type":"TemplateRef<AuthContext<T>> | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"ClickOnceDirective","id":"directive-ClickOnceDirective-4878c0821a48a8b5c1fbd37d87e26480ffd02838ef56ddc8b0268050c590e70f6e6ba38cd71e99644ec89a4fe97e68f328682345ba59f972425d5b07f7d46459","file":"lib/directive/click.once.directive.ts","type":"directive","description":"<p>防止重复触发点击</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">&lt;button (click.once)=&quot;myMethod($event)&quot; [delay]=&quot;1000&quot; (originClick)=&quot;method($event)&quot;&gt;按钮&lt;/button&gt;</code></pre></div>","rawdescription":"\\n\\n防止重复触发点击\\n```html\\n<button (click.once)=\\"myMethod($event)\\" [delay]=\\"1000\\" (originClick)=\\"method($event)\\">按钮</button>\\n```","sourceCode":"import { Directive, EventEmitter, HostListener, Input, Output } from \'@angular/core\';\\r\\nimport { InputBoolean } from \'ng-zorro-antd/core/util\';\\r\\n\\r\\n/**\\r\\n * 防止重复触发点击\\r\\n * @example\\r\\n * <button (click.once)=\\"myMethod($event)\\" [delay]=\\"1000\\" (originClick)=\\"method($event)\\">按钮</button>\\r\\n */\\r\\n@Directive({\\r\\n  selector: \'[click.once]\'\\r\\n})\\r\\nexport class ClickOnceDirective {\\r\\n  constructor() {}\\r\\n\\r\\n  /**\\r\\n   * 点击延迟时间(单位:ms)\\r\\n   */\\r\\n  @Input() delay = 500;\\r\\n  @Input() @InputBoolean() disabled = false;\\r\\n  /**\\r\\n   * neClick事件\\r\\n   */\\r\\n  @Output(\'click.once\') clickEvent = new EventEmitter<MouseEvent>();\\r\\n  /**\\r\\n   * 原始点击事件\\r\\n   * delay - 是否处于延迟状态\\r\\n   */\\r\\n  @Output() originClick = new EventEmitter<{ target: MouseEvent; delay: boolean }>();\\r\\n  private _delayDisabled = false;\\r\\n\\r\\n  @HostListener(\'click\', [\'$event\'])\\r\\n  clickEventHandle(event: MouseEvent): void {\\r\\n    if (this.disabled) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    this.originClick.emit({ target: event, delay: this._delayDisabled });\\r\\n    if (this._delayDisabled) {\\r\\n      event.preventDefault();\\r\\n      event.stopPropagation();\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    this._delayDisabled = true;\\r\\n    setTimeout(() => (this._delayDisabled = false), this.delay);\\r\\n    this.clickEvent.emit(event);\\r\\n  }\\r\\n\\r\\n}\\r\\n","selector":"[click.once]","providers":[],"inputsClass":[{"name":"delay","defaultValue":"500","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n点击延迟时间(单位:ms)\\n","description":"<p>点击延迟时间(单位:ms)</p>\\n","line":18,"type":"number","decorators":[]},{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":19,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]}],"outputsClass":[{"name":"click.once","defaultValue":"new EventEmitter<MouseEvent>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nneClick事件\\n","description":"<p>neClick事件</p>\\n","line":23,"type":"EventEmitter"},{"name":"originClick","defaultValue":"new EventEmitter<{ target: MouseEvent; delay: boolean }>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n原始点击事件\\ndelay - 是否处于延迟状态\\n","description":"<p>原始点击事件\\ndelay - 是否处于延迟状态</p>\\n","line":28,"type":"EventEmitter"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":32}],"propertiesClass":[{"name":"_delayDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":29,"modifierKind":[121]}],"methodsClass":[{"name":"clickEventHandle","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":32,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"jsdoctags":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":12}},{"name":"ClickOutsideDirective","id":"directive-ClickOutsideDirective-197f7026f6a8c720beb3eee900fcf15057a960e0536fc96105222a0968338e54f66e10b47768e4111e59cd5fcff6def86a8e5cc1e4d0cf843b09f25cc5cad34a","file":"lib/directive/click-outside.directive.ts","type":"directive","description":"","rawdescription":"\\n","sourceCode":"import {\\r\\n  Directive,\\r\\n  ElementRef,\\r\\n  EventEmitter,\\r\\n  Inject,\\r\\n  Input,\\r\\n  OnChanges,\\r\\n  OnDestroy,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  PLATFORM_ID,\\r\\n  SimpleChanges,\\r\\n  NgZone\\r\\n} from \'@angular/core\';\\r\\nimport { isPlatformBrowser } from \'@angular/common\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[click.outside]\',\\r\\n  exportAs: \'clickOutside\'\\r\\n})\\r\\nexport class ClickOutsideDirective implements OnInit, OnChanges, OnDestroy {\\r\\n  @Input() clickOutsideEnabled = true;\\r\\n\\r\\n  @Input() attachOutsideOnClick = false;\\r\\n  @Input() delayClickOutsideInit = false;\\r\\n  @Input() emitOnBlur = false;\\r\\n\\r\\n  @Input() exclude?: string;\\r\\n  @Input() excludeBeforeClick?: boolean;\\r\\n\\r\\n  @Input() clickOutsideEvents?: string;\\r\\n\\r\\n  @Output(\'click.outside\') clickOutside: EventEmitter<Event> = new EventEmitter<Event>();\\r\\n\\r\\n  private _nodesExcluded: Array<HTMLElement> = [];\\r\\n  private _events: Array<string> = [\'click\'];\\r\\n\\r\\n  constructor(private _el: ElementRef, private _ngZone: NgZone, @Inject(PLATFORM_ID) private platformId: Object) {\\r\\n    this._initOnClickBody = this._initOnClickBody.bind(this);\\r\\n    this._onClickBody = this._onClickBody.bind(this);\\r\\n    this._onWindowBlur = this._onWindowBlur.bind(this);\\r\\n  }\\r\\n\\r\\n  ngOnInit() {\\r\\n    if (!isPlatformBrowser(this.platformId)) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    this._init();\\r\\n  }\\r\\n\\r\\n  ngOnDestroy() {\\r\\n    if (!isPlatformBrowser(this.platformId)) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    this._removeClickOutsideListener();\\r\\n    this._removeAttachOutsideOnClickListener();\\r\\n    this._removeWindowBlurListener();\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: SimpleChanges) {\\r\\n    if (!isPlatformBrowser(this.platformId)) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (changes[\'attachOutsideOnClick\'] || changes[\'exclude\'] || changes[\'emitOnBlur\']) {\\r\\n      this._init();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private _init() {\\r\\n    if (this.clickOutsideEvents != null) {\\r\\n      this._events = this.clickOutsideEvents!.split(\',\').map(e => e.trim());\\r\\n    }\\r\\n\\r\\n    this._excludeCheck();\\r\\n\\r\\n    if (this.attachOutsideOnClick) {\\r\\n      this._initAttachOutsideOnClickListener();\\r\\n    } else {\\r\\n      this._initOnClickBody();\\r\\n    }\\r\\n\\r\\n    if (this.emitOnBlur) {\\r\\n      this._initWindowBlurListener();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private _initOnClickBody() {\\r\\n    if (this.delayClickOutsideInit) {\\r\\n      setTimeout(this._initClickOutsideListener.bind(this));\\r\\n    } else {\\r\\n      this._initClickOutsideListener();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private _excludeCheck() {\\r\\n    if (this.exclude) {\\r\\n      try {\\r\\n        const nodes = Array.from(document.querySelectorAll(this.exclude)) as Array<HTMLElement>;\\r\\n        if (nodes) {\\r\\n          this._nodesExcluded = nodes;\\r\\n        }\\r\\n      } catch (err) {\\r\\n        console.error(\'[ng-click-outside] Check your exclude selector syntax.\', err);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private _onClickBody(ev: Event) {\\r\\n    if (!this.clickOutsideEnabled) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (this.excludeBeforeClick) {\\r\\n      this._excludeCheck();\\r\\n    }\\r\\n\\r\\n    if (!this._el.nativeElement.contains(ev.target) && !this._shouldExclude(ev.target as HTMLElement)) {\\r\\n      this._emit(ev);\\r\\n\\r\\n      if (this.attachOutsideOnClick) {\\r\\n        this._removeClickOutsideListener();\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Resolves problem with outside click on iframe\\r\\n   * @see https://github.com/arkon/ng-click-outside/issues/32\\r\\n   */\\r\\n  private _onWindowBlur(ev: Event) {\\r\\n    setTimeout(() => {\\r\\n      if (!document.hidden) {\\r\\n        this._emit(ev);\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n\\r\\n  private _emit(ev: Event) {\\r\\n    if (!this.clickOutsideEnabled) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    this._ngZone.run(() => this.clickOutside.emit(ev));\\r\\n  }\\r\\n\\r\\n  private _shouldExclude(target: HTMLElement): boolean {\\r\\n    for (const excludedNode of this._nodesExcluded) {\\r\\n      if (excludedNode.contains(target)) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  private _initClickOutsideListener() {\\r\\n    this._ngZone.runOutsideAngular(() => {\\r\\n      this._events.forEach(e => document.addEventListener(e, this._onClickBody));\\r\\n    });\\r\\n  }\\r\\n\\r\\n  private _removeClickOutsideListener() {\\r\\n    this._ngZone.runOutsideAngular(() => {\\r\\n      this._events.forEach(e => document.removeEventListener(e, this._onClickBody));\\r\\n    });\\r\\n  }\\r\\n\\r\\n  private _initAttachOutsideOnClickListener() {\\r\\n    this._ngZone.runOutsideAngular(() => {\\r\\n      this._events.forEach(e => this._el.nativeElement.addEventListener(e, this._initOnClickBody));\\r\\n    });\\r\\n  }\\r\\n\\r\\n  private _removeAttachOutsideOnClickListener() {\\r\\n    this._ngZone.runOutsideAngular(() => {\\r\\n      this._events.forEach(e => this._el.nativeElement.removeEventListener(e, this._initOnClickBody));\\r\\n    });\\r\\n  }\\r\\n\\r\\n  private _initWindowBlurListener() {\\r\\n    this._ngZone.runOutsideAngular(() => {\\r\\n      window.addEventListener(\'blur\', this._onWindowBlur);\\r\\n    });\\r\\n  }\\r\\n\\r\\n  private _removeWindowBlurListener() {\\r\\n    this._ngZone.runOutsideAngular(() => {\\r\\n      window.removeEventListener(\'blur\', this._onWindowBlur);\\r\\n    });\\r\\n  }\\r\\n}\\r\\n","selector":"[click.outside]","providers":[],"inputsClass":[{"name":"attachOutsideOnClick","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":24,"type":"boolean","decorators":[]},{"name":"clickOutsideEnabled","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":22,"type":"boolean","decorators":[]},{"name":"clickOutsideEvents","deprecated":false,"deprecationMessage":"","line":31,"type":"string","decorators":[]},{"name":"delayClickOutsideInit","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":25,"type":"boolean","decorators":[]},{"name":"emitOnBlur","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":26,"type":"boolean","decorators":[]},{"name":"exclude","deprecated":false,"deprecationMessage":"","line":28,"type":"string","decorators":[]},{"name":"excludeBeforeClick","deprecated":false,"deprecationMessage":"","line":29,"type":"boolean","decorators":[]}],"outputsClass":[{"name":"click.outside","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":33,"type":"EventEmitter<Event>"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"_events","defaultValue":"[\'click\']","deprecated":false,"deprecationMessage":"","type":"Array<string>","optional":false,"description":"","line":36,"modifierKind":[121]},{"name":"_nodesExcluded","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"Array<HTMLElement>","optional":false,"description":"","line":35,"modifierKind":[121]}],"methodsClass":[{"name":"_emit","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":141,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"_excludeCheck","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":98,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_init","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":72,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_initAttachOutsideOnClickListener","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":170,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_initClickOutsideListener","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":158,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_initOnClickBody","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":90,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_initWindowBlurListener","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":182,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_onClickBody","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":111,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"_onWindowBlur","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":133,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nResolves problem with outside click on iframe\\nSee https://github.com/arkon/ng-click-outside/issues/32\\n","description":"<p>Resolves problem with outside click on iframe\\nSee <a href=\\"https://github.com/arkon/ng-click-outside/issues/32\\">https://github.com/arkon/ng-click-outside/issues/32</a></p>\\n","modifierKind":[121],"jsdoctags":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"_removeAttachOutsideOnClickListener","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":176,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_removeClickOutsideListener","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":164,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_removeWindowBlurListener","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":188,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"_shouldExclude","args":[{"name":"target","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":149,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"target","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":62,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":52,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":44,"deprecated":false,"deprecationMessage":""}],"implements":["OnInit","OnChanges","OnDestroy"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"_el","type":"ElementRef","deprecated":false,"deprecationMessage":""},{"name":"_ngZone","type":"NgZone","deprecated":false,"deprecationMessage":""},{"name":"platformId","type":"Object","deprecated":false,"deprecationMessage":""}],"line":36,"jsdoctags":[{"name":"_el","type":"ElementRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"_ngZone","type":"NgZone","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"platformId","type":"Object","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"DownFileDirective","id":"directive-DownFileDirective-e431c2f5e3e1e885c77780c8da197c2685e76ae3692c9d80c7b1bcab80e83401b77ef11640101c88a482c1c50813ae7a7759d08b058a999b1fa478245ceda5e4","file":"lib/directive/down-file.directive.ts","type":"directive","description":"","rawdescription":"\\n","sourceCode":"import { Directive, HostListener, Input } from \'@angular/core\';\\r\\nimport { DownloadOption, NzxDownloadService } from \'@xmagic/nzx-antd/service\';\\r\\nimport { FetchOptions } from \'@xmagic/nzx-antd/service\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[down-file]\',\\r\\n  exportAs: \'downFile\'\\r\\n})\\r\\nexport class DownFileDirective {\\r\\n  /**\\r\\n   * 下载文件的url\\r\\n   */\\r\\n  @Input(\'down-file\') url!: string;\\r\\n  /**\\r\\n   * 是否禁用点击下载\\r\\n   */\\r\\n  @Input() disabled = false;\\r\\n  /**\\r\\n   * 请求方式\\r\\n   */\\r\\n  @Input() method: FetchOptions[\'method\'] = \'get\';\\r\\n  /**\\r\\n   * 请求参数\\r\\n   */\\r\\n  @Input() data?: FetchOptions[\'data\'];\\r\\n  /**\\r\\n   * 发送之前的回调函数\\r\\n   */\\r\\n  @Input() beforeSend?: FetchOptions[\'beforeSend\'];\\r\\n\\r\\n  /**\\r\\n   * 请求完成后的回调\\r\\n   */\\r\\n  @Input() afterDownload?: DownloadOption[\'afterDownload\'];\\r\\n\\r\\n  /**\\r\\n   * 下载并保存完成的回调\\r\\n   */\\r\\n  @Input() downloadDone?: DownloadOption[\'downloadDone\'];\\r\\n\\r\\n  constructor(private downloadService: NzxDownloadService) {}\\r\\n\\r\\n  @HostListener(\'click\', [\'$event\'])\\r\\n  clickEventHandler(event: MouseEvent) {\\r\\n    event.preventDefault();\\r\\n    event.stopPropagation();\\r\\n\\r\\n    if (this.disabled) {\\r\\n      return;\\r\\n    }\\r\\n    this.downloadService.download({\\r\\n      url: this.url,\\r\\n      method: this.method,\\r\\n      data: this.data,\\r\\n      beforeSend: this.beforeSend,\\r\\n      afterDownload: this.afterDownload,\\r\\n      downloadDone: this.downloadDone\\r\\n    });\\r\\n  }\\r\\n}\\r\\n","selector":"[down-file]","providers":[],"inputsClass":[{"name":"afterDownload","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求完成后的回调\\n","description":"<p>请求完成后的回调</p>\\n","line":34,"type":"","decorators":[]},{"name":"beforeSend","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n发送之前的回调函数\\n","description":"<p>发送之前的回调函数</p>\\n","line":29,"type":"","decorators":[]},{"name":"data","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求参数\\n","description":"<p>请求参数</p>\\n","line":25,"type":"","decorators":[]},{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否禁用点击下载\\n","description":"<p>是否禁用点击下载</p>\\n","line":17,"type":"boolean","decorators":[]},{"name":"down-file","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n下载文件的url\\n","description":"<p>下载文件的url</p>\\n","line":13,"type":"string","decorators":[]},{"name":"downloadDone","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n下载并保存完成的回调\\n","description":"<p>下载并保存完成的回调</p>\\n","line":39,"type":"","decorators":[]},{"name":"method","defaultValue":"\'get\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求方式\\n","description":"<p>请求方式</p>\\n","line":21,"type":"","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":44}],"propertiesClass":[],"methodsClass":[{"name":"clickEventHandler","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":44,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"jsdoctags":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"downloadService","type":"NzxDownloadService","deprecated":false,"deprecationMessage":""}],"line":39,"jsdoctags":[{"name":"downloadService","type":"NzxDownloadService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"FaIconDirective","id":"directive-FaIconDirective-7f01856f28b15bb63df77d8ffbcfd0282c53df58b4554b5b4d916998550094dc2fb280737747cda0eebd1e0765edce40561058fe02a8c38c85be4aa0b88fc104","file":"lib/directive/fa-icon.directive.ts","type":"directive","description":"<p>font-awesome 使用指令\\n@\\n&lt;i</p>\\n","rawdescription":"\\n\\nfont-awesome 使用指令\\n@\\n<i\\n","sourceCode":"import { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2, SimpleChange, SimpleChanges } from \'@angular/core\';\\r\\n\\r\\n/**\\r\\n * font-awesome 使用指令\\r\\n * @\\r\\n * <i\\r\\n */\\r\\n@Directive({\\r\\n  selector: \'[fa-icon]\',\\r\\n  exportAs: \'faIcon\',\\r\\n  host: {\\r\\n    \'[class.fa]\': `type === \'fa\'`,\\r\\n    \'[class.far]\': `type === \'far\'`,\\r\\n    \'[class.fa-spin]\': \'spin === true\',\\r\\n    \'[class.fa-pulse]\': \'pulse === true\',\\r\\n    \'[class.fa-fw]\': \'fixedWidth === true\',\\r\\n    \'[class.fa-border]\': \'border === true\',\\r\\n    \'[class.fa-inverse]\': \'inverse === true\',\\r\\n    \'[class.fa-flip-horizontal]\': `flip === \'horizontal\'`,\\r\\n    \'[class.fa-flip-vertical]\': `flip === \'vertical\'`,\\r\\n    \'[class.fa-flip-both]\': `flip === \'both\'`,\\r\\n    \'[class.fa-pull-left]\': `pull === \'left\'`,\\r\\n    \'[class.fa-pull-right]\': `pull === \'right\'`,\\r\\n    \'[class.fa-rotate-90]\': `rotate === 90`,\\r\\n    \'[class.fa-rotate-180]\': `rotate === 180`,\\r\\n    \'[class.fa-rotate-270]\': `rotate === 270`,\\r\\n    \'[class.fa-stack-1x]\': `stackItemSize === \'1x\'`,\\r\\n    \'[class.fa-stack-2x]\': `stackItemSize === \'2x\'`\\r\\n  }\\r\\n})\\r\\nexport class FaIconDirective implements OnInit, OnChanges {\\r\\n  @Input(\'fa-icon\') icon!: string;\\r\\n  @Input() type: \'far\' | \'fa\' = \'fa\';\\r\\n  @Input() spin?: boolean;\\r\\n  @Input() pulse?: boolean;\\r\\n  @Input() flip?: \'horizontal\' | \'vertical\' | \'both\';\\r\\n  @Input() pull?: \'left\' | \'right\';\\r\\n  @Input() border?: boolean;\\r\\n  @Input() inverse?: boolean;\\r\\n  @Input() symbol?: string | boolean;\\r\\n  @Input() rotate?: 90 | 180 | 270;\\r\\n  @Input() fixedWidth?: boolean;\\r\\n  @Input() stackItemSize?: \'1x\' | \'2x\';\\r\\n  @Input() size?: IconSizeType;\\r\\n\\r\\n  constructor(public render: Renderer2, public element: ElementRef) {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.renderIcon(this.icon);\\r\\n    this.renderSize(this.size);\\r\\n  }\\r\\n\\r\\n  renderIcon(newIcon: string | null, oldIcon?: string | null) {\\r\\n    if (oldIcon) {\\r\\n      this.getIconClass(oldIcon).forEach(cls => this.render.removeClass(this.element.nativeElement, cls));\\r\\n    }\\r\\n    if (newIcon) {\\r\\n      this.getIconClass(newIcon).forEach(cls => this.render.addClass(this.element.nativeElement, cls));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  getIconClass(icon: string): string[] {\\r\\n    return icon ? icon.split(/\\\\s/) : [];\\r\\n  }\\r\\n\\r\\n  renderSize(newSize?: IconSizeType, oldSize?: IconSizeType) {\\r\\n    const newSizeCls = newSize ? `fa-${newSize}` : null;\\r\\n    const oldSizeCls = oldSize ? `fa-${oldSize}` : null;\\r\\n    this.renderIcon(newSizeCls, oldSizeCls);\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\\r\\n    if (changes.icon && !changes.icon.isFirstChange()) {\\r\\n      this.renderIcon(changes.icon.currentValue, changes.icon.previousValue);\\r\\n    }\\r\\n\\r\\n    if (changes.size && !changes.size.isFirstChange()) {\\r\\n      this.renderSize(changes.size.currentValue, changes.size.previousValue);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nexport type IconSizeType = \'xs\' | \'lg\' | \'sm\' | \'1x\' | \'2x\' | \'3x\' | \'4x\' | \'5x\' | \'6x\' | \'7x\' | \'8x\' | \'9x\' | \'10x\';\\r\\n","selector":"[fa-icon]","providers":[],"inputsClass":[{"name":"border","deprecated":false,"deprecationMessage":"","line":38,"type":"boolean","decorators":[]},{"name":"fa-icon","deprecated":false,"deprecationMessage":"","line":32,"type":"string","decorators":[]},{"name":"fixedWidth","deprecated":false,"deprecationMessage":"","line":42,"type":"boolean","decorators":[]},{"name":"flip","deprecated":false,"deprecationMessage":"","line":36,"type":"\\"horizontal\\" | \\"vertical\\" | \\"both\\"","decorators":[]},{"name":"inverse","deprecated":false,"deprecationMessage":"","line":39,"type":"boolean","decorators":[]},{"name":"pull","deprecated":false,"deprecationMessage":"","line":37,"type":"\\"left\\" | \\"right\\"","decorators":[]},{"name":"pulse","deprecated":false,"deprecationMessage":"","line":35,"type":"boolean","decorators":[]},{"name":"rotate","deprecated":false,"deprecationMessage":"","line":41,"type":"\\"90\\" | \\"180\\" | \\"270\\"","decorators":[]},{"name":"size","deprecated":false,"deprecationMessage":"","line":44,"type":"IconSizeType","decorators":[]},{"name":"spin","deprecated":false,"deprecationMessage":"","line":34,"type":"boolean","decorators":[]},{"name":"stackItemSize","deprecated":false,"deprecationMessage":"","line":43,"type":"\\"1x\\" | \\"2x\\"","decorators":[]},{"name":"symbol","deprecated":false,"deprecationMessage":"","line":40,"type":"string | boolean","decorators":[]},{"name":"type","defaultValue":"\'fa\'","deprecated":false,"deprecationMessage":"","line":33,"type":"\\"far\\" | \\"fa\\"","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"element","deprecated":false,"deprecationMessage":"","type":"ElementRef","optional":false,"description":"","line":46,"modifierKind":[123]},{"name":"render","deprecated":false,"deprecationMessage":"","type":"Renderer2","optional":false,"description":"","line":46,"modifierKind":[123]}],"methodsClass":[{"name":"getIconClass","args":[{"name":"icon","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string[]","typeParameters":[],"line":62,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"icon","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnChanges","args":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":72,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":48,"deprecated":false,"deprecationMessage":""},{"name":"renderIcon","args":[{"name":"newIcon","type":"string | null","deprecated":false,"deprecationMessage":""},{"name":"oldIcon","type":"string | null","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":53,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"newIcon","type":"string | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"oldIcon","type":"string | null","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"renderSize","args":[{"name":"newSize","type":"IconSizeType","deprecated":false,"deprecationMessage":"","optional":true},{"name":"oldSize","type":"IconSizeType","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":66,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"newSize","type":"IconSizeType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}},{"name":"oldSize","type":"IconSizeType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"implements":["OnInit","OnChanges"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"render","type":"Renderer2","deprecated":false,"deprecationMessage":""},{"name":"element","type":"ElementRef","deprecated":false,"deprecationMessage":""}],"line":44,"jsdoctags":[{"name":"render","type":"Renderer2","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"element","type":"ElementRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"LetDirective","id":"directive-LetDirective-3c03768af4325822c834e19d0f50d87d5153d3255a36f5ab67bb7681a9c4fde5081489f6803b058f6e9e1df93df555885799f14952d7e9374e40a49bd68d39c8","file":"lib/directive/let.directive.ts","type":"directive","description":"<p>允许在模板内复用计算值（包含异步），避免重复重新计算。</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\"></code></pre></div><div *let=\\"value1 as v\\">\\n  <p>{{ v }}</p>\\n</div>\\n<div *let=\\"time$ | async as time\\">\\n  <p>{{ time }}</p>\\n</div>\\n","rawdescription":"\\n\\n允许在模板内复用计算值（包含异步），避免重复重新计算。\\n```html\\n```\\n<div *let=\\"value1 as v\\">\\n  <p>{{ v }}</p>\\n</div>\\n<div *let=\\"time$ | async as time\\">\\n  <p>{{ time }}</p>\\n</div>\\n","sourceCode":"import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n/**\\r\\n * 允许在模板内复用计算值（包含异步），避免重复重新计算。\\r\\n * @example\\r\\n *\\r\\n * <div *let=\\"value1 as v\\">\\r\\n *   <p>{{ v }}</p>\\r\\n * </div>\\r\\n * <div *let=\\"time$ | async as time\\">\\r\\n *   <p>{{ time }}</p>\\r\\n * </div>\\r\\n */\\r\\n@Directive({ selector: \'[let]\' })\\r\\nexport class LetDirective<T> {\\r\\n  @Input() let!: T;\\r\\n\\r\\n  constructor(@Inject(ViewContainerRef) vc: ViewContainerRef, @Inject(TemplateRef) ref: TemplateRef<LetContext<T>>) {\\r\\n    vc.createEmbeddedView(ref, new LetContext<T>(this));\\r\\n  }\\r\\n\\r\\n  static ngTemplateContextGuard<T>(_dir: LetDirective<T>, _ctx: NzSafeAny): _ctx is LetDirective<T> {\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\\r\\nexport class LetContext<T> {\\r\\n  constructor(private readonly directive: LetDirective<T>) {}\\r\\n\\r\\n  get $implicit(): T {\\r\\n    return this.directive.let;\\r\\n  }\\r\\n\\r\\n  get let(): T {\\r\\n    return this.directive.let;\\r\\n  }\\r\\n}\\r\\n","selector":"[let]","providers":[],"inputsClass":[{"name":"let","deprecated":false,"deprecationMessage":"","line":17,"type":"T","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"ngTemplateContextGuard","args":[{"name":"_dir","type":"LetDirective<T>","deprecated":false,"deprecationMessage":""},{"name":"_ctx","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"LetDirective<T>","typeParameters":["T"],"line":23,"deprecated":false,"deprecationMessage":"","modifierKind":[124],"jsdoctags":[{"name":"_dir","type":"LetDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"_ctx","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"vc","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""},{"name":"ref","type":"TemplateRef<LetContext<T>>","deprecated":false,"deprecationMessage":""}],"line":17,"jsdoctags":[{"name":"vc","type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"ref","type":"TemplateRef<LetContext<T>>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"NamedTemplate","id":"directive-NamedTemplate-eff7ad8ef82ae62b616a423c45e4ed8c2055748e1dea4b2d337a165e7b68d34067516f29a90274dc939056fac53a7cc9fc10a95f969380e9848741a614f96313","file":"lib/directive/named-template.ts","type":"directive","description":"<p>获取模板名称</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">``` html\\n&lt;ng-template named=&quot;test&quot;&gt;&lt;/ng-template&gt;\\n&lt;ng-template #test named&gt;&lt;/ng-template&gt;</code></pre></div><div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">``` javascript\\n&#64;Component(...)\\nexport class TestComponent {\\n  &#64;ViewChildren(NamedTemplate) list!: QueryList&lt;NamedTemplate&gt;;\\n\\n  trace() {\\n    this.list.forEach(it =&gt; {\\n      console.log(it.named);\\n      console.log(it.template);\\n    });\\n  }\\n}</code></pre></div>","rawdescription":"\\n\\n获取模板名称\\n```html\\n``` html\\n<ng-template named=\\"test\\"></ng-template>\\n<ng-template #test named></ng-template>\\n```\\n```\\n``` javascript\\n@Component(...)\\nexport class TestComponent {\\n  @ViewChildren(NamedTemplate) list!: QueryList<NamedTemplate>;\\n\\n  trace() {\\n    this.list.forEach(it => {\\n      console.log(it.named);\\n      console.log(it.template);\\n    });\\n  }\\n}\\n```\\n","sourceCode":"import { Directive, Input, OnInit, TemplateRef } from \'@angular/core\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n/**\\r\\n * 获取模板名称\\r\\n * @example\\r\\n * ``` html\\r\\n * <ng-template named=\\"test\\"></ng-template>\\r\\n * <ng-template #test named></ng-template>\\r\\n *\\r\\n * ```\\r\\n * ``` javascript\\r\\n * @Component(...)\\r\\n * export class TestComponent {\\r\\n *   @ViewChildren(NamedTemplate) list!: QueryList<NamedTemplate>;\\r\\n *\\r\\n *   trace() {\\r\\n *     this.list.forEach(it => {\\r\\n *       console.log(it.named);\\r\\n *       console.log(it.template);\\r\\n *     });\\r\\n *   }\\r\\n * }\\r\\n * ```\\r\\n */\\r\\n@Directive({\\r\\n  selector: \'ng-template[named]\',\\r\\n  exportAs: \'namedTemplate\'\\r\\n})\\r\\nexport class NamedTemplate<T> implements OnInit {\\r\\n  /**\\r\\n   * 模板名称\\r\\n   */\\r\\n  @Input() named!: string;\\r\\n  constructor(public template: TemplateRef<T>) {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.resolveName();\\r\\n  }\\r\\n\\r\\n  resolveName() {\\r\\n    if (!this.named && this.template) {\\r\\n      const tplRef = this.template as NzSafeAny;\\r\\n      // localNames为数组, 如果没有name则为null\\r\\n      this.named = tplRef._declarationTContainer.localNames?.[0];\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","selector":"ng-template[named]","providers":[],"inputsClass":[{"name":"named","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n模板名称\\n","description":"<p>模板名称</p>\\n","line":34,"type":"string","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"template","deprecated":false,"deprecationMessage":"","type":"TemplateRef<T>","optional":false,"description":"","line":35,"modifierKind":[123]}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":37,"deprecated":false,"deprecationMessage":""},{"name":"resolveName","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":41,"deprecated":false,"deprecationMessage":""}],"implements":["OnInit"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"template","type":"TemplateRef<T>","deprecated":false,"deprecationMessage":""}],"line":34,"jsdoctags":[{"name":"template","type":"TemplateRef<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"NzxButtonDirective","id":"directive-NzxButtonDirective-b48fea9eeb0c7bc799b4776c8325fdcb408db773155b1ce541d7b32b879cef7bfed6c509ffb13c3165fa4585572cfb603aab9c6ea356bd62fe719c20025a3cd5","file":"lib/button/button.directive.ts","type":"directive","description":"<p>按钮指令，增强ng-zorro-antd按钮颜色, 和nz-button组件配合使用, 只增加<code>nzxColor</code>属性</p>\\n<p>颜色值取自 <a href=\\"https://ant.design/docs/spec/colors-cn\\">https://ant.design/docs/spec/colors-cn</a></p>\\n","rawdescription":"\\n\\n按钮指令，增强ng-zorro-antd按钮颜色, 和nz-button组件配合使用, 只增加`nzxColor`属性\\n\\n颜色值取自 https://ant.design/docs/spec/colors-cn\\n","sourceCode":"import { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2, SimpleChange, SimpleChanges } from \'@angular/core\';\\r\\n\\r\\n/**\\r\\n * 按钮指令，增强ng-zorro-antd按钮颜色, 和nz-button组件配合使用, 只增加`nzxColor`属性\\r\\n *\\r\\n * 颜色值取自 https://ant.design/docs/spec/colors-cn\\r\\n */\\r\\n@Directive({\\r\\n  selector: \'[nz-button]\',\\r\\n  exportAs: \'nzxButton\'\\r\\n})\\r\\nexport class NzxButtonDirective implements OnInit, OnChanges {\\r\\n  /**\\r\\n   * 按钮颜色名称\\r\\n   */\\r\\n  @Input() nzxColor?: NzxColorType;\\r\\n  constructor(protected renderer: Renderer2, protected elementRef: ElementRef<HTMLElement>) {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.addButtonClass(this.nzxColor);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 添加按钮class 名称\\r\\n   * @param className class 名称\\r\\n   * @protected\\r\\n   */\\r\\n  protected addButtonClass(className?: NzxColorType): void {\\r\\n    const element = this.elementRef.nativeElement;\\r\\n    const classList = element.classList;\\r\\n    classList.forEach(cls => {\\r\\n      if (cls.indexOf(\'nzx-button\') === 0) {\\r\\n        classList.remove(cls);\\r\\n      }\\r\\n    });\\r\\n\\r\\n    if (className) {\\r\\n      this.renderer.addClass(element, `nzx-button-${className}`);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\\r\\n    if (changes.nzxColor && !changes.nzxColor.isFirstChange()) {\\r\\n      this.addButtonClass(this.nzxColor);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nexport type NzxColorType = \'success\' | \'warning\' | \'info\' | \'error\' | \'gray\' | \'teal\' | \'cyan\' | string;\\r\\n","selector":"[nz-button]","providers":[],"inputsClass":[{"name":"nzxColor","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n按钮颜色名称\\n","description":"<p>按钮颜色名称</p>\\n","line":16,"type":"NzxColorType","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"addButtonClass","args":[{"name":"className","type":"NzxColorType","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":28,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n添加按钮class 名称\\n","description":"<p>添加按钮class 名称</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":656,"end":665,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"className"},"type":"NzxColorType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":650,"end":655,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>class 名称</p>\\n"}]},{"name":"ngOnChanges","args":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":19,"deprecated":false,"deprecationMessage":""}],"implements":["OnInit","OnChanges"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":""},{"name":"elementRef","type":"ElementRef<HTMLElement>","deprecated":false,"deprecationMessage":""}],"line":16,"jsdoctags":[{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"elementRef","type":"ElementRef<HTMLElement>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"NzxModalDragDirective","id":"directive-NzxModalDragDirective-b2da43a85d968fed17eaab89ad1696af8df724b5ecde8eec8676ece9889f57be6569d1324370151049c36d6a6801fad2298a87488a6c04f5777a33c4a6e6f18a","file":"lib/modal/modal-drag.directive.ts","type":"directive","description":"<p>可拖动的对话框</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">``` html\\n&lt;nz-modal nzxModalDrag &gt;&lt;/nz-modal&gt;</code></pre></div><p>```</p>\\n","rawdescription":"\\n\\n可拖动的对话框\\n```html\\n``` html\\n<nz-modal nzxModalDrag ></nz-modal>\\n```\\n```","sourceCode":"import { Directive, Host } from \'@angular/core\';\\r\\nimport { NzModalComponent } from \'ng-zorro-antd/modal\';\\r\\nimport { NzxModalDragService } from \'./modal-drag.service\';\\r\\n\\r\\n/**\\r\\n * 可拖动的对话框\\r\\n * @example\\r\\n * ``` html\\r\\n * <nz-modal nzxModalDrag ></nz-modal>\\r\\n ```\\r\\n */\\r\\n@Directive({\\r\\n  selector: \'nz-modal[nzxModalDrag]\'\\r\\n})\\r\\nexport class NzxModalDragDirective {\\r\\n  constructor(@Host() protected modal: NzModalComponent, public modalDragService: NzxModalDragService) {\\r\\n    const wrapCls = this.modalDragService.getRandomCls();\\r\\n    modal.afterOpen.subscribe(() => {\\r\\n      const modelElement = modal.getElement()!;\\r\\n      if (!modelElement || modelElement.className.indexOf(NzxModalDragService.DRAG_CLS_PREFIX) !== -1) {\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      modelElement.classList.add(wrapCls);\\r\\n      const drag = this.modalDragService.createDragHandler(wrapCls, modal.nzMask, modal.nzModalType);\\r\\n      modal.afterClose.subscribe(() => {\\r\\n        if (drag && !drag.dropped) {\\r\\n          drag.dispose();\\r\\n        }\\r\\n      });\\r\\n    });\\r\\n  }\\r\\n}\\r\\n","selector":"nz-modal[nzxModalDrag]","providers":[],"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"modalDragService","deprecated":false,"deprecationMessage":"","type":"NzxModalDragService","optional":false,"description":"","line":16,"modifierKind":[123]}],"methodsClass":[],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"modal","type":"NzModalComponent","deprecated":false,"deprecationMessage":""},{"name":"modalDragService","type":"NzxModalDragService","deprecated":false,"deprecationMessage":""}],"line":15,"jsdoctags":[{"name":"modal","type":"NzModalComponent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"modalDragService","type":"NzxModalDragService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}],"components":[{"name":"FakeComponent","id":"component-FakeComponent-ea3fca16abe6ff35978456f30d7966d771171d10b79b6429b104c89202f4b6f7a036b818aa8a797b4081cda2eddc06244be208f32d792a6083a4d89f9290e5d4","file":"lib/checkbox/Checkbox.stories.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"test","styleUrls":[],"styles":[],"template":"<ng-template #hello>Hello</ng-template>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"nzxBlur","defaultValue":"() => void 0","deprecated":false,"deprecationMessage":"","line":103,"type":"function","decorators":[]},{"name":"nzxDisabled","deprecated":false,"deprecationMessage":"","line":105,"type":"boolean","decorators":[]},{"name":"nzxFocus","defaultValue":"() => void 0","deprecated":false,"deprecationMessage":"","line":104,"type":"function","decorators":[]},{"name":"nzxOptions","defaultValue":"[]","deprecated":false,"deprecationMessage":"","line":106,"type":"NzxCheckboxOption[]","decorators":[]},{"name":"nzxValue","deprecated":false,"deprecationMessage":"","line":102,"type":"any","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"hello","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","optional":false,"description":"","line":101,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'hello\', {static: true}"}]}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":108,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { moduleMetadata, Story, Meta, componentWrapperDecorator } from \'@storybook/angular\';\\r\\nimport { NzxCheckboxComponent, NzxCheckboxOption } from \'./checkbox.component\';\\r\\nimport { EXCLUDE_PARAMS, hideControlArgType, storyFactory } from \'@stories\';\\r\\nimport { action } from \'@storybook/addon-actions\';\\r\\nimport { NzCheckboxModule } from \'ng-zorro-antd/checkbox\';\\r\\nimport { NzOutletModule } from \'ng-zorro-antd/core/outlet\';\\r\\nimport { Component, Input, OnInit, Output, TemplateRef, ViewChild } from \'@angular/core\';\\r\\n\\r\\nexport default {\\r\\n  title: \'组件/Checkbox 复选框\',\\r\\n  component: NzxCheckboxComponent,\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      declarations: [NzxCheckboxComponent],\\r\\n      imports: [NzCheckboxModule, NzOutletModule]\\r\\n    })\\r\\n  ],\\r\\n  argTypes: {\\r\\n    ...hideControlArgType<NzxCheckboxComponent>(\'nzxBlur\', \'nzxFocus\')\\r\\n  },\\r\\n  args: {\\r\\n    nzxBlur: action(\'nzxBlur\'),\\r\\n    nzxFocus: action(\'nzxFocus\'),\\r\\n    nzxValue: []\\r\\n  },\\r\\n  parameters: {\\r\\n    controls: {\\r\\n      exclude: EXCLUDE_PARAMS\\r\\n    }\\r\\n  }\\r\\n} as Meta;\\r\\n\\r\\nconst Template = (props: Partial<NzxCheckboxComponent>): Story<NzxCheckboxComponent> => {\\r\\n  return storyFactory(\\r\\n    props,\\r\\n    `\\r\\n    <nzx-checkbox\\r\\n        [(ngModel)]=\\"nzxValue\\"\\r\\n        (nzxBlur)=\\"nzxBlur($event)\\"\\r\\n        (nzxFocus)=\\"nzxFocus($event)\\"\\r\\n        [nzxDisabled]=\\"nzxDisabled\\"\\r\\n        [nzxLayout]=\\"nzxLayout\\"\\r\\n        [nzxOptions]=\\"nzxOptions\\" >\\r\\n    </nzx-checkbox>`\\r\\n  );\\r\\n};\\r\\n\\r\\nfunction getNzxOptions(): NzxCheckboxOption[] {\\r\\n  return Array(5)\\r\\n    .fill(0)\\r\\n    .map((v, i) => ({ label: `label-${i}`, value: `value-${i}` }));\\r\\n}\\r\\n\\r\\nexport const Default = Template({ nzxOptions: getNzxOptions() });\\r\\n\\r\\nexport const Checked = Template({ nzxValue: [\'value-1\'], nzxOptions: getNzxOptions() });\\r\\n\\r\\nexport const NzxDisabled = Template({ nzxOptions: getNzxOptions(), nzxDisabled: true });\\r\\n\\r\\nexport const HideOption = Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i < 3) {\\r\\n      v.hide = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n});\\r\\n\\r\\nexport const DisabledOption = Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i == 1) {\\r\\n      v.disabled = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n});\\r\\n\\r\\nexport const IndeterminateOption = Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i < 3) {\\r\\n      v.indeterminate = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n});\\r\\n\\r\\nexport const NgModelChangeOption = Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    v.ngModelChange = action(\'ngModelChange\');\\r\\n    return v;\\r\\n  })\\r\\n});\\r\\n\\r\\n@Component({\\r\\n  selector: \'test\',\\r\\n  template: `\\r\\n    <ng-template #hello>Hello</ng-template>\\r\\n  `\\r\\n})\\r\\nexport class FakeComponent implements OnInit {\\r\\n  @ViewChild(\'hello\', { static: true }) hello!: TemplateRef<any>;\\r\\n  @Input() nzxValue: any;\\r\\n  @Input() nzxBlur: (evt: NzxCheckboxOption) => void = () => void 0;\\r\\n  @Input() nzxFocus: (evt: NzxCheckboxOption) => void = () => void 0;\\r\\n  @Input() nzxDisabled!: boolean;\\r\\n  @Input() nzxOptions: NzxCheckboxOption[] = [];\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.nzxOptions.forEach((v, i) => {\\r\\n      if (i === 1) {\\r\\n        v.label = this.hello;\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const LabelOption = Template({\\r\\n  nzxOptions: getNzxOptions()\\r\\n});\\r\\n\\r\\nLabelOption.decorators = [\\r\\n  moduleMetadata({\\r\\n    declarations: [FakeComponent],\\r\\n    imports: [NzCheckboxModule, NzOutletModule]\\r\\n  }),\\r\\n  componentWrapperDecorator(FakeComponent)\\r\\n];\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","implements":["OnInit"]},{"name":"NzxBetweenComponent","id":"component-NzxBetweenComponent-584a1c04076c17b6d98ce57dde32efb22cdf94b8d77d484f87027f5e4270cdb7ca564f797e706613393e7b41af7f0d935be221967906c874031e0ff674fbab2c","file":"lib/between/between.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"exportAs":"nzxBetween","inputs":[],"outputs":[],"providers":[],"selector":"nzx-between","styleUrls":[],"styles":[],"templateUrl":["./between.component.html"],"viewProviders":[],"inputsClass":[{"name":"nzxDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否禁用\\n","description":"<p>是否禁用</p>\\n","line":19,"type":"boolean","decorators":[]},{"name":"nzxEndDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段禁用\\n","description":"<p>结束字段禁用</p>\\n","line":31,"type":"boolean","decorators":[]},{"name":"nzxSize","defaultValue":"\'default\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n控件大小\\n","description":"<p>控件大小</p>\\n","line":23,"type":"NzSizeLDSType","decorators":[]},{"name":"nzxStartDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段禁用\\n","description":"<p>开始字段禁用</p>\\n","line":27,"type":"boolean","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>包含开始和结束两个控件，子组件使用<code>start</code>和<code>end</code>属性来插入到对应的容易内。</p>\\n","rawdescription":"\\n\\n包含开始和结束两个控件，子组件使用`start`和`end`属性来插入到对应的容易内。\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from \'@angular/core\';\\nimport { NzSizeLDSType } from \'ng-zorro-antd/core/types\';\\n\\n/**\\n * 包含开始和结束两个控件，子组件使用`start`和`end`属性来插入到对应的容易内。\\n */\\n@Component({\\n  selector: \'nzx-between\',\\n  exportAs: \'nzxBetween\',\\n  templateUrl: \'./between.component.html\',\\n  preserveWhitespaces: false,\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class NzxBetweenComponent {\\n  /**\\n   * 是否禁用\\n   */\\n  @Input() nzxDisabled = false;\\n  /**\\n   * 控件大小\\n   */\\n  @Input() nzxSize: NzSizeLDSType = \'default\';\\n  /**\\n   * 开始字段禁用\\n   */\\n  @Input() nzxStartDisabled = false;\\n  /**\\n   * 结束字段禁用\\n   */\\n  @Input() nzxEndDisabled = false;\\n  constructor() {}\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","preserveWhitespaces":false,"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":31},"templateData":"<nz-input-group\\r\\n  nzCompact\\r\\n  class=\\"nzx-between\\"\\r\\n  [class.nzx-between-disabled]=\\"nzxDisabled || (nzxStartDisabled && nzxEndDisabled)\\"\\r\\n  [nzSize]=\\"nzxSize\\"\\r\\n>\\r\\n  <ng-content select=\\"[start]\\"></ng-content>\\r\\n  <input type=\\"text\\" disabled nz-input placeholder=\\"~\\" class=\\"nzx-between-placeholder\\" />\\r\\n  <ng-content select=\\"[end]\\"></ng-content>\\r\\n</nz-input-group>\\r\\n"},{"name":"NzxBetweenDatetimeComponent","id":"component-NzxBetweenDatetimeComponent-91895db16d5c7e2232d049ce53d1f8304512b38e4fbc6d94b17128ba8feb7bbe3de49a0921bb0da65005908ff85b9006e9603964cfa26edab0944ae6b0bd5486","file":"lib/between-datetime/between-datetime.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"exportAs":"nzxBetweenDatetime","inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxBetweenDatetimeComponent), multi: true\\n}","type":"component"}],"selector":"nzx-between-datetime","styleUrls":[],"styles":[],"templateUrl":["./between-datetime.component.html"],"viewProviders":[],"inputsClass":[{"name":"endMaxDateTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最大时间\\n","description":"<p>最大时间</p>\\n","line":286,"type":"DisabledDateType","decorators":[]},{"name":"endMinDateTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最小时间\\n","description":"<p>最小时间</p>\\n","line":296,"type":"DisabledDateType","decorators":[]},{"name":"nzAllowClear","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示清除按钮\\n","description":"<p>是否显示清除按钮</p>\\n","line":106,"type":"boolean","decorators":[]},{"name":"nzFormat","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n展示的日期格式，见nzFormat特别说明\\n","description":"<p>展示的日期格式，见nzFormat特别说明</p>\\n","line":186,"type":"string","decorators":[]},{"name":"nzLocale","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n国际化配置\\n","description":"<p>国际化配置</p>\\n","line":200,"type":"NzDatePickerI18nInterface","decorators":[]},{"name":"nzMode","defaultValue":"\'date\'","deprecated":false,"deprecationMessage":"","line":70,"type":"NzDateMode","decorators":[]},{"name":"nzShowTime","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示时间选择器-开始和结束同时生效\\n","description":"<p>显示时间选择器-开始和结束同时生效</p>\\n","line":164,"type":"SupportTimeOptions | boolean","decorators":[]},{"name":"nzShowToday","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示今天-开始和结束同时生效\\n","description":"<p>显示今天-开始和结束同时生效</p>\\n","line":151,"type":"boolean","decorators":[]},{"name":"nzxEndAllowClear","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示结束清除按钮\\n","description":"<p>是否显示结束清除按钮</p>\\n","line":110,"type":"boolean","decorators":[]},{"name":"nzxEndAutoFocus","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自动获取焦点\\n","description":"<p>自动获取焦点</p>\\n","line":119,"type":"boolean","decorators":[]},{"name":"nzxEndBackdrop","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n浮层是否应带有背景板\\n","description":"<p>浮层是否应带有背景板</p>\\n","line":128,"type":"boolean","decorators":[]},{"name":"nzxEndDateRender","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自定义渲染日期-结束\\n","description":"<p>自定义渲染日期-结束</p>\\n","line":236,"type":"TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef | string>","decorators":[]},{"name":"nzxEndDefaultPickerValue","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n默认面板日期\\n","description":"<p>默认面板日期</p>\\n","line":137,"type":"Date","decorators":[]},{"name":"nzxEndDropdownClassName","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n额外的弹出日历 className\\n","description":"<p>额外的弹出日历 className</p>\\n","line":182,"type":"string","decorators":[]},{"name":"nzxEndId","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n组件内部 input 的 id 值\\n","description":"<p>组件内部 input 的 id 值</p>\\n","line":97,"type":"string","decorators":[]},{"name":"nzxEndInputReadOnly","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n为 input 标签设置只读属性（避免在移动设备上触发小键盘）\\n","description":"<p>为 input 标签设置只读属性（避免在移动设备上触发小键盘）</p>\\n","line":196,"type":"boolean","decorators":[]},{"name":"nzxEndPlaceholder","defaultValue":"\'结束值\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段Placeholder\\n","description":"<p>结束字段Placeholder</p>\\n","line":78,"type":"string | string[]","decorators":[]},{"name":"nzxEndPopupStyle","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n额外的弹出日历样式\\n","description":"<p>额外的弹出日历样式</p>\\n","line":210,"type":"object","decorators":[]},{"name":"nzxEndReName","defaultValue":"\'end\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段重命名\\n","description":"<p>结束字段重命名</p>\\n","line":87,"type":"string","decorators":[]},{"name":"nzxEndRenderExtraFooter","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n在面板中添加额外的页脚\\n","description":"<p>在面板中添加额外的页脚</p>\\n","line":219,"type":"TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef | string>","decorators":[]},{"name":"nzxEndShowNow","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示此刻-结束\\n","description":"<p>显示此刻-结束</p>\\n","line":146,"type":"boolean","decorators":[]},{"name":"nzxEndShowTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示时间选择器-结束\\n","description":"<p>显示时间选择器-结束</p>\\n","line":172,"type":"SupportTimeOptions | boolean","decorators":[]},{"name":"nzxEndShowToday","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示今天-结束\\n","description":"<p>显示今天-结束</p>\\n","line":159,"type":"boolean","decorators":[]},{"name":"nzxEndSuffixIcon","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自定义的后缀图标\\n","description":"<p>自定义的后缀图标</p>\\n","line":228,"type":"string | TemplateRef<NzSafeAny>","decorators":[]},{"name":"nzxStartAllowClear","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示清除按钮\\n","description":"<p>是否显示清除按钮</p>\\n","line":101,"type":"boolean","decorators":[]},{"name":"nzxStartAutoFocus","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自动获取焦点\\n","description":"<p>自动获取焦点</p>\\n","line":114,"type":"boolean","decorators":[]},{"name":"nzxStartBackdrop","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n浮层是否应带有背景板\\n","description":"<p>浮层是否应带有背景板</p>\\n","line":123,"type":"boolean","decorators":[]},{"name":"nzxStartDateRender","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自定义渲染日期-开始\\n","description":"<p>自定义渲染日期-开始</p>\\n","line":232,"type":"TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef | string>","decorators":[]},{"name":"nzxStartDefaultPickerValue","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n默认面板日期\\n","description":"<p>默认面板日期</p>\\n","line":132,"type":"Date","decorators":[]},{"name":"nzxStartDropdownClassName","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n额外的弹出日历 className\\n","description":"<p>额外的弹出日历 className</p>\\n","line":177,"type":"string","decorators":[]},{"name":"nzxStartId","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n组件内部 input 的 id 值\\n","description":"<p>组件内部 input 的 id 值</p>\\n","line":92,"type":"string","decorators":[]},{"name":"nzxStartInputReadOnly","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n为 input 标签设置只读属性（避免在移动设备上触发小键盘）\\n","description":"<p>为 input 标签设置只读属性（避免在移动设备上触发小键盘）</p>\\n","line":191,"type":"boolean","decorators":[]},{"name":"nzxStartPlaceholder","defaultValue":"\'起始值\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段Placeholder\\n","description":"<p>开始字段Placeholder</p>\\n","line":74,"type":"string | string[]","decorators":[]},{"name":"nzxStartPopupStyle","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n额外的弹出日历样式\\n","description":"<p>额外的弹出日历样式</p>\\n","line":205,"type":"object","decorators":[]},{"name":"nzxStartReName","defaultValue":"\'start\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段重命名\\n","description":"<p>开始字段重命名</p>\\n","line":83,"type":"string","decorators":[]},{"name":"nzxStartRenderExtraFooter","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n在面板中添加额外的页脚\\n","description":"<p>在面板中添加额外的页脚</p>\\n","line":214,"type":"TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef | string>","decorators":[]},{"name":"nzxStartShowNow","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示此刻-开始\\n","description":"<p>显示此刻-开始</p>\\n","line":142,"type":"boolean","decorators":[]},{"name":"nzxStartShowTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示时间选择器-开始\\n","description":"<p>显示时间选择器-开始</p>\\n","line":168,"type":"SupportTimeOptions | boolean","decorators":[]},{"name":"nzxStartShowToday","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示今天-开始\\n","description":"<p>显示今天-开始</p>\\n","line":155,"type":"boolean","decorators":[]},{"name":"nzxStartSuffixIcon","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自定义的后缀图标\\n","description":"<p>自定义的后缀图标</p>\\n","line":223,"type":"string | TemplateRef<NzSafeAny>","decorators":[]},{"name":"startMaxDateTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最大时间\\n","description":"<p>最大时间</p>\\n","line":291,"type":"DisabledDateType","decorators":[]},{"name":"startMinDateTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最小时间\\n","description":"<p>最小时间</p>\\n","line":281,"type":"DisabledDateType","decorators":[]},{"name":"nzxDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否禁用\\n","description":"<p>是否禁用</p>\\n","line":19,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxEndDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段禁用\\n","description":"<p>结束字段禁用</p>\\n","line":31,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxSize","defaultValue":"\'default\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n控件大小\\n","description":"<p>控件大小</p>\\n","line":23,"type":"NzSizeLDSType","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxStartDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段禁用\\n","description":"<p>开始字段禁用</p>\\n","line":27,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}}],"outputsClass":[{"name":"nzxEndOnCalendarChange","defaultValue":"new EventEmitter<(Date | null)[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n待选日期发生变化的回调\\n","description":"<p>待选日期发生变化的回调</p>\\n","line":266,"type":"EventEmitter"},{"name":"nzxEndOnOk","defaultValue":"new EventEmitter<CompatibleDate | null>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOK按钮点击\\n","description":"<p>OK按钮点击</p>\\n","line":256,"type":"EventEmitter"},{"name":"nzxEndOnOpenChange","defaultValue":"new EventEmitter<boolean>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n弹出日历和关闭日历的回调\\n","description":"<p>弹出日历和关闭日历的回调</p>\\n","line":246,"type":"EventEmitter"},{"name":"nzxEndOnPanelChange","defaultValue":"new EventEmitter<string | NzDateMode[] | string[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n待选日期发生变化的回调\\n","description":"<p>待选日期发生变化的回调</p>\\n","line":276,"type":"EventEmitter"},{"name":"nzxStartOnCalendarChange","defaultValue":"new EventEmitter<(Date | null)[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n待选日期发生变化的回调\\n","description":"<p>待选日期发生变化的回调</p>\\n","line":261,"type":"EventEmitter"},{"name":"nzxStartOnOk","defaultValue":"new EventEmitter<CompatibleDate | null>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOK按钮点击\\n","description":"<p>OK按钮点击</p>\\n","line":251,"type":"EventEmitter"},{"name":"nzxStartOnOpenChange","defaultValue":"new EventEmitter<boolean>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n弹出日历和关闭日历的回调\\n","description":"<p>弹出日历和关闭日历的回调</p>\\n","line":241,"type":"EventEmitter"},{"name":"nzxStartOnPanelChange","defaultValue":"new EventEmitter<string | NzDateMode[] | string[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n待选日期发生变化的回调\\n","description":"<p>待选日期发生变化的回调</p>\\n","line":271,"type":"EventEmitter"}],"propertiesClass":[{"name":"defaultDisabledTime","defaultValue":"{\\r\\n    nzDisabledHours: () => [],\\r\\n    nzDisabledMinutes: () => [],\\r\\n    nzDisabledSeconds: () => []\\r\\n  }","deprecated":false,"deprecationMessage":"","type":"DisabledTimeConfig","optional":false,"description":"<p>默认配置</p>\\n","line":64,"rawdescription":"\\n\\n默认配置\\n","modifierKind":[144]},{"name":"nzxEndDisabledDate","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"<p>不可选择的日期</p>\\n","line":421,"rawdescription":"\\n\\n不可选择的日期\\n"},{"name":"nzxEndDisabledTime","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"DisabledTimeFn","optional":true,"description":"","line":330},{"name":"nzxStartDisabledDate","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"<p>不可选择的日期</p>\\n","line":393,"rawdescription":"\\n\\n不可选择的日期\\n"},{"name":"nzxStartDisabledTime","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"DisabledTimeFn","optional":false,"description":"","line":313},{"name":"nzxValue","defaultValue":"{}","deprecated":false,"deprecationMessage":"","type":"DatetimeValueType","optional":false,"description":"","line":60},{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":519},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":520}],"methodsClass":[{"name":"getDisabledMaxDate","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"maxValue","type":"Date","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":448,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"maxValue","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getDisabledMinDate","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"minValue","type":"Date","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":471,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"minValue","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getDisabledTime","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"minValue","type":"Date | null | undefined","deprecated":false,"deprecationMessage":""},{"name":"maxValue","type":"Date | null | undefined","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DisabledTimeConfig","typeParameters":[],"line":354,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取禁用的时间部分\\n","description":"<p>获取禁用的时间部分</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":7816,"end":7820,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"date"},"type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"pos":7810,"end":7815,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前日期</p>\\n"},{"name":{"pos":7839,"end":7847,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"minValue"},"type":"Date | null | undefined","deprecated":false,"deprecationMessage":"","tagName":{"pos":7833,"end":7838,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最小日期值</p>\\n"},{"name":{"pos":7867,"end":7875,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"maxValue"},"type":"Date | null | undefined","deprecated":false,"deprecationMessage":"","tagName":{"pos":7861,"end":7866,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最大日期值</p>\\n"},{"tagName":{"pos":7889,"end":7896,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"ngModelChange","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":498,"deprecated":false,"deprecationMessage":""},{"name":"registerOnChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"DatetimeValueType","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":511,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"DatetimeValueType","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":515,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":507,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"value","type":"DatetimeValueType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":502,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"DatetimeValueType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>包含开始日期和结束日期两个日期控件，默认实现开始时间小于结束日期，也可以设置日期的最大值和最小值。</p>\\n<p>绑定的表单数据为 <code>{ start: Date, end: Date }</code>，修改属<code>start</code>和<code>end</code>属性名称可以使用<code>nzxStartReName</code>和<code>nzxEndReName</code>。</p>\\n","rawdescription":"\\n\\n包含开始日期和结束日期两个日期控件，默认实现开始时间小于结束日期，也可以设置日期的最大值和最小值。\\n\\n绑定的表单数据为 `{ start: Date, end: Date }`，修改属`start`和`end`属性名称可以使用`nzxStartReName`和`nzxEndReName`。\\n","type":"component","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  Output,\\r\\n  TemplateRef,\\r\\n  ViewEncapsulation\\r\\n} from \'@angular/core\';\\r\\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\r\\nimport {\\r\\n  DisabledTimeFn,\\r\\n  CompatibleDate,\\r\\n  SupportTimeOptions,\\r\\n  NzDateMode,\\r\\n  DisabledTimeConfig\\r\\n} from \'ng-zorro-antd/date-picker\';\\r\\nimport { FunctionProp, NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzDatePickerI18nInterface } from \'ng-zorro-antd/i18n\';\\r\\nimport { NzxBetweenComponent } from \'@xmagic/nzx-antd/between\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport {\\r\\n  DatetimeValueType,\\r\\n  DisabledDateType,\\r\\n  getEndDate,\\r\\n  getEndMonthDate,\\r\\n  getEndWeekDate,\\r\\n  getEndYearDate,\\r\\n  getRealDateTime,\\r\\n  getStartDate,\\r\\n  getStartMonthDate,\\r\\n  getStartWeekDate,\\r\\n  getStartYearDate,\\r\\n  getTimeValue\\r\\n} from \'./datetime-utils\';\\r\\n\\r\\n/**\\r\\n * 包含开始日期和结束日期两个日期控件，默认实现开始时间小于结束日期，也可以设置日期的最大值和最小值。\\r\\n *\\r\\n * 绑定的表单数据为 `{ start: Date, end: Date }`，修改属`start`和`end`属性名称可以使用`nzxStartReName`和`nzxEndReName`。\\r\\n */\\r\\n@Component({\\r\\n  selector: \'nzx-between-datetime\',\\r\\n  exportAs: \'nzxBetweenDatetime\',\\r\\n  templateUrl: \'./between-datetime.component.html\',\\r\\n  preserveWhitespaces: false,\\r\\n  encapsulation: ViewEncapsulation.None,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NzxBetweenDatetimeComponent),\\r\\n      multi: true\\r\\n    }\\r\\n  ]\\r\\n})\\r\\nexport class NzxBetweenDatetimeComponent extends NzxBetweenComponent implements ControlValueAccessor {\\r\\n  nzxValue: DatetimeValueType = {};\\r\\n  /**\\r\\n   * 默认配置\\r\\n   */\\r\\n  readonly defaultDisabledTime: DisabledTimeConfig = {\\r\\n    nzDisabledHours: () => [],\\r\\n    nzDisabledMinutes: () => [],\\r\\n    nzDisabledSeconds: () => []\\r\\n  };\\r\\n\\r\\n  @Input() nzMode?: NzDateMode = \'date\';\\r\\n  /**\\r\\n   * 开始字段Placeholder\\r\\n   */\\r\\n  @Input() nzxStartPlaceholder: string | string[] = \'起始值\';\\r\\n  /**\\r\\n   * 结束字段Placeholder\\r\\n   */\\r\\n  @Input() nzxEndPlaceholder: string | string[] = \'结束值\';\\r\\n\\r\\n  /**\\r\\n   * 开始字段重命名\\r\\n   */\\r\\n  @Input() nzxStartReName = \'start\';\\r\\n  /**\\r\\n   * 结束字段重命名\\r\\n   */\\r\\n  @Input() nzxEndReName = \'end\';\\r\\n\\r\\n  /**\\r\\n   * 组件内部 input 的 id 值\\r\\n   */\\r\\n  @Input() nzxStartId?: string;\\r\\n\\r\\n  /**\\r\\n   * 组件内部 input 的 id 值\\r\\n   */\\r\\n  @Input() nzxEndId?: string;\\r\\n  /**\\r\\n   * 是否显示清除按钮\\r\\n   */\\r\\n  @Input() nzxStartAllowClear?: boolean;\\r\\n\\r\\n  /**\\r\\n   * 是否显示清除按钮\\r\\n   */\\r\\n  @Input() nzAllowClear = true;\\r\\n  /**\\r\\n   * 是否显示结束清除按钮\\r\\n   */\\r\\n  @Input() nzxEndAllowClear?: boolean;\\r\\n  /**\\r\\n   * 自动获取焦点\\r\\n   */\\r\\n  @Input() nzxStartAutoFocus?: boolean;\\r\\n\\r\\n  /**\\r\\n   * 自动获取焦点\\r\\n   */\\r\\n  @Input() nzxEndAutoFocus?: boolean;\\r\\n  /**\\r\\n   * 浮层是否应带有背景板\\r\\n   */\\r\\n  @Input() nzxStartBackdrop?: boolean;\\r\\n\\r\\n  /**\\r\\n   * 浮层是否应带有背景板\\r\\n   */\\r\\n  @Input() nzxEndBackdrop?: boolean;\\r\\n  /**\\r\\n   * 默认面板日期\\r\\n   */\\r\\n  @Input() nzxStartDefaultPickerValue?: Date;\\r\\n\\r\\n  /**\\r\\n   * 默认面板日期\\r\\n   */\\r\\n  @Input() nzxEndDefaultPickerValue?: Date;\\r\\n\\r\\n  /**\\r\\n   * 显示此刻-开始\\r\\n   */\\r\\n  @Input() nzxStartShowNow = true;\\r\\n  /**\\r\\n   * 显示此刻-结束\\r\\n   */\\r\\n  @Input() nzxEndShowNow = true;\\r\\n\\r\\n  /**\\r\\n   * 显示今天-开始和结束同时生效\\r\\n   */\\r\\n  @Input() nzShowToday = true;\\r\\n  /**\\r\\n   * 显示今天-开始\\r\\n   */\\r\\n  @Input() nzxStartShowToday?: boolean;\\r\\n  /**\\r\\n   * 显示今天-结束\\r\\n   */\\r\\n  @Input() nzxEndShowToday?: boolean;\\r\\n\\r\\n  /**\\r\\n   * 显示时间选择器-开始和结束同时生效\\r\\n   */\\r\\n  @Input() nzShowTime: SupportTimeOptions | boolean = false;\\r\\n  /**\\r\\n   * 显示时间选择器-开始\\r\\n   */\\r\\n  @Input() nzxStartShowTime?: SupportTimeOptions | boolean;\\r\\n  /**\\r\\n   * 显示时间选择器-结束\\r\\n   */\\r\\n  @Input() nzxEndShowTime?: SupportTimeOptions | boolean;\\r\\n\\r\\n  /**\\r\\n   * 额外的弹出日历 className\\r\\n   */\\r\\n  @Input() nzxStartDropdownClassName?: string;\\r\\n\\r\\n  /**\\r\\n   * 额外的弹出日历 className\\r\\n   */\\r\\n  @Input() nzxEndDropdownClassName?: string;\\r\\n  /**\\r\\n   * 展示的日期格式，见nzFormat特别说明\\r\\n   */\\r\\n  @Input() nzFormat?: string;\\r\\n\\r\\n  /**\\r\\n   * 为 input 标签设置只读属性（避免在移动设备上触发小键盘）\\r\\n   */\\r\\n  @Input() nzxStartInputReadOnly?: boolean;\\r\\n\\r\\n  /**\\r\\n   * 为 input 标签设置只读属性（避免在移动设备上触发小键盘）\\r\\n   */\\r\\n  @Input() nzxEndInputReadOnly?: boolean;\\r\\n  /**\\r\\n   * 国际化配置\\r\\n   */\\r\\n  @Input() nzLocale?: NzDatePickerI18nInterface;\\r\\n\\r\\n  /**\\r\\n   * 额外的弹出日历样式\\r\\n   */\\r\\n  @Input() nzxStartPopupStyle?: object;\\r\\n\\r\\n  /**\\r\\n   * 额外的弹出日历样式\\r\\n   */\\r\\n  @Input() nzxEndPopupStyle?: object;\\r\\n  /**\\r\\n   * 在面板中添加额外的页脚\\r\\n   */\\r\\n  @Input() nzxStartRenderExtraFooter?: TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef<NzSafeAny> | string>;\\r\\n\\r\\n  /**\\r\\n   * 在面板中添加额外的页脚\\r\\n   */\\r\\n  @Input() nzxEndRenderExtraFooter?: TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef<NzSafeAny> | string>;\\r\\n  /**\\r\\n   * 自定义的后缀图标\\r\\n   */\\r\\n  @Input() nzxStartSuffixIcon?: string | TemplateRef<NzSafeAny>;\\r\\n\\r\\n  /**\\r\\n   * 自定义的后缀图标\\r\\n   */\\r\\n  @Input() nzxEndSuffixIcon?: string | TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * 自定义渲染日期-开始\\r\\n   */\\r\\n  @Input() nzxStartDateRender?: TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef<Date> | string>;\\r\\n  /**\\r\\n   * 自定义渲染日期-结束\\r\\n   */\\r\\n  @Input() nzxEndDateRender?: TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef<Date> | string>;\\r\\n\\r\\n  /**\\r\\n   * 弹出日历和关闭日历的回调\\r\\n   */\\r\\n  @Output() nzxStartOnOpenChange = new EventEmitter<boolean>();\\r\\n\\r\\n  /**\\r\\n   * 弹出日历和关闭日历的回调\\r\\n   */\\r\\n  @Output() nzxEndOnOpenChange = new EventEmitter<boolean>();\\r\\n\\r\\n  /**\\r\\n   * OK按钮点击\\r\\n   */\\r\\n  @Output() nzxStartOnOk = new EventEmitter<CompatibleDate | null>();\\r\\n\\r\\n  /**\\r\\n   * OK按钮点击\\r\\n   */\\r\\n  @Output() nzxEndOnOk = new EventEmitter<CompatibleDate | null>();\\r\\n\\r\\n  /**\\r\\n   * 待选日期发生变化的回调\\r\\n   */\\r\\n  @Output() nzxStartOnCalendarChange = new EventEmitter<(Date | null)[]>();\\r\\n\\r\\n  /**\\r\\n   * 待选日期发生变化的回调\\r\\n   */\\r\\n  @Output() nzxEndOnCalendarChange = new EventEmitter<(Date | null)[]>();\\r\\n\\r\\n  /**\\r\\n   * 待选日期发生变化的回调\\r\\n   */\\r\\n  @Output() nzxStartOnPanelChange = new EventEmitter<string | NzDateMode[] | string[]>();\\r\\n\\r\\n  /**\\r\\n   * 待选日期发生变化的回调\\r\\n   */\\r\\n  @Output() nzxEndOnPanelChange = new EventEmitter<string | NzDateMode[] | string[]>();\\r\\n\\r\\n  /**\\r\\n   * 最小时间\\r\\n   */\\r\\n  @Input() startMinDateTime?: DisabledDateType;\\r\\n\\r\\n  /**\\r\\n   * 最大时间\\r\\n   */\\r\\n  @Input() endMaxDateTime?: DisabledDateType;\\r\\n\\r\\n  /**\\r\\n   * 最大时间\\r\\n   */\\r\\n  @Input() startMaxDateTime?: DisabledDateType;\\r\\n\\r\\n  /**\\r\\n   * 最小时间\\r\\n   */\\r\\n  @Input() endMinDateTime?: DisabledDateType;\\r\\n\\r\\n  private get _defaultStartMaxDateTime(): Date | null {\\r\\n    return this.nzxValue[this.nzxEndReName];\\r\\n  }\\r\\n  private get _defaultEndMinDateTime(): Date | null {\\r\\n    return this.nzxValue[this.nzxStartReName];\\r\\n  }\\r\\n\\r\\n  get startDisabledTime() {\\r\\n    return this.nzxStartShowTime == null ? this.nzShowTime : this.nzxStartShowTime;\\r\\n  }\\r\\n\\r\\n  get endDisabledTime() {\\r\\n    return this.nzxEndShowTime == null ? this.nzShowTime : this.nzxEndShowTime;\\r\\n  }\\r\\n\\r\\n  nzxStartDisabledTime: DisabledTimeFn = current => {\\r\\n    if (!this.startDisabledTime || !current) {\\r\\n      return this.defaultDisabledTime;\\r\\n    }\\r\\n\\r\\n    const date = current as Date;\\r\\n    const minValue = getRealDateTime(date, this.startMinDateTime);\\r\\n    const maxValue = getRealDateTime(\\r\\n      date,\\r\\n      this.startMaxDateTime === undefined ? this._defaultStartMaxDateTime : this.startMaxDateTime\\r\\n    );\\r\\n    if (!minValue && !maxValue) {\\r\\n      return this.defaultDisabledTime;\\r\\n    }\\r\\n    return this.getDisabledTime(date, minValue, maxValue);\\r\\n  };\\r\\n\\r\\n  nzxEndDisabledTime?: DisabledTimeFn = current => {\\r\\n    if (!this.endDisabledTime || !current) {\\r\\n      return this.defaultDisabledTime;\\r\\n    }\\r\\n\\r\\n    const date = current as Date;\\r\\n    const minValue = getRealDateTime(\\r\\n      date,\\r\\n      this.endMinDateTime === undefined ? this._defaultEndMinDateTime : this.endMinDateTime\\r\\n    );\\r\\n    const maxValue = getRealDateTime(date, this.endMaxDateTime);\\r\\n    if (!minValue && !maxValue) {\\r\\n      return this.defaultDisabledTime;\\r\\n    }\\r\\n    return this.getDisabledTime(date, minValue, maxValue);\\r\\n  };\\r\\n\\r\\n  /**\\r\\n   * 获取禁用的时间部分\\r\\n   * @param date 当前日期\\r\\n   * @param minValue 最小日期值\\r\\n   * @param maxValue 最大日期值\\r\\n   * @private\\r\\n   */\\r\\n  private getDisabledTime(\\r\\n    date: Date,\\r\\n    minValue: Date | null | undefined,\\r\\n    maxValue: Date | null | undefined\\r\\n  ): DisabledTimeConfig {\\r\\n    const start = getTimeValue(date, minValue);\\r\\n\\r\\n    let hours: number[] = [];\\r\\n    let minutes: number[] = [];\\r\\n    let seconds: number[] = [];\\r\\n    if (start) {\\r\\n      const equalsHour = start.hour === date.getHours();\\r\\n      hours = NzxUtils.range(0, start.hour);\\r\\n      minutes = equalsHour ? NzxUtils.range(0, start.minute) : [];\\r\\n      seconds = equalsHour && start.minute === date.getMinutes() ? NzxUtils.range(0, start.second) : [];\\r\\n    }\\r\\n\\r\\n    const end = getTimeValue(date, maxValue);\\r\\n    if (end) {\\r\\n      const equalsHour = end.hour === date.getHours();\\r\\n      hours = hours.concat(NzxUtils.range(end.hour + 1, 24));\\r\\n      minutes = equalsHour ? minutes.concat(NzxUtils.range(end.minute + 1, 60)) : minutes;\\r\\n      seconds =\\r\\n        equalsHour && end.minute === date.getMinutes() ? seconds.concat(NzxUtils.range(end.second + 1, 60)) : seconds;\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      nzDisabledHours: () => hours,\\r\\n      nzDisabledMinutes: hour => (hour === start?.hour || hour === end?.hour ? minutes : []),\\r\\n      nzDisabledSeconds: (hour, minute) =>\\r\\n        (hour === start?.hour && minute === start?.minute) || (hour === end?.hour && minute === end?.minute)\\r\\n          ? seconds\\r\\n          : []\\r\\n    };\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 不可选择的日期\\r\\n   */\\r\\n  nzxStartDisabledDate: (current: Date) => boolean = date => {\\r\\n    if (!date) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    const minValue = getRealDateTime(date, this.startMinDateTime);\\r\\n    const maxValue = getRealDateTime(\\r\\n      date,\\r\\n      this.startMaxDateTime === undefined ? this._defaultStartMaxDateTime : this.startMaxDateTime\\r\\n    );\\r\\n    if (!maxValue && !minValue) {\\r\\n      return false;\\r\\n    }\\r\\n    // date < min\\r\\n    if (minValue && this.getDisabledMinDate(date, minValue)) {\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    // date > max\\r\\n    if (maxValue && this.getDisabledMaxDate(date, maxValue)) {\\r\\n      return true;\\r\\n    }\\r\\n    return false;\\r\\n  };\\r\\n\\r\\n  /**\\r\\n   * 不可选择的日期\\r\\n   */\\r\\n  nzxEndDisabledDate: (current: Date) => boolean = date => {\\r\\n    if (!date) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    const minValue = getRealDateTime(\\r\\n      date,\\r\\n      this.endMinDateTime === undefined ? this._defaultEndMinDateTime : this.endMinDateTime\\r\\n    );\\r\\n    const maxValue = getRealDateTime(date, this.endMaxDateTime);\\r\\n    if (!maxValue && !minValue) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    // date > max\\r\\n    if (maxValue && this.getDisabledMaxDate(date, maxValue)) {\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    // date < min\\r\\n    if (minValue && this.getDisabledMinDate(date, minValue)) {\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n  };\\r\\n\\r\\n  private getDisabledMaxDate(date: Date, maxValue: Date) {\\r\\n    if (this.nzMode === \'date\') {\\r\\n      if (getStartDate(date) > maxValue.getTime()) {\\r\\n        return true;\\r\\n      }\\r\\n    } else if (this.nzMode === \'week\') {\\r\\n      if (getStartWeekDate(date) > maxValue.getTime()) {\\r\\n        return true;\\r\\n      }\\r\\n    } else if (this.nzMode === \'month\') {\\r\\n      if (getStartMonthDate(date) > maxValue.getTime()) {\\r\\n        return true;\\r\\n      }\\r\\n    } else if (this.nzMode === \'year\') {\\r\\n      if (getStartYearDate(date) > maxValue.getTime()) {\\r\\n        return true;\\r\\n      }\\r\\n    } else {\\r\\n      return date > maxValue;\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  private getDisabledMinDate(date: Date, minValue: Date) {\\r\\n    if (this.nzMode === \'date\') {\\r\\n      if (minValue.getTime() > getEndDate(date)) {\\r\\n        return true;\\r\\n      }\\r\\n    } else if (this.nzMode === \'week\') {\\r\\n      if (minValue.getTime() > getEndWeekDate(date)) {\\r\\n        return true;\\r\\n      }\\r\\n    } else if (this.nzMode === \'month\') {\\r\\n      if (minValue.getTime() > getEndMonthDate(date)) {\\r\\n        return true;\\r\\n      }\\r\\n    } else if (this.nzMode === \'year\') {\\r\\n      if (minValue.getTime() > getEndYearDate(date)) {\\r\\n        return true;\\r\\n      }\\r\\n    } else {\\r\\n      return minValue > date;\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  constructor(protected cdr: ChangeDetectorRef) {\\r\\n    super();\\r\\n  }\\r\\n\\r\\n  ngModelChange() {\\r\\n    this.onChange(this.nzxValue);\\r\\n  }\\r\\n\\r\\n  writeValue(value: DatetimeValueType): void {\\r\\n    this.nzxValue = value || {};\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n\\r\\n  setDisabledState(isDisabled: boolean): void {\\r\\n    this.nzxDisabled = isDisabled;\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: (_: DatetimeValueType) => void): void {\\r\\n    this.onChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnTouched(fn: () => void): void {\\r\\n    this.onTouched = fn;\\r\\n  }\\r\\n\\r\\n  onChange: (value: DatetimeValueType) => void = () => null;\\r\\n  onTouched: () => void = () => null;\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","preserveWhitespaces":false,"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":492,"jsdoctags":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":"NzxBetweenComponent","implements":["ControlValueAccessor"],"accessors":{"_defaultStartMaxDateTime":{"name":"_defaultStartMaxDateTime","getSignature":{"name":"_defaultStartMaxDateTime","type":"","returnType":"Date | null","line":298}},"_defaultEndMinDateTime":{"name":"_defaultEndMinDateTime","getSignature":{"name":"_defaultEndMinDateTime","type":"","returnType":"Date | null","line":301}},"startDisabledTime":{"name":"startDisabledTime","getSignature":{"name":"startDisabledTime","type":"","returnType":"","line":305}},"endDisabledTime":{"name":"endDisabledTime","getSignature":{"name":"endDisabledTime","type":"","returnType":"","line":309}}},"templateData":"<nzx-between\\r\\n  [nzxDisabled]=\\"nzxDisabled\\"\\r\\n  [nzxStartDisabled]=\\"nzxStartDisabled\\"\\r\\n  [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n  [nzxSize]=\\"nzxSize\\"\\r\\n>\\r\\n  <ng-container\\r\\n    start\\r\\n    *ngTemplateOutlet=\\"\\r\\n      typeTemplate;\\r\\n      context: {\\r\\n        $implicit: {\\r\\n          dir: nzxStartReName,\\r\\n          disabled: nzxDisabled || nzxStartDisabled,\\r\\n          placeholder: nzxStartPlaceholder,\\r\\n          nzSuffixIcon: nzxStartSuffixIcon,\\r\\n          nzAllowClear: nzxStartAllowClear,\\r\\n          nzRenderExtraFooter: nzxStartRenderExtraFooter,\\r\\n          nzBackdrop: nzxStartBackdrop,\\r\\n          nzAutoFocus: nzxStartAutoFocus,\\r\\n          nzDateRender: nzxStartDateRender,\\r\\n          nzDefaultPickerValue: nzxStartDefaultPickerValue,\\r\\n          nzDisabledDate: nzxStartDisabledDate,\\r\\n          nzDisabledTime: nzxStartDisabledTime,\\r\\n          nzDropdownClassName: nzxStartDropdownClassName,\\r\\n          nzId: nzxStartId,\\r\\n          nzInputReadOnly: nzxStartInputReadOnly,\\r\\n          nzLocale: nzLocale,\\r\\n          nzPopupStyle: nzxStartPopupStyle,\\r\\n          nzShowNow: nzxStartShowNow,\\r\\n          nzShowTime: nzxStartShowTime,\\r\\n          nzShowToday: nzxStartShowToday,\\r\\n          nzOnOpenChange: nzxStartOnOpenChange,\\r\\n          nzOnOk: nzxStartOnOk,\\r\\n          nzOnCalendarChange: nzxStartOnCalendarChange,\\r\\n          nzOnPanelChange: nzxStartOnPanelChange\\r\\n        }\\r\\n      }\\r\\n    \\"\\r\\n  ></ng-container>\\r\\n  <ng-container\\r\\n    end\\r\\n    *ngTemplateOutlet=\\"\\r\\n      typeTemplate;\\r\\n      context: {\\r\\n        $implicit: {\\r\\n          dir: nzxEndReName,\\r\\n          disabled: nzxDisabled || nzxEndDisabled,\\r\\n          placeholder: nzxEndPlaceholder,\\r\\n          nzSuffixIcon: nzxEndSuffixIcon,\\r\\n          nzAllowClear: nzxEndAllowClear,\\r\\n          nzRenderExtraFooter: nzxEndRenderExtraFooter,\\r\\n          nzBackdrop: nzxEndBackdrop,\\r\\n          nzAutoFocus: nzxEndAutoFocus,\\r\\n          nzDateRender: nzxEndDateRender,\\r\\n          nzDefaultPickerValue: nzxEndDefaultPickerValue,\\r\\n          nzDisabledDate: nzxEndDisabledDate,\\r\\n          nzDisabledTime: nzxEndDisabledTime,\\r\\n          nzDropdownClassName: nzxEndDropdownClassName,\\r\\n          nzId: nzxEndId,\\r\\n          nzInputReadOnly: nzxEndInputReadOnly,\\r\\n          nzLocale: nzLocale,\\r\\n          nzPopupStyle: nzxEndPopupStyle,\\r\\n          nzShowNow: nzxEndShowNow,\\r\\n          nzShowTime: nzxEndShowTime,\\r\\n          nzShowToday: nzxEndShowToday,\\r\\n          nzOnOpenChange: nzxEndOnOpenChange,\\r\\n          nzOnOk: nzxEndOnOk,\\r\\n          nzOnCalendarChange: nzxEndOnCalendarChange,\\r\\n          nzOnPanelChange: nzxEndOnPanelChange\\r\\n        }\\r\\n      }\\r\\n    \\"\\r\\n  ></ng-container>\\r\\n</nzx-between>\\r\\n\\r\\n<ng-template #typeTemplate let-data>\\r\\n  <nz-date-picker\\r\\n    [(ngModel)]=\\"nzxValue[data.dir]\\"\\r\\n    (ngModelChange)=\\"ngModelChange()\\"\\r\\n    [nzDisabled]=\\"data.disabled\\"\\r\\n    [nzPlaceHolder]=\\"data.placeholder\\"\\r\\n    [nzSize]=\\"nzxSize\\"\\r\\n    [nzMode]=\\"nzMode\\"\\r\\n    [nzSuffixIcon]=\\"data.nzSuffixIcon || \'calendar\'\\"\\r\\n    [nzAllowClear]=\\"nzAllowClear || data.nzAllowClear\\"\\r\\n    [nzRenderExtraFooter]=\\"data.nzRenderExtraFooter\\"\\r\\n    [nzBackdrop]=\\"data.nzBackdrop\\"\\r\\n    [nzAutoFocus]=\\"data.nzAutoFocus\\"\\r\\n    [nzDateRender]=\\"data.nzDateRender\\"\\r\\n    [nzDefaultPickerValue]=\\"data.nzDefaultPickerValue\\"\\r\\n    [nzDisabledDate]=\\"data.nzDisabledDate\\"\\r\\n    [nzDisabledTime]=\\"data.nzDisabledTime\\"\\r\\n    [nzDropdownClassName]=\\"data.nzDropdownClassName\\"\\r\\n    [nzFormat]=\\"nzFormat\\"\\r\\n    [nzId]=\\"data.nzId\\"\\r\\n    [nzInputReadOnly]=\\"data.nzInputReadOnly\\"\\r\\n    [nzLocale]=\\"nzLocale\\"\\r\\n    [nzPopupStyle]=\\"data.nzPopupStyle\\"\\r\\n    [nzShowNow]=\\"data.nzShowNow\\"\\r\\n    [nzShowTime]=\\"data.nzShowTime || nzShowTime\\"\\r\\n    [nzShowToday]=\\"nzShowToday || data.nzShowToday\\"\\r\\n    (nzOnOpenChange)=\\"data.nzOnOpenChange.emit($event)\\"\\r\\n    (nzOnOk)=\\"data.nzOnOk.emit($event)\\"\\r\\n    (nzOnCalendarChange)=\\"data.nzOnCalendarChange.emit($event)\\"\\r\\n    (nzOnPanelChange)=\\"data.nzOnPanelChange.emit($event)\\"\\r\\n  ></nz-date-picker>\\r\\n</ng-template>\\r\\n"},{"name":"NzxBetweenInputComponent","id":"component-NzxBetweenInputComponent-0b9b5815420e811c6e8b2083f64836b12e11649af73d7c1cde5332ac0ceb6c4a9d0053802784a0c84d18e3e3ff2ea91748feb0dad3ec2103119319f6a33bdf91","file":"lib/between-input/between-input.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxBetweenInputComponent), multi: true\\n}","type":"component"}],"selector":"nzx-between-input","styleUrls":[],"styles":[],"templateUrl":["./between-input.component.html"],"viewProviders":[],"inputsClass":[{"name":"nzxEndFormatter","defaultValue":"v => v","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n指定输入框展示值的格式-结束\\n","description":"<p>指定输入框展示值的格式-结束</p>\\n","line":98,"type":"function","decorators":[]},{"name":"nzxEndId","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n组件内部 input 的 id 值-结束\\n","description":"<p>组件内部 input 的 id 值-结束</p>\\n","line":81,"type":"string","decorators":[]},{"name":"nzxEndMax","defaultValue":"Infinity","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最大值-结束\\n","description":"<p>最大值-结束</p>\\n","line":48,"type":"any","decorators":[]},{"name":"nzxEndMin","defaultValue":"-Infinity","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最小值-结束\\n","description":"<p>最小值-结束</p>\\n","line":56,"type":"number","decorators":[]},{"name":"nzxEndPlaceholder","defaultValue":"\'结束值\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段Placeholder\\n","description":"<p>结束字段Placeholder</p>\\n","line":39,"type":"string","decorators":[]},{"name":"nzxEndPrecision","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t数值精度-结束\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">数值精度-结束</code></pre></div>","line":64,"type":"number","decorators":[]},{"name":"nzxEndReName","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段重命名\\n","description":"<p>结束字段重命名</p>\\n","line":89,"type":"string","decorators":[]},{"name":"nzxEndStep","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t每次改变步数，可以为小数-结束\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">每次改变步数，可以为小数-结束</code></pre></div>","line":72,"type":"number","decorators":[]},{"name":"nzxStarId","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n组件内部 input 的 id 值-开始\\n","description":"<p>组件内部 input 的 id 值-开始</p>\\n","line":77,"type":"string","decorators":[]},{"name":"nzxStarPrecision","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t数值精度-开始\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">数值精度-开始</code></pre></div>","line":60,"type":"number","decorators":[]},{"name":"nzxStarStep","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t每次改变步数，可以为小数-开始\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">每次改变步数，可以为小数-开始</code></pre></div>","line":68,"type":"number","decorators":[]},{"name":"nzxStartFormatter","defaultValue":"v => v","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n指定输入框展示值的格式-开始\\n","description":"<p>指定输入框展示值的格式-开始</p>\\n","line":94,"type":"function","decorators":[]},{"name":"nzxStartMax","defaultValue":"Infinity","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最大值-开始\\n","description":"<p>最大值-开始</p>\\n","line":44,"type":"any","decorators":[]},{"name":"nzxStartMin","defaultValue":"-Infinity","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最小值-开始\\n","description":"<p>最小值-开始</p>\\n","line":52,"type":"number","decorators":[]},{"name":"nzxStartPlaceholder","defaultValue":"\'起始值\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段Placeholder\\n","description":"<p>开始字段Placeholder</p>\\n","line":35,"type":"string","decorators":[]},{"name":"nzxStartReName","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段重命名\\n","description":"<p>开始字段重命名</p>\\n","line":85,"type":"string","decorators":[]},{"name":"nzxType","defaultValue":"\'input\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n控件类型, 输入框 或 数字框\\n","description":"<p>控件类型, 输入框 或 数字框</p>\\n","line":31,"type":"\\"input\\" | \\"number\\"","decorators":[]},{"name":"nzxDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否禁用\\n","description":"<p>是否禁用</p>\\n","line":19,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxEndDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段禁用\\n","description":"<p>结束字段禁用</p>\\n","line":31,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxSize","defaultValue":"\'default\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n控件大小\\n","description":"<p>控件大小</p>\\n","line":23,"type":"NzSizeLDSType","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxStartDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段禁用\\n","description":"<p>开始字段禁用</p>\\n","line":27,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}}],"outputsClass":[],"propertiesClass":[{"name":"nzxValue","defaultValue":"{}","deprecated":false,"deprecationMessage":"","type":"InputValueType","optional":false,"description":"","line":27},{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":125},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":126}],"methodsClass":[{"name":"ngModelChange","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":104,"deprecated":false,"deprecationMessage":""},{"name":"registerOnChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"InputValueType","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":117,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"InputValueType","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":121,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":113,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"value","type":"InputValueType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":108,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"InputValueType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  ViewEncapsulation\\r\\n} from \'@angular/core\';\\r\\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\r\\nimport { NzxBetweenComponent } from \'@xmagic/nzx-antd/between\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-between-input\',\\r\\n  templateUrl: \'./between-input.component.html\',\\r\\n  preserveWhitespaces: false,\\r\\n  encapsulation: ViewEncapsulation.None,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NzxBetweenInputComponent),\\r\\n      multi: true\\r\\n    }\\r\\n  ]\\r\\n})\\r\\nexport class NzxBetweenInputComponent extends NzxBetweenComponent implements ControlValueAccessor {\\r\\n  nzxValue: InputValueType = {};\\r\\n  /**\\r\\n   * 控件类型, 输入框 或 数字框\\r\\n   */\\r\\n  @Input() nzxType: \'input\' | \'number\' = \'input\';\\r\\n  /**\\r\\n   * 开始字段Placeholder\\r\\n   */\\r\\n  @Input() nzxStartPlaceholder = \'起始值\';\\r\\n  /**\\r\\n   * 结束字段Placeholder\\r\\n   */\\r\\n  @Input() nzxEndPlaceholder = \'结束值\';\\r\\n\\r\\n  /**\\r\\n   * 最大值-开始\\r\\n   */\\r\\n  @Input() nzxStartMax = Infinity;\\r\\n  /**\\r\\n   * 最大值-结束\\r\\n   */\\r\\n  @Input() nzxEndMax = Infinity;\\r\\n  /**\\r\\n   * 最小值-开始\\r\\n   */\\r\\n  @Input() nzxStartMin = -Infinity;\\r\\n  /**\\r\\n   * 最小值-结束\\r\\n   */\\r\\n  @Input() nzxEndMin = -Infinity;\\r\\n  /**\\r\\n   * \\t数值精度-开始\\r\\n   */\\r\\n  @Input() nzxStarPrecision?: number;\\r\\n  /**\\r\\n   * \\t数值精度-结束\\r\\n   */\\r\\n  @Input() nzxEndPrecision?: number;\\r\\n  /**\\r\\n   * \\t每次改变步数，可以为小数-开始\\r\\n   */\\r\\n  @Input() nzxStarStep = 1;\\r\\n  /**\\r\\n   * \\t每次改变步数，可以为小数-结束\\r\\n   */\\r\\n  @Input() nzxEndStep = 1;\\r\\n\\r\\n  /**\\r\\n   * 组件内部 input 的 id 值-开始\\r\\n   */\\r\\n  @Input() nzxStarId?: string;\\r\\n  /**\\r\\n   * 组件内部 input 的 id 值-结束\\r\\n   */\\r\\n  @Input() nzxEndId?: string;\\r\\n  /**\\r\\n   * 开始字段重命名\\r\\n   */\\r\\n  @Input() nzxStartReName?: string;\\r\\n  /**\\r\\n   * 结束字段重命名\\r\\n   */\\r\\n  @Input() nzxEndReName?: string;\\r\\n\\r\\n  /**\\r\\n   * 指定输入框展示值的格式-开始\\r\\n   */\\r\\n  @Input() nzxStartFormatter: (value: number | string) => string | number = v => v;\\r\\n  /**\\r\\n   * 指定输入框展示值的格式-结束\\r\\n   */\\r\\n  @Input() nzxEndFormatter: (value: number | string) => string | number = v => v;\\r\\n\\r\\n  constructor(protected cdr: ChangeDetectorRef) {\\r\\n    super();\\r\\n  }\\r\\n\\r\\n  ngModelChange() {\\r\\n    this.onChange(this.nzxValue);\\r\\n  }\\r\\n\\r\\n  writeValue(value: InputValueType): void {\\r\\n    this.nzxValue = value || {};\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n\\r\\n  setDisabledState(isDisabled: boolean): void {\\r\\n    this.nzxDisabled = isDisabled;\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: (_: InputValueType) => void): void {\\r\\n    this.onChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnTouched(fn: () => void): void {\\r\\n    this.onTouched = fn;\\r\\n  }\\r\\n\\r\\n  onChange: (value: InputValueType) => void = () => null;\\r\\n  onTouched: () => void = () => null;\\r\\n}\\r\\n\\r\\nexport type InputValueType = Record<string, string | number | null> | null;\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","preserveWhitespaces":false,"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":98,"jsdoctags":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":"NzxBetweenComponent","implements":["ControlValueAccessor"],"templateData":"<nzx-between\\r\\n  [nzxDisabled]=\\"nzxDisabled\\"\\r\\n  [nzxStartDisabled]=\\"nzxStartDisabled\\"\\r\\n  [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n  [nzxSize]=\\"nzxSize\\"\\r\\n>\\r\\n  <ng-container\\r\\n    start\\r\\n    *ngTemplateOutlet=\\"\\r\\n      typeTemplate;\\r\\n      context: {\\r\\n        $implicit: {\\r\\n          dir: nzxStartReName || \'start\',\\r\\n          disabled: nzxDisabled || nzxStartDisabled,\\r\\n          placeholder: nzxStartPlaceholder,\\r\\n          step: nzxStarStep,\\r\\n          id: nzxStarId,\\r\\n          formatter: nzxStartFormatter,\\r\\n          max: nzxStartMax,\\r\\n          min: nzxStartMin\\r\\n        }\\r\\n      }\\r\\n    \\"\\r\\n  ></ng-container>\\r\\n  <ng-container\\r\\n    end\\r\\n    *ngTemplateOutlet=\\"\\r\\n      typeTemplate;\\r\\n      context: {\\r\\n        $implicit: {\\r\\n          dir: nzxEndReName || \'end\',\\r\\n          disabled: nzxDisabled || nzxEndDisabled,\\r\\n          placeholder: nzxEndPlaceholder,\\r\\n          step: nzxEndStep,\\r\\n          id: nzxEndId,\\r\\n          formatter: nzxEndFormatter,\\r\\n          max: nzxEndMax,\\r\\n          min: nzxEndMin\\r\\n        }\\r\\n      }\\r\\n    \\"\\r\\n  ></ng-container>\\r\\n</nzx-between>\\r\\n\\r\\n<ng-template #typeTemplate let-data>\\r\\n  <ng-container [ngSwitch]=\\"nzxType\\">\\r\\n    <input\\r\\n      *ngSwitchCase=\\"\'input\'\\"\\r\\n      nz-input\\r\\n      [disabled]=\\"data.disabled\\"\\r\\n      [nzSize]=\\"nzxSize\\"\\r\\n      [(ngModel)]=\\"nzxValue[data.dir]\\"\\r\\n      [attr.placeholder]=\\"data.placeholder\\"\\r\\n      (ngModelChange)=\\"ngModelChange()\\"\\r\\n    />\\r\\n    <nz-input-number\\r\\n      *ngSwitchCase=\\"\'number\'\\"\\r\\n      [nzDisabled]=\\"data.disabled\\"\\r\\n      [(ngModel)]=\\"nzxValue[data.dir]\\"\\r\\n      [nzPlaceHolder]=\\"data.placeholder\\"\\r\\n      [nzSize]=\\"nzxSize\\"\\r\\n      [nzStep]=\\"data.step\\"\\r\\n      [nzPrecision]=\\"data.precision\\"\\r\\n      [nzId]=\\"data.id\\"\\r\\n      [nzFormatter]=\\"data.formatter\\"\\r\\n      [nzMax]=\\"data.max\\"\\r\\n      [nzMin]=\\"data.min\\"\\r\\n      (ngModelChange)=\\"ngModelChange()\\"\\r\\n    ></nz-input-number>\\r\\n  </ng-container>\\r\\n</ng-template>\\r\\n"},{"name":"NzxBetweenTimeComponent","id":"component-NzxBetweenTimeComponent-931faecadf45918a4220ff0b151ec7330b419b02b15b00365c57a1f4e6d8d7e1ebc4a21cfa442a4cda278258ea188561c33a1371ba96c96329a6c16fc528831d","file":"lib/between-time/between-time.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxBetweenTimeComponent), multi: true\\n}","type":"component"}],"selector":"nzx-between-time","styleUrls":[],"styles":[],"templateUrl":["./between-time.component.html"],"viewProviders":[],"inputsClass":[{"name":"endMaxDateTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最大时间\\n","description":"<p>最大时间</p>\\n","line":213,"type":"DisabledDateType","decorators":[]},{"name":"endMinDateTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最小时间\\n","description":"<p>最小时间</p>\\n","line":223,"type":"DisabledDateType","decorators":[]},{"name":"nzFormat","defaultValue":"\'HH:mm:ss\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n展示的时间格式\\n","description":"<p>展示的时间格式</p>\\n","line":98,"type":"string","decorators":[]},{"name":"nzxEndAddOn","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n选择框底部显示自定义的内容\\n","description":"<p>选择框底部显示自定义的内容</p>\\n","line":171,"type":"TemplateRef<void>","decorators":[]},{"name":"nzxEndAllowEmpty","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否展示清除按钮\\n","description":"<p>是否展示清除按钮</p>\\n","line":191,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]},{"name":"nzxEndAutoFocus","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自动获取焦点\\n","description":"<p>自动获取焦点</p>\\n","line":195,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]},{"name":"nzxEndBackdrop","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n 浮层是否应带有背景板\\n","description":"<p> 浮层是否应带有背景板</p>\\n","line":199,"type":"boolean","decorators":[]},{"name":"nzxEndClearText","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n清除按钮的提示文案-结束\\n","description":"<p>清除按钮的提示文案-结束</p>\\n","line":151,"type":"string","decorators":[]},{"name":"nzxEndDefaultOpenValue","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当 [ngModel] 不存在时，可以设置面板打开时默认选中的值\\n","description":"<p>当 [ngModel] 不存在时，可以设置面板打开时默认选中的值</p>\\n","line":175,"type":"Date","decorators":[]},{"name":"nzxEndHideDisabledOptions","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n隐藏禁止选择的选项\\n","description":"<p>隐藏禁止选择的选项</p>\\n","line":187,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]},{"name":"nzxEndHourStep","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n小时选项间隔-结束\\n","description":"<p>小时选项间隔-结束</p>\\n","line":139,"type":"number","decorators":[]},{"name":"nzxEndId","defaultValue":"null","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n控件id-结束\\n","description":"<p>控件id-结束</p>\\n","line":131,"type":"string | null","decorators":[]},{"name":"nzxEndMinuteStep","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n分钟选项间隔-结束\\n","description":"<p>分钟选项间隔-结束</p>\\n","line":143,"type":"number","decorators":[]},{"name":"nzxEndNowText","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n 此刻按钮文本\\n","description":"<p> 此刻按钮文本</p>\\n","line":155,"type":"string","decorators":[]},{"name":"nzxEndOkText","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n确认按钮文本\\n","description":"<p>确认按钮文本</p>\\n","line":159,"type":"string","decorators":[]},{"name":"nzxEndPlaceholder","defaultValue":"\'结束值\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n没有值的时候显示的内容\\n","description":"<p>没有值的时候显示的内容</p>\\n","line":167,"type":"string","decorators":[]},{"name":"nzxEndPopupClassName","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n弹出层类名\\n","description":"<p>弹出层类名</p>\\n","line":163,"type":"string","decorators":[]},{"name":"nzxEndReName","defaultValue":"\'end\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段重命名\\n","description":"<p>结束字段重命名</p>\\n","line":46,"type":"string","decorators":[]},{"name":"nzxEndSecondStep","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n秒选项间隔-结束\\n","description":"<p>秒选项间隔-结束</p>\\n","line":147,"type":"number","decorators":[]},{"name":"nzxEndStatus","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n设置校验状态-结束\\n","description":"<p>设置校验状态-结束</p>\\n","line":135,"type":"NzStatus","decorators":[]},{"name":"nzxEndSuffixIcon","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自定义的后缀图标\\n","description":"<p>自定义的后缀图标</p>\\n","line":183,"type":"string | TemplateRef<NzSafeAny>","decorators":[]},{"name":"nzxEndUse12Hours","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n使用12小时制，为true时format默认为h:mm:ss a\\n","description":"<p>使用12小时制，为true时format默认为h:mm:ss a</p>\\n","line":179,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]},{"name":"nzxStartAddOn","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n选择框底部显示自定义的内容\\n","description":"<p>选择框底部显示自定义的内容</p>\\n","line":90,"type":"TemplateRef<void>","decorators":[]},{"name":"nzxStartAllowEmpty","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否展示清除按钮\\n","description":"<p>是否展示清除按钮</p>\\n","line":114,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]},{"name":"nzxStartAutoFocus","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自动获取焦点\\n","description":"<p>自动获取焦点</p>\\n","line":118,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]},{"name":"nzxStartBackdrop","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n 浮层是否应带有背景板\\n","description":"<p> 浮层是否应带有背景板</p>\\n","line":122,"type":"boolean","decorators":[]},{"name":"nzxStartClearText","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n清除按钮的提示文案-开始\\n","description":"<p>清除按钮的提示文案-开始</p>\\n","line":70,"type":"string","decorators":[]},{"name":"nzxStartDefaultOpenValue","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当 [ngModel] 不存在时，可以设置面板打开时默认选中的值\\n","description":"<p>当 [ngModel] 不存在时，可以设置面板打开时默认选中的值</p>\\n","line":94,"type":"Date","decorators":[]},{"name":"nzxStartHideDisabledOptions","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n隐藏禁止选择的选项\\n","description":"<p>隐藏禁止选择的选项</p>\\n","line":110,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]},{"name":"nzxStartHourStep","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n小时选项间隔-开始\\n","description":"<p>小时选项间隔-开始</p>\\n","line":58,"type":"number","decorators":[]},{"name":"nzxStartId","defaultValue":"null","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n控件id-开始\\n","description":"<p>控件id-开始</p>\\n","line":50,"type":"string | null","decorators":[]},{"name":"nzxStartMinuteStep","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n分钟选项间隔-开始\\n","description":"<p>分钟选项间隔-开始</p>\\n","line":62,"type":"number","decorators":[]},{"name":"nzxStartNowText","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n 此刻按钮文本\\n","description":"<p> 此刻按钮文本</p>\\n","line":74,"type":"string","decorators":[]},{"name":"nzxStartOkText","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n确认按钮文本\\n","description":"<p>确认按钮文本</p>\\n","line":78,"type":"string","decorators":[]},{"name":"nzxStartPlaceholder","defaultValue":"\'起始值\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n没有值的时候显示的内容\\n","description":"<p>没有值的时候显示的内容</p>\\n","line":86,"type":"string","decorators":[]},{"name":"nzxStartPopupClassName","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n弹出层类名\\n","description":"<p>弹出层类名</p>\\n","line":82,"type":"string","decorators":[]},{"name":"nzxStartReName","defaultValue":"\'start\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段重命名\\n","description":"<p>开始字段重命名</p>\\n","line":42,"type":"string","decorators":[]},{"name":"nzxStartSecondStep","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n秒选项间隔-开始\\n","description":"<p>秒选项间隔-开始</p>\\n","line":66,"type":"number","decorators":[]},{"name":"nzxStartStatus","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n设置校验状态-开始\\n","description":"<p>设置校验状态-开始</p>\\n","line":54,"type":"NzStatus","decorators":[]},{"name":"nzxStartSuffixIcon","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自定义的后缀图标\\n","description":"<p>自定义的后缀图标</p>\\n","line":106,"type":"string | TemplateRef<NzSafeAny>","decorators":[]},{"name":"nzxStartUse12Hours","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n使用12小时制，为true时format默认为h:mm:ss a\\n","description":"<p>使用12小时制，为true时format默认为h:mm:ss a</p>\\n","line":102,"type":"boolean","decorators":[{"name":"InputBoolean","stringifiedArguments":""}]},{"name":"startMaxDateTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最大时间\\n","description":"<p>最大时间</p>\\n","line":218,"type":"DisabledDateType","decorators":[]},{"name":"startMinDateTime","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最小时间\\n","description":"<p>最小时间</p>\\n","line":208,"type":"DisabledDateType","decorators":[]},{"name":"nzxDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否禁用\\n","description":"<p>是否禁用</p>\\n","line":19,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxEndDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束字段禁用\\n","description":"<p>结束字段禁用</p>\\n","line":31,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxSize","defaultValue":"\'default\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n控件大小\\n","description":"<p>控件大小</p>\\n","line":23,"type":"NzSizeLDSType","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}},{"name":"nzxStartDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始字段禁用\\n","description":"<p>开始字段禁用</p>\\n","line":27,"type":"boolean","decorators":[],"inheritance":{"file":"NzxBetweenComponent"}}],"outputsClass":[{"name":"nzxEndOpenChange","defaultValue":"new EventEmitter<boolean>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n面板打开/关闭事件\\n","description":"<p>面板打开/关闭事件</p>\\n","line":203,"type":"EventEmitter"},{"name":"nzxStartOpenChange","defaultValue":"new EventEmitter<boolean>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n面板打开/关闭事件\\n","description":"<p>面板打开/关闭事件</p>\\n","line":126,"type":"EventEmitter"}],"propertiesClass":[{"name":"nzxEndDisabledHours","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":237},{"name":"nzxEndDisabledMinutes","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":239},{"name":"nzxEndDisabledSeconds","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":241},{"name":"nzxStartDisabledHours","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":225},{"name":"nzxStartDisabledMinutes","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":227},{"name":"nzxStartDisabledSeconds","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":229},{"name":"nzxValue","defaultValue":"{}","deprecated":false,"deprecationMessage":"","type":"DatetimeValueType","optional":false,"description":"","line":34},{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":269},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":270}],"methodsClass":[{"name":"getDefaultMaxValue","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"any","typeParameters":[],"line":276,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"getDefaultMinValue","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"any","typeParameters":[],"line":272,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"getDisabledHour","args":[{"name":"minDateTime","type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true},{"name":"maxDateTime","type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"{}","typeParameters":[],"line":286,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取禁用的小时\\n","description":"<p>获取禁用的小时</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":6586,"end":6597,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"minDateTime"},"type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":6580,"end":6585,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最小时间值</p>\\n"},{"name":{"pos":6617,"end":6628,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"maxDateTime"},"type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":6611,"end":6616,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最大时间值</p>\\n"},{"tagName":{"pos":6642,"end":6649,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"getDisabledMinutes","args":[{"name":"hour","type":"number","deprecated":false,"deprecationMessage":""},{"name":"minDateTime","type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true},{"name":"maxDateTime","type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"{}","typeParameters":[],"line":309,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取禁用的分钟\\n","description":"<p>获取禁用的分钟</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":7214,"end":7218,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"hour"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":7208,"end":7213,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前小时</p>\\n"},{"name":{"pos":7237,"end":7248,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"minDateTime"},"type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":7231,"end":7236,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最小时间值</p>\\n"},{"name":{"pos":7268,"end":7279,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"maxDateTime"},"type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":7262,"end":7267,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最大时间值</p>\\n"},{"tagName":{"pos":7293,"end":7300,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"getDisabledSeconds","args":[{"name":"hour","type":"number","deprecated":false,"deprecationMessage":""},{"name":"minute","type":"number","deprecated":false,"deprecationMessage":""},{"name":"minDateTime","type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true},{"name":"maxDateTime","type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"{}","typeParameters":[],"line":334,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取禁用的秒数\\n","description":"<p>获取禁用的秒数</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":7962,"end":7966,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"hour"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":7956,"end":7961,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前小时</p>\\n"},{"name":{"pos":7985,"end":7991,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"minute"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":7979,"end":7984,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前分钟</p>\\n"},{"name":{"pos":8010,"end":8021,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"minDateTime"},"type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":8004,"end":8009,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最小时间值</p>\\n"},{"name":{"pos":8041,"end":8052,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"maxDateTime"},"type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":8035,"end":8040,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>最大时间值</p>\\n"},{"tagName":{"pos":8066,"end":8073,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"ngModelChange","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":248,"deprecated":false,"deprecationMessage":""},{"name":"registerOnChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"DatetimeValueType","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":261,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"DatetimeValueType","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":265,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":257,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"value","type":"DatetimeValueType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":252,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"DatetimeValueType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  Output,\\r\\n  TemplateRef,\\r\\n  ViewEncapsulation\\r\\n} from \'@angular/core\';\\r\\nimport { NzSafeAny, NzStatus } from \'ng-zorro-antd/core/types\';\\r\\nimport { InputBoolean } from \'ng-zorro-antd/core/util\';\\r\\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\r\\nimport { NzxBetweenComponent } from \'@xmagic/nzx-antd/between\';\\r\\nimport { DatetimeValueType, DisabledDateType, getRealDateTime } from \'@xmagic/nzx-antd/between-datetime\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-between-time\',\\r\\n  templateUrl: \'./between-time.component.html\',\\r\\n  preserveWhitespaces: false,\\r\\n  encapsulation: ViewEncapsulation.None,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NzxBetweenTimeComponent),\\r\\n      multi: true\\r\\n    }\\r\\n  ]\\r\\n})\\r\\nexport class NzxBetweenTimeComponent extends NzxBetweenComponent implements ControlValueAccessor {\\r\\n  nzxValue: DatetimeValueType = {};\\r\\n  get nzDefaultOpenValue() {\\r\\n    return new Date();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 开始字段重命名\\r\\n   */\\r\\n  @Input() nzxStartReName = \'start\';\\r\\n  /**\\r\\n   * 结束字段重命名\\r\\n   */\\r\\n  @Input() nzxEndReName = \'end\';\\r\\n  /**\\r\\n   * 控件id-开始\\r\\n   */\\r\\n  @Input() nzxStartId: string | null = null;\\r\\n  /**\\r\\n   * 设置校验状态-开始\\r\\n   */\\r\\n  @Input() nzxStartStatus: NzStatus = \'\';\\r\\n  /**\\r\\n   * 小时选项间隔-开始\\r\\n   */\\r\\n  @Input() nzxStartHourStep = 1;\\r\\n  /**\\r\\n   * 分钟选项间隔-开始\\r\\n   */\\r\\n  @Input() nzxStartMinuteStep = 1;\\r\\n  /**\\r\\n   * 秒选项间隔-开始\\r\\n   */\\r\\n  @Input() nzxStartSecondStep = 1;\\r\\n  /**\\r\\n   * 清除按钮的提示文案-开始\\r\\n   */\\r\\n  @Input() nzxStartClearText?: string;\\r\\n  /**\\r\\n   *  此刻按钮文本\\r\\n   */\\r\\n  @Input() nzxStartNowText?: string;\\r\\n  /**\\r\\n   * 确认按钮文本\\r\\n   */\\r\\n  @Input() nzxStartOkText?: string;\\r\\n  /**\\r\\n   * 弹出层类名\\r\\n   */\\r\\n  @Input() nzxStartPopupClassName?: string;\\r\\n  /**\\r\\n   * 没有值的时候显示的内容\\r\\n   */\\r\\n  @Input() nzxStartPlaceholder = \'起始值\';\\r\\n  /**\\r\\n   * 选择框底部显示自定义的内容\\r\\n   */\\r\\n  @Input() nzxStartAddOn?: TemplateRef<void>;\\r\\n  /**\\r\\n   * 当 [ngModel] 不存在时，可以设置面板打开时默认选中的值\\r\\n   */\\r\\n  @Input() nzxStartDefaultOpenValue?: Date;\\r\\n  /**\\r\\n   * 展示的时间格式\\r\\n   */\\r\\n  @Input() nzFormat = \'HH:mm:ss\';\\r\\n  /**\\r\\n   * 使用12小时制，为true时format默认为h:mm:ss a\\r\\n   */\\r\\n  @Input() @InputBoolean() nzxStartUse12Hours = false;\\r\\n  /**\\r\\n   * 自定义的后缀图标\\r\\n   */\\r\\n  @Input() nzxStartSuffixIcon?: string | TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * 隐藏禁止选择的选项\\r\\n   */\\r\\n  @Input() @InputBoolean() nzxStartHideDisabledOptions?: boolean;\\r\\n  /**\\r\\n   * 是否展示清除按钮\\r\\n   */\\r\\n  @Input() @InputBoolean() nzxStartAllowEmpty?: boolean;\\r\\n  /**\\r\\n   * 自动获取焦点\\r\\n   */\\r\\n  @Input() @InputBoolean() nzxStartAutoFocus?: boolean;\\r\\n  /**\\r\\n   *  浮层是否应带有背景板\\r\\n   */\\r\\n  @Input() nzxStartBackdrop?: boolean;\\r\\n  /**\\r\\n   * 面板打开/关闭事件\\r\\n   */\\r\\n  @Output() readonly nzxStartOpenChange = new EventEmitter<boolean>();\\r\\n\\r\\n  /**\\r\\n   * 控件id-结束\\r\\n   */\\r\\n  @Input() nzxEndId: string | null = null;\\r\\n  /**\\r\\n   * 设置校验状态-结束\\r\\n   */\\r\\n  @Input() nzxEndStatus: NzStatus = \'\';\\r\\n  /**\\r\\n   * 小时选项间隔-结束\\r\\n   */\\r\\n  @Input() nzxEndHourStep?: number = 1;\\r\\n  /**\\r\\n   * 分钟选项间隔-结束\\r\\n   */\\r\\n  @Input() nzxEndMinuteStep?: number = 1;\\r\\n  /**\\r\\n   * 秒选项间隔-结束\\r\\n   */\\r\\n  @Input() nzxEndSecondStep?: number = 1;\\r\\n  /**\\r\\n   * 清除按钮的提示文案-结束\\r\\n   */\\r\\n  @Input() nzxEndClearText?: string;\\r\\n  /**\\r\\n   *  此刻按钮文本\\r\\n   */\\r\\n  @Input() nzxEndNowText?: string;\\r\\n  /**\\r\\n   * 确认按钮文本\\r\\n   */\\r\\n  @Input() nzxEndOkText?: string;\\r\\n  /**\\r\\n   * 弹出层类名\\r\\n   */\\r\\n  @Input() nzxEndPopupClassName?: string;\\r\\n  /**\\r\\n   * 没有值的时候显示的内容\\r\\n   */\\r\\n  @Input() nzxEndPlaceholder = \'结束值\';\\r\\n  /**\\r\\n   * 选择框底部显示自定义的内容\\r\\n   */\\r\\n  @Input() nzxEndAddOn?: TemplateRef<void>;\\r\\n  /**\\r\\n   * 当 [ngModel] 不存在时，可以设置面板打开时默认选中的值\\r\\n   */\\r\\n  @Input() nzxEndDefaultOpenValue?: Date;\\r\\n  /**\\r\\n   * 使用12小时制，为true时format默认为h:mm:ss a\\r\\n   */\\r\\n  @Input() @InputBoolean() nzxEndUse12Hours = false;\\r\\n  /**\\r\\n   * 自定义的后缀图标\\r\\n   */\\r\\n  @Input() nzxEndSuffixIcon?: string | TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * 隐藏禁止选择的选项\\r\\n   */\\r\\n  @Input() @InputBoolean() nzxEndHideDisabledOptions?: boolean;\\r\\n  /**\\r\\n   * 是否展示清除按钮\\r\\n   */\\r\\n  @Input() @InputBoolean() nzxEndAllowEmpty?: boolean;\\r\\n  /**\\r\\n   * 自动获取焦点\\r\\n   */\\r\\n  @Input() @InputBoolean() nzxEndAutoFocus?: boolean;\\r\\n  /**\\r\\n   *  浮层是否应带有背景板\\r\\n   */\\r\\n  @Input() nzxEndBackdrop?: boolean;\\r\\n  /**\\r\\n   * 面板打开/关闭事件\\r\\n   */\\r\\n  @Output() readonly nzxEndOpenChange = new EventEmitter<boolean>();\\r\\n\\r\\n  /**\\r\\n   * 最小时间\\r\\n   */\\r\\n  @Input() startMinDateTime?: DisabledDateType;\\r\\n\\r\\n  /**\\r\\n   * 最大时间\\r\\n   */\\r\\n  @Input() endMaxDateTime?: DisabledDateType;\\r\\n\\r\\n  /**\\r\\n   * 最大时间\\r\\n   */\\r\\n  @Input() startMaxDateTime?: DisabledDateType;\\r\\n\\r\\n  /**\\r\\n   * 最小时间\\r\\n   */\\r\\n  @Input() endMinDateTime?: DisabledDateType;\\r\\n\\r\\n  nzxStartDisabledHours = () =>\\r\\n    this.getDisabledHour(this.startMinDateTime, this.getDefaultMaxValue(this.startMaxDateTime as Date));\\r\\n  nzxStartDisabledMinutes = (hour: number) =>\\r\\n    this.getDisabledMinutes(hour, this.startMinDateTime, this.getDefaultMaxValue(this.startMaxDateTime as Date));\\r\\n  nzxStartDisabledSeconds = (hour: number, minute: number) =>\\r\\n    this.getDisabledSeconds(\\r\\n      hour,\\r\\n      minute,\\r\\n      this.startMinDateTime,\\r\\n      this.getDefaultMaxValue(this.startMaxDateTime as Date)\\r\\n    );\\r\\n\\r\\n  nzxEndDisabledHours: () => number[] = () =>\\r\\n    this.getDisabledHour(this.getDefaultMinValue(this.endMinDateTime as Date), this.endMaxDateTime);\\r\\n  nzxEndDisabledMinutes = (hour: number) =>\\r\\n    this.getDisabledMinutes(hour, this.getDefaultMinValue(this.endMinDateTime as Date), this.endMaxDateTime);\\r\\n  nzxEndDisabledSeconds = (hour: number, minute: number) =>\\r\\n    this.getDisabledSeconds(hour, minute, this.endMinDateTime, this.endMaxDateTime);\\r\\n\\r\\n  constructor(protected cdr: ChangeDetectorRef) {\\r\\n    super();\\r\\n  }\\r\\n\\r\\n  ngModelChange() {\\r\\n    this.onChange(this.nzxValue);\\r\\n  }\\r\\n\\r\\n  writeValue(value: DatetimeValueType): void {\\r\\n    this.nzxValue = value || {};\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n\\r\\n  setDisabledState(isDisabled: boolean): void {\\r\\n    this.nzxDisabled = isDisabled;\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: (_: DatetimeValueType) => void): void {\\r\\n    this.onChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnTouched(fn: () => void): void {\\r\\n    this.onTouched = fn;\\r\\n  }\\r\\n\\r\\n  onChange: (value: DatetimeValueType) => void = () => null;\\r\\n  onTouched: () => void = () => null;\\r\\n\\r\\n  private getDefaultMinValue(date?: Date) {\\r\\n    return date === undefined ? this.nzxValue[this.nzxStartReName] : date;\\r\\n  }\\r\\n\\r\\n  private getDefaultMaxValue(date?: Date) {\\r\\n    return date === undefined ? this.nzxValue[this.nzxEndReName] : date;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取禁用的小时\\r\\n   * @param minDateTime 最小时间值\\r\\n   * @param maxDateTime 最大时间值\\r\\n   * @private\\r\\n   */\\r\\n  private getDisabledHour(minDateTime?: DisabledDateType, maxDateTime?: DisabledDateType) {\\r\\n    const minValue = getRealDateTime(new Date(), minDateTime);\\r\\n    const maxValue = getRealDateTime(new Date(), maxDateTime);\\r\\n    if (!maxValue && !minValue) {\\r\\n      return [];\\r\\n    }\\r\\n    let hours: number[] = [];\\r\\n    if (minValue) {\\r\\n      hours = NzxUtils.range(0, minValue.getHours());\\r\\n    }\\r\\n    if (maxValue) {\\r\\n      hours = hours.concat(NzxUtils.range(maxValue.getHours() + 1, 24));\\r\\n    }\\r\\n    return hours;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取禁用的分钟\\r\\n   * @param hour 当前小时\\r\\n   * @param minDateTime 最小时间值\\r\\n   * @param maxDateTime 最大时间值\\r\\n   * @private\\r\\n   */\\r\\n  private getDisabledMinutes(hour: number, minDateTime?: DisabledDateType, maxDateTime?: DisabledDateType) {\\r\\n    const minValue = getRealDateTime(new Date(), minDateTime);\\r\\n    const maxValue = getRealDateTime(new Date(), maxDateTime);\\r\\n    if (!maxValue && !minValue) {\\r\\n      return [];\\r\\n    }\\r\\n\\r\\n    let minutes: number[] = [];\\r\\n    if (minValue && minValue.getHours() === hour) {\\r\\n      minutes = NzxUtils.range(0, minValue.getMinutes());\\r\\n    }\\r\\n    if (maxValue && maxValue.getHours() === hour) {\\r\\n      minutes = minutes.concat(NzxUtils.range(maxValue.getMinutes() + 1, 60));\\r\\n    }\\r\\n    return minutes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取禁用的秒数\\r\\n   * @param hour 当前小时\\r\\n   * @param minute 当前分钟\\r\\n   * @param minDateTime 最小时间值\\r\\n   * @param maxDateTime 最大时间值\\r\\n   * @private\\r\\n   */\\r\\n  private getDisabledSeconds(\\r\\n    hour: number,\\r\\n    minute: number,\\r\\n    minDateTime?: DisabledDateType,\\r\\n    maxDateTime?: DisabledDateType\\r\\n  ) {\\r\\n    const minValue = getRealDateTime(new Date(), minDateTime);\\r\\n    const maxValue = getRealDateTime(new Date(), maxDateTime);\\r\\n    if (!maxValue && !minValue) {\\r\\n      return [];\\r\\n    }\\r\\n\\r\\n    let seconds: number[] = [];\\r\\n    if (minValue && minValue.getHours() === hour && minValue.getMinutes() === minute) {\\r\\n      seconds = NzxUtils.range(0, minValue.getSeconds());\\r\\n    }\\r\\n    if (maxValue && maxValue.getHours() === hour && maxValue.getMinutes() === minute) {\\r\\n      seconds = seconds.concat(NzxUtils.range(maxValue.getSeconds() + 1, 60));\\r\\n    }\\r\\n    return seconds;\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","preserveWhitespaces":false,"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":242,"jsdoctags":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":"NzxBetweenComponent","implements":["ControlValueAccessor"],"accessors":{"nzDefaultOpenValue":{"name":"nzDefaultOpenValue","getSignature":{"name":"nzDefaultOpenValue","type":"","returnType":"","line":35}}},"templateData":"<nzx-between\\r\\n  [nzxDisabled]=\\"nzxDisabled\\"\\r\\n  [nzxStartDisabled]=\\"nzxStartDisabled\\"\\r\\n  [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n  [nzxSize]=\\"nzxSize\\"\\r\\n>\\r\\n  <ng-container\\r\\n    start\\r\\n    *ngTemplateOutlet=\\"\\r\\n      typeTemplate;\\r\\n      context: {\\r\\n        $implicit: {\\r\\n          dir: nzxStartReName,\\r\\n          disabled: nzxDisabled || nzxStartDisabled,\\r\\n          placeholder: nzxStartPlaceholder,\\r\\n          nzSuffixIcon: nzxStartSuffixIcon,\\r\\n          nzBackdrop: nzxStartBackdrop,\\r\\n          nzAutoFocus: nzxStartAutoFocus,\\r\\n          nzId: nzxStartId,\\r\\n          nzAddOn: nzxStartAddOn,\\r\\n          nzAllowEmpty: nzxStartAllowEmpty,\\r\\n          nzClearText: nzxStartClearText,\\r\\n          nzDefaultOpenValue: nzxStartDefaultOpenValue,\\r\\n          nzDisabledHours: nzxStartDisabledHours,\\r\\n          nzDisabledMinutes: nzxStartDisabledMinutes,\\r\\n          nzDisabledSeconds: nzxStartDisabledSeconds,\\r\\n          nzHideDisabledOptions: nzxStartHideDisabledOptions,\\r\\n          nzHourStep: nzxStartHourStep,\\r\\n          nzMinuteStep: nzxStartMinuteStep,\\r\\n          nzNowText: nzxStartNowText,\\r\\n          nzOkText: nzxStartOkText,\\r\\n          nzPopupClassName: nzxStartPopupClassName,\\r\\n          nzSecondStep: nzxStartSecondStep,\\r\\n          nzUse12Hours: nzxStartUse12Hours,\\r\\n          nzOpenChange: nzxStartOpenChange,\\r\\n          nzStatus: nzxStartStatus\\r\\n        }\\r\\n      }\\r\\n    \\"\\r\\n  ></ng-container>\\r\\n  <ng-container\\r\\n    end\\r\\n    *ngTemplateOutlet=\\"\\r\\n      typeTemplate;\\r\\n      context: {\\r\\n        $implicit: {\\r\\n          dir: nzxEndReName,\\r\\n          disabled: nzxDisabled || nzxEndDisabled,\\r\\n          placeholder: nzxEndPlaceholder,\\r\\n          nzSuffixIcon: nzxEndSuffixIcon,\\r\\n          nzBackdrop: nzxEndBackdrop,\\r\\n          nzAutoFocus: nzxEndAutoFocus,\\r\\n          nzId: nzxEndId,\\r\\n          nzAddOn: nzxEndAddOn,\\r\\n          nzAllowEmpty: nzxEndAllowEmpty,\\r\\n          nzClearText: nzxEndClearText,\\r\\n          nzDefaultOpenValue: nzxEndDefaultOpenValue,\\r\\n          nzDisabledHours: nzxEndDisabledHours,\\r\\n          nzDisabledMinutes: nzxEndDisabledMinutes,\\r\\n          nzDisabledSeconds: nzxEndDisabledSeconds,\\r\\n          nzHideDisabledOptions: nzxEndHideDisabledOptions,\\r\\n          nzHourStep: nzxEndHourStep,\\r\\n          nzMinuteStep: nzxEndMinuteStep,\\r\\n          nzNowText: nzxEndNowText,\\r\\n          nzOkText: nzxEndOkText,\\r\\n          nzPopupClassName: nzxEndPopupClassName,\\r\\n          nzSecondStep: nzxEndSecondStep,\\r\\n          nzUse12Hours: nzxEndUse12Hours,\\r\\n          nzOpenChange: nzxEndOpenChange,\\r\\n          nzStatus: nzxEndStatus\\r\\n        }\\r\\n      }\\r\\n    \\"\\r\\n  ></ng-container>\\r\\n</nzx-between>\\r\\n\\r\\n<ng-template #typeTemplate let-data>\\r\\n  <nz-time-picker\\r\\n    [(ngModel)]=\\"nzxValue[data.dir]\\"\\r\\n    (ngModelChange)=\\"ngModelChange()\\"\\r\\n    [nzDisabled]=\\"data.disabled\\"\\r\\n    [nzPlaceHolder]=\\"data.placeholder\\"\\r\\n    [nzSize]=\\"nzxSize\\"\\r\\n    [nzSuffixIcon]=\\"data.nzSuffixIcon || \'clock-circle\'\\"\\r\\n    [nzBackdrop]=\\"data.nzBackdrop\\"\\r\\n    [nzAutoFocus]=\\"data.nzAutoFocus\\"\\r\\n    [nzFormat]=\\"nzFormat == null ? \'HH:mm:ss\' : nzFormat\\"\\r\\n    [nzId]=\\"data.nzId\\"\\r\\n    [nzAddOn]=\\"data.nzAddOn\\"\\r\\n    [nzAllowEmpty]=\\"data.nzAllowEmpty == null ? true : data.nzAllowEmpty\\"\\r\\n    [nzClearText]=\\"data.nzClearText == null ? \'清空\' : data.nzClearText\\"\\r\\n    [nzDefaultOpenValue]=\\"data.nzDefaultOpenValue || nzDefaultOpenValue\\"\\r\\n    [nzDisabledHours]=\\"data.nzDisabledHours\\"\\r\\n    [nzDisabledMinutes]=\\"data.nzDisabledMinutes\\"\\r\\n    [nzDisabledSeconds]=\\"data.nzDisabledSeconds\\"\\r\\n    [nzHideDisabledOptions]=\\"data.nzHideDisabledOptions\\"\\r\\n    [nzHourStep]=\\"data.nzHourStep == null ? 1 : data.nzHourStep\\"\\r\\n    [nzMinuteStep]=\\"data.nzMinuteStep == null ? 1 : data.nzMinuteStep\\"\\r\\n    [nzNowText]=\\"data.nzNowText\\"\\r\\n    [nzOkText]=\\"data.nzOkText\\"\\r\\n    [nzPopupClassName]=\\"data.nzPopupClassName\\"\\r\\n    [nzSecondStep]=\\"data.nzSecondStep == null ? 1 : data.nzSecondStep\\"\\r\\n    [nzUse12Hours]=\\"data.nzUse12Hours\\"\\r\\n    (nzOpenChange)=\\"data.nzOpenChange.emit($event)\\"\\r\\n    [nzStatus]=\\"data.nzStatus\\"\\r\\n  ></nz-time-picker>\\r\\n</ng-template>\\r\\n"},{"name":"NzxCheckboxComponent","id":"component-NzxCheckboxComponent-a9a4c531c6c05de56fa35253deef1eedeac018cfcadc3b3b7f71fc55d74105f3a320e178f32c50bf60cee15f84a68268a3f85174c372c06834907177f0ef81cd","file":"lib/checkbox/checkbox.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxCheckboxComponent), multi: true\\n}","type":"component"}],"selector":"nzx-checkbox","styleUrls":[],"styles":[],"templateUrl":["./checkbox.component.html"],"viewProviders":[],"inputsClass":[{"name":"nzxDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n禁用所有复选框\\n","description":"<p>禁用所有复选框</p>\\n","line":48,"type":"boolean","decorators":[]},{"name":"nzxLayout","defaultValue":"\'horizontal\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n布局方式, 水平/垂直\\n","description":"<p>布局方式, 水平/垂直</p>\\n","line":52,"type":"\\"horizontal\\" | \\"vertical\\"","decorators":[]},{"name":"nzxOptions","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ncheckbox数据源, 根据数据生成 checkbox\\n","description":"<p>checkbox数据源, 根据数据生成 checkbox</p>\\n","line":44,"type":"NzxCheckboxOption<T>[]","decorators":[]}],"outputsClass":[{"name":"nzxBlur","defaultValue":"new EventEmitter<NzxCheckboxOption<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n失去焦点事件\\n","description":"<p>失去焦点事件</p>\\n","line":60,"type":"EventEmitter"},{"name":"nzxFocus","defaultValue":"new EventEmitter<NzxCheckboxOption<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取焦点事件\\n","description":"<p>获取焦点事件</p>\\n","line":56,"type":"EventEmitter"}],"propertiesClass":[{"name":"nzxValue","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"T[]","optional":false,"description":"","line":61},{"name":"nzxDisabled","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":2,"modifierKind":[122],"inheritance":{"file":"BaseControl"}},{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":3,"inheritance":{"file":"BaseControl"}},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":4,"inheritance":{"file":"BaseControl"}}],"methodsClass":[{"name":"ngModelChange","args":[{"name":"values","type":"T[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":76,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"values","type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnChanges","args":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":66,"deprecated":false,"deprecationMessage":""},{"name":"writeValue","args":[{"name":"value","type":"T[] | null","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":82,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"T[] | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"T","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":6,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"T","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}},{"name":"registerOnTouched","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":10,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}},{"name":"setDisabledState","args":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":true,"returnType":"void","typeParameters":[],"line":14,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>增强<code>nz-checkbox</code>组件, 把数据和值分离</p>\\n","rawdescription":"\\n\\n增强`nz-checkbox`组件, 把数据和值分离\\n","type":"component","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  OnChanges,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  SimpleChange,\\r\\n  SimpleChanges,\\r\\n  TemplateRef,\\r\\n  ViewEncapsulation\\r\\n} from \'@angular/core\';\\r\\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\r\\nimport { BaseControl } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NgStyleInterface, NzSafeAny, NgClassType } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\n/**\\r\\n * 增强`nz-checkbox`组件, 把数据和值分离\\r\\n */\\r\\n@Component({\\r\\n  selector: \'nzx-checkbox\',\\r\\n  templateUrl: \'./checkbox.component.html\',\\r\\n  preserveWhitespaces: false,\\r\\n  encapsulation: ViewEncapsulation.None,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NzxCheckboxComponent),\\r\\n      multi: true\\r\\n    }\\r\\n  ]\\r\\n})\\r\\nexport class NzxCheckboxComponent<T = NzSafeAny>\\r\\n  extends BaseControl<T[]>\\r\\n  implements ControlValueAccessor, OnInit, OnChanges\\r\\n{\\r\\n  /**\\r\\n   * checkbox数据源, 根据数据生成 checkbox\\r\\n   */\\r\\n  @Input() nzxOptions: NzxCheckboxOption<T>[] = [];\\r\\n  /**\\r\\n   * 禁用所有复选框\\r\\n   */\\r\\n  @Input() override nzxDisabled = false;\\r\\n  /**\\r\\n   * 布局方式, 水平/垂直\\r\\n   */\\r\\n  @Input() nzxLayout: \'horizontal\' | \'vertical\' = \'horizontal\';\\r\\n  /**\\r\\n   * 获取焦点事件\\r\\n   */\\r\\n  @Output() nzxFocus = new EventEmitter<NzxCheckboxOption<T>>();\\r\\n  /**\\r\\n   * 失去焦点事件\\r\\n   */\\r\\n  @Output() nzxBlur = new EventEmitter<NzxCheckboxOption<T>>();\\r\\n  nzxValue: T[] = [];\\r\\n  constructor(protected cdr: ChangeDetectorRef) {\\r\\n    super();\\r\\n  }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.nzxValue = (this.nzxOptions || []).filter(v => v.checked).map(v => v.value);\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\\r\\n    if (changes.nzxOptions && !changes.nzxOptions.isFirstChange()) {\\r\\n      this.writeValue(this.nzxValue);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  ngModelChange(values: T[]) {\\r\\n    this.nzxValue = values;\\r\\n    this.onTouched();\\r\\n    this.onChange(this.nzxValue);\\r\\n  }\\r\\n\\r\\n  writeValue(value: T[] | null): void {\\r\\n    this.nzxValue = value == null ? [] : Array.isArray(value) ? value : [value];\\r\\n    if (this.nzxOptions && this.nzxOptions.length) {\\r\\n      this.nzxOptions.forEach(v => (v.checked = this.nzxValue.indexOf(v.value) !== -1));\\r\\n    }\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * 数据配置项\\r\\n */\\r\\nexport interface NzxCheckboxOption<T = NzSafeAny> {\\r\\n  /**\\r\\n   *\\r\\n   */\\r\\n  label: string | TemplateRef<NzxCheckboxOption>;\\r\\n  /**\\r\\n   * 值\\r\\n   */\\r\\n  value: T;\\r\\n  /**\\r\\n   * 是否禁用\\r\\n   */\\r\\n  disabled?: boolean;\\r\\n  /**\\r\\n   * 是否隐藏\\r\\n   */\\r\\n  hide?: boolean;\\r\\n  /**\\r\\n   * 是否半选\\r\\n   */\\r\\n  indeterminate?: boolean;\\r\\n  /**\\r\\n   * 值变化的回调函数\\r\\n   * @param checked\\r\\n   */\\r\\n  ngModelChange?: (checked: boolean, item: NzxCheckboxOption) => void;\\r\\n  /**\\r\\n   * 样式\\r\\n   */\\r\\n  ngStyle?: NgStyleInterface;\\r\\n  /**\\r\\n   * class 样式\\r\\n   */\\r\\n  ngClass?: NgClassType;\\r\\n\\r\\n  /**\\r\\n   * 包裹CheckBox样式, 垂直布局有效\\r\\n   */\\r\\n  wrapperNStyle?: NgStyleInterface;\\r\\n  /**\\r\\n   * class 包裹CheckBox样式, 垂直布局有效\\r\\n   */\\r\\n  wrapperNgClass?: NgClassType;\\r\\n\\r\\n  /**\\r\\n   * 额外附加数据\\r\\n   */\\r\\n  [key: string]: NzSafeAny;\\r\\n}\\r\\n\\r\\nexport type OptionItem = Omit<NzxCheckboxOption, \'indeterminate\' | \'ngModelChange\'>;\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","preserveWhitespaces":false,"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":61,"jsdoctags":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":"BaseControl","implements":["ControlValueAccessor","OnInit","OnChanges"],"templateData":"<nz-checkbox-wrapper (nzOnChange)=\\"ngModelChange($event)\\">\\r\\n  <ng-container *ngIf=\\"nzxLayout === \'vertical\'; else horizontalTpl\\">\\r\\n    <div *ngFor=\\"let item of nzxOptions\\" [ngStyle]=\\"item.wrapperNStyle\\" [ngClass]=\\"item.wrapperNgClass\\">\\r\\n      <ng-container *ngTemplateOutlet=\\"labelTpl; context: { $implicit: item }\\"></ng-container>\\r\\n    </div>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-template #horizontalTpl>\\r\\n    <ng-container *ngFor=\\"let item of nzxOptions\\">\\r\\n      <ng-container *ngTemplateOutlet=\\"labelTpl; context: { $implicit: item }\\"></ng-container>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n</nz-checkbox-wrapper>\\r\\n\\r\\n<ng-template #labelTpl let-item>\\r\\n  <label\\r\\n    *ngIf=\\"item.hide !== true\\"\\r\\n    nz-checkbox\\r\\n    [ngStyle]=\\"item.ngStyle\\"\\r\\n    [ngClass]=\\"item.ngClass\\"\\r\\n    (focus)=\\"nzxFocus.emit(item)\\"\\r\\n    (blur)=\\"nzxBlur.emit(item)\\"\\r\\n    [nzValue]=\\"item.value\\"\\r\\n    [ngModel]=\\"item.checked\\"\\r\\n    [nzDisabled]=\\"nzxDisabled || item.disabled\\"\\r\\n    [nzIndeterminate]=\\"item.indeterminate\\"\\r\\n    (ngModelChange)=\\"item.ngModelChange && item.ngModelChange($event, item)\\"\\r\\n  >\\r\\n    <ng-container *nzStringTemplateOutlet=\\"item.label; context: { $implicit: item, options: nzxOptions }\\">\\r\\n      {{ item.label }}\\r\\n    </ng-container>\\r\\n  </label>\\r\\n</ng-template>\\r\\n"},{"name":"NzxColumnSettingComponent","id":"component-NzxColumnSettingComponent-605a1fda612e6348fbf4dadfc46154e73d0498191490d973d2ad2246b9d565282e4f3f2e4f5b0e885181282066b0322054b870dc006ce1dedfac405dd2613820","file":"lib/table/header/column-setting/column-setting.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"nzx-column-setting","styleUrls":[],"styles":[],"templateUrl":["./column-setting.component.html"],"viewProviders":[],"inputsClass":[{"name":"columnNameVisible","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示列名\\n","description":"<p>显示列名</p>\\n","line":39,"type":"boolean | null","decorators":[]},{"name":"dragPreviewClass","defaultValue":"\'nzx-column-setting__drag-preview\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n拖拽预览样式\\n","description":"<p>拖拽预览样式</p>\\n","line":35,"type":"string","decorators":[]},{"name":"nzxColumns","deprecated":false,"deprecationMessage":"","line":41,"type":"NzxColumn[]","decorators":[]}],"outputsClass":[{"name":"columnCheckedChange","defaultValue":"new EventEmitter<NzxColumn<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当个列选中事件\\n","description":"<p>当个列选中事件</p>\\n","line":54,"type":"EventEmitter"},{"name":"columnNameCheckedChange","defaultValue":"new EventEmitter<boolean>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n列名选择Change\\n","description":"<p>列名选择Change</p>\\n","line":62,"type":"EventEmitter"},{"name":"fixedClick","defaultValue":"new EventEmitter<NzxColumn<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n固定列\\n","description":"<p>固定列</p>\\n","line":67,"type":"EventEmitter"},{"name":"sortedColumn","defaultValue":"new EventEmitter<CdkDragDrop<NzxColumn<T>, NzSafeAny>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n排序列触发\\n","description":"<p>排序列触发</p>\\n","line":58,"type":"EventEmitter"}],"propertiesClass":[{"name":"_columnNameChecked","deprecated":false,"deprecationMessage":"","type":"boolean | null","optional":false,"description":"","line":29},{"name":"_indeterminate","deprecated":false,"deprecationMessage":"","type":"boolean | null","optional":false,"description":"","line":30},{"name":"_nzxColumns","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"NzxColumn<T>[]","optional":false,"description":"","line":28}],"methodsClass":[{"name":"cdkDragReleased","args":[{"name":"event","type":"CdkDragRelease","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":114,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n结束拖动\\n","description":"<p>结束拖动</p>\\n","jsdoctags":[{"name":{"pos":2668,"end":2673,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"CdkDragRelease","deprecated":false,"deprecationMessage":"","tagName":{"pos":2662,"end":2667,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"cdkDragStarted","args":[{"name":"event","type":"CdkDragStart","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":105,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开始拖动\\n","description":"<p>开始拖动</p>\\n","jsdoctags":[{"name":{"pos":2396,"end":2401,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"CdkDragStart","deprecated":false,"deprecationMessage":"","tagName":{"pos":2390,"end":2395,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"columnNameChange","args":[{"name":"checked","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":123,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n展示列复选框 checked\\n","description":"<p>展示列复选框 checked</p>\\n","jsdoctags":[{"name":{"pos":2956,"end":2963,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"checked"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":2950,"end":2955,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"columnVisible","args":[{"name":"item","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":""},{"name":"checked","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":73,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"item","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"checked","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"dropColumn","args":[{"name":"event","type":"CdkDragDrop<NzxColumn<T> | NzSafeAny>","deprecated":false,"deprecationMessage":""},{"name":"list","type":"NzxColumn<T>[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":96,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n拖动列排序\\n","description":"<p>拖动列排序</p>\\n","jsdoctags":[{"name":{"pos":2134,"end":2139,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"CdkDragDrop<NzxColumn<T> | NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"pos":2128,"end":2133,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":2153,"end":2157,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"list"},"type":"NzxColumn<T>[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":2147,"end":2152,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>排序数组</p>\\n"}]},{"name":"fixedColumn","args":[{"name":"column","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":""},{"name":"fixed","type":"\\"left\\" | \\"right\\"","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":83,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n固定列\\n","description":"<p>固定列</p>\\n","jsdoctags":[{"name":{"pos":1878,"end":1884,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"column"},"type":"NzxColumn<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":1872,"end":1877,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":1898,"end":1903,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fixed"},"type":"\\"left\\" | \\"right\\"","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1892,"end":1897,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":71,"deprecated":false,"deprecationMessage":""},{"name":"refreshNameCheckedStatus","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":135,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n更新展示列状态\\n","description":"<p>更新展示列状态</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>列设置\\n注意: 只在表头不分组的情况下有效</p>\\n","rawdescription":"\\n\\n列设置\\n注意: 只在表头不分组的情况下有效\\n","type":"component","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  Component,\\r\\n  ElementRef,\\r\\n  EventEmitter,\\r\\n  Input,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  Renderer2,\\r\\n  ViewEncapsulation\\r\\n} from \'@angular/core\';\\r\\nimport { CdkDragDrop, CdkDragRelease, CdkDragStart, moveItemInArray } from \'@angular/cdk/drag-drop\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { NzxColumn } from \'../../table.type\';\\r\\n\\r\\n/**\\r\\n * 列设置\\r\\n * 注意: 只在表头不分组的情况下有效\\r\\n */\\r\\n@Component({\\r\\n  selector: \'nzx-column-setting\',\\r\\n  templateUrl: \'./column-setting.component.html\',\\r\\n  preserveWhitespaces: false,\\r\\n  encapsulation: ViewEncapsulation.None,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush\\r\\n})\\r\\nexport class NzxColumnSettingComponent<T> implements OnInit /*, OnChanges*/ {\\r\\n  _nzxColumns: NzxColumn<T>[] = [];\\r\\n  _columnNameChecked!: boolean | null;\\r\\n  _indeterminate!: boolean | null;\\r\\n\\r\\n  /**\\r\\n   * 拖拽预览样式\\r\\n   */\\r\\n  @Input() dragPreviewClass = \'nzx-column-setting__drag-preview\';\\r\\n  /**\\r\\n   * 显示列名\\r\\n   */\\r\\n  @Input() columnNameVisible: boolean | null = true;\\r\\n\\r\\n  @Input() set nzxColumns(value: NzxColumn<T>[]) {\\r\\n    if (value) {\\r\\n      this._nzxColumns = value;\\r\\n      this.refreshNameCheckedStatus();\\r\\n    }\\r\\n  }\\r\\n  get nzxColumns() {\\r\\n    return this._nzxColumns;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 当个列选中事件\\r\\n   */\\r\\n  @Output() columnCheckedChange = new EventEmitter<NzxColumn<T>>();\\r\\n  /**\\r\\n   * 排序列触发\\r\\n   */\\r\\n  @Output() sortedColumn = new EventEmitter<CdkDragDrop<NzxColumn<T>, NzSafeAny>>();\\r\\n  /**\\r\\n   * 列名选择Change\\r\\n   */\\r\\n  @Output() columnNameCheckedChange = new EventEmitter<boolean>();\\r\\n\\r\\n  /**\\r\\n   * 固定列\\r\\n   */\\r\\n  @Output() fixedClick = new EventEmitter<NzxColumn<T>>();\\r\\n\\r\\n  constructor(protected renderer: Renderer2) {}\\r\\n\\r\\n  ngOnInit(): void {}\\r\\n\\r\\n  columnVisible(item: NzxColumn<T>, checked: boolean) {\\r\\n    this.refreshNameCheckedStatus();\\r\\n    this.columnCheckedChange.emit(item);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 固定列\\r\\n   * @param column\\r\\n   * @param fixed\\r\\n   */\\r\\n  fixedColumn(column: NzxColumn<T>, fixed?: \'left\' | \'right\') {\\r\\n    if (column.fixed === fixed) {\\r\\n      return;\\r\\n    }\\r\\n    column.fixed = fixed;\\r\\n    this.fixedClick.emit(column);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 拖动列排序\\r\\n   * @param event\\r\\n   * @param list 排序数组\\r\\n   */\\r\\n  dropColumn(event: CdkDragDrop<NzxColumn<T>, NzSafeAny>, list: NzxColumn<T>[]) {\\r\\n    moveItemInArray(list, event.previousIndex, event.currentIndex);\\r\\n    this.sortedColumn.emit(event);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 开始拖动\\r\\n   * @param event\\r\\n   */\\r\\n  cdkDragStarted(event: CdkDragStart) {\\r\\n    const preview = new ElementRef<HTMLElement>(document.querySelector(\'.cdk-drag.cdk-drag-preview\')!);\\r\\n    this.renderer.addClass(preview.nativeElement, this.dragPreviewClass);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 结束拖动\\r\\n   * @param event\\r\\n   */\\r\\n  cdkDragReleased(event: CdkDragRelease) {\\r\\n    const preview = new ElementRef<HTMLElement>(document.querySelector(\'.cdk-drag.cdk-drag-preview\')!);\\r\\n    this.renderer.removeClass(preview.nativeElement, this.dragPreviewClass);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 展示列复选框 checked\\r\\n   * @param checked\\r\\n   */\\r\\n  columnNameChange(checked: boolean) {\\r\\n    if (this._nzxColumns && this._nzxColumns.length) {\\r\\n      this._columnNameChecked = checked;\\r\\n      this._indeterminate = false;\\r\\n      this._nzxColumns.filter(v => v.settingVisible != false && v.settingDisabled !== true).forEach(v => (v.visible = checked));\\r\\n      this.columnNameCheckedChange.emit(checked);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 更新展示列状态\\r\\n   */\\r\\n  refreshNameCheckedStatus(): void {\\r\\n    if (this._nzxColumns && this._nzxColumns.length) {\\r\\n      const list = this._nzxColumns.filter(v => v.settingVisible != false && v.settingDisabled !== true);\\r\\n      this._columnNameChecked = list.every(item => item.visible);\\r\\n      this._indeterminate = !this._columnNameChecked && list.some(item => item.visible);\\r\\n    } else {\\r\\n      this._columnNameChecked = false;\\r\\n      this._indeterminate = false;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","preserveWhitespaces":false,"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":""}],"line":67,"jsdoctags":[{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"implements":["OnInit"],"accessors":{"nzxColumns":{"name":"nzxColumns","setSignature":{"name":"nzxColumns","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"value","type":"NzxColumn<T>[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":41,"jsdoctags":[{"name":"value","type":"NzxColumn<T>[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"getSignature":{"name":"nzxColumns","type":"","returnType":"","line":47}}},"templateData":"<i\\r\\n  nz-icon\\r\\n  nzType=\\"setting\\"\\r\\n  nzTheme=\\"outline\\"\\r\\n  tabindex=\\"-1\\"\\r\\n  nz-popover\\r\\n  nzPopoverTrigger=\\"click\\"\\r\\n  nzPopoverOverlayClassName=\\"nzx-column-setting__cloumn-box\\"\\r\\n  [nzPopoverTitle]=\\"titleTemplate\\"\\r\\n  [nzPopoverPlacement]=\\"\'bottomRight\'\\"\\r\\n  [nzPopoverContent]=\\"contentTemplate\\"\\r\\n  nz-tooltip\\r\\n  nzTooltipTitle=\\"列设置\\"\\r\\n></i>\\r\\n\\r\\n<ng-template #titleTemplate>\\r\\n  <div class=\\"nzx-column-setting__popover-title\\">\\r\\n    <div class=\\"nzx-column-setting__flex\\" style=\\"flex: 1\\">\\r\\n      <label\\r\\n        *ngIf=\\"columnNameVisible !== false\\"\\r\\n        nz-checkbox\\r\\n        [(ngModel)]=\\"_columnNameChecked\\"\\r\\n        [nzIndeterminate]=\\"_indeterminate\\"\\r\\n        (ngModelChange)=\\"columnNameChange($event)\\"\\r\\n      >\\r\\n        展示列\\r\\n      </label>\\r\\n    </div>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #contentTemplate>\\r\\n  <ul\\r\\n    style=\\"min-width: 315px\\"\\r\\n    cdkDropList\\r\\n    (cdkDropListDropped)=\\"dropColumn($event, _nzxColumns)\\"\\r\\n    class=\\"nzx-column-setting__column-list\\"\\r\\n  >\\r\\n    <ng-container *ngFor=\\"let item of _nzxColumns\\">\\r\\n      <li\\r\\n        *ngIf=\\"item.settingVisible !== false\\"\\r\\n        class=\\"nzx-column-setting__check-item\\"\\r\\n        cdkDrag\\r\\n        cdkDragLockAxis=\\"y\\"\\r\\n        cdkDragBoundary=\\".nzx-column-setting__column-list\\"\\r\\n        (cdkDragStarted)=\\"cdkDragStarted($event)\\"\\r\\n        (cdkDragReleased)=\\"cdkDragReleased($event)\\"\\r\\n      >\\r\\n        <div class=\\"drag-box\\">\\r\\n          <i cdkDragHandle nz-icon nzType=\\"drag\\" class=\\"nzx-column-setting__drag-icon\\"></i>\\r\\n          <label\\r\\n            nz-checkbox\\r\\n            [nzDisabled]=\\"item.settingDisabled === true\\"\\r\\n            [(ngModel)]=\\"item.visible\\"\\r\\n            (ngModelChange)=\\"columnVisible(item, $event)\\"\\r\\n          >\\r\\n            {{ item.settingText || item.thText }}\\r\\n          </label>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\"nzx-column-setting__flex\\">\\r\\n          <i\\r\\n            nz-icon\\r\\n            nzType=\\"vertical-align-top\\"\\r\\n            class=\\"nzx-column-setting__fixed-left\\"\\r\\n            [class.active]=\\"item.fixed === \'left\'\\"\\r\\n            [class.disabled]=\\"item.visible === false\\"\\r\\n            (click)=\\"fixedColumn(item, item.fixed == \'left\' ? null : \'left\')\\"\\r\\n            nz-tooltip\\r\\n            nzTooltipTitle=\\"固定到左侧\\"\\r\\n          ></i>\\r\\n          <nz-divider nzType=\\"vertical\\"></nz-divider>\\r\\n          <i\\r\\n            nz-icon\\r\\n            nzType=\\"vertical-align-bottom\\"\\r\\n            class=\\"nzx-column-setting__fixed-right\\"\\r\\n            [class.active]=\\"item.fixed === \'right\'\\"\\r\\n            [class.disabled]=\\"item.visible === false\\"\\r\\n            (click)=\\"fixedColumn(item, item.fixed == \'right\' ? null : \'right\')\\"\\r\\n            nz-tooltip\\r\\n            nzTooltipTitle=\\"固定到右侧\\"\\r\\n          ></i>\\r\\n        </div>\\r\\n      </li>\\r\\n    </ng-container>\\r\\n  </ul>\\r\\n</ng-template>\\r\\n"},{"name":"NzxContentComponent","id":"component-NzxContentComponent-2d30b8c700ece150f0c3e1c29d87abf664413e70a09661dbe77ef0da19e8073841b92b7de04893f0d44a21a6cc6b49bd1782d6f06c4ebdeed789379255a75339","file":"lib/layout-page/content.component.ts","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"nzx-content","styleUrls":[],"styles":[],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"formItemBottomVisible","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示验证占位符(是否显示form-item底部的空白)\\n","description":"<p>显示验证占位符(是否显示form-item底部的空白)</p>\\n","line":14,"type":"boolean","decorators":[]},{"name":"margin","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nmargin\\n","description":"<p>margin</p>\\n","line":18,"type":"string","decorators":[]},{"name":"marginTop","defaultValue":"\'10px\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nmargin top\\n","description":"<p>margin top</p>\\n","line":22,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.hide-form-item-bottom","deprecated":false,"deprecationMessage":"","line":24,"type":"boolean","decorators":[]},{"name":"style.margin","deprecated":false,"deprecationMessage":"","line":27,"type":"string","decorators":[]},{"name":"style.margin-top","deprecated":false,"deprecationMessage":"","line":30,"type":"string","decorators":[]}],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, HostBinding, Input, OnInit } from \'@angular/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-content\',\\r\\n  template: \'<ng-content></ng-content>\',\\r\\n  host: {\\r\\n    \'[class.nzx-page-content]\': \'true\'\\r\\n  }\\r\\n})\\r\\nexport class NzxContentComponent {\\r\\n  /**\\r\\n   * 显示验证占位符(是否显示form-item底部的空白)\\r\\n   */\\r\\n  @Input() formItemBottomVisible = true;\\r\\n  /**\\r\\n   * margin\\r\\n   */\\r\\n  @Input() margin?: string;\\r\\n  /**\\r\\n   * margin top\\r\\n   */\\r\\n  @Input() marginTop = \'10px\';\\r\\n\\r\\n  @HostBinding(\'class.hide-form-item-bottom\') get hideFormItemBottom() {\\r\\n    return !this.formItemBottomVisible;\\r\\n  }\\r\\n  @HostBinding(\'style.margin\') get contentMargin() {\\r\\n    return this.margin;\\r\\n  }\\r\\n  @HostBinding(\'style.margin-top\') get contentMarginTop() {\\r\\n    return this.marginTop;\\r\\n  }\\r\\n  constructor() {}\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":32},"accessors":{"hideFormItemBottom":{"name":"hideFormItemBottom","getSignature":{"name":"hideFormItemBottom","type":"","returnType":"","line":24}},"contentMargin":{"name":"contentMargin","getSignature":{"name":"contentMargin","type":"","returnType":"","line":27}},"contentMarginTop":{"name":"contentMarginTop","getSignature":{"name":"contentMarginTop","type":"","returnType":"","line":30}}}},{"name":"NzxHeaderComponent","id":"component-NzxHeaderComponent-96c5c360b8deee299eb6b2cd0a889374e30451376f17f588b78656929509b8d8b4a50eb6a24727f301766200b9c11d38cd4f76b4105d95473ba9bae362c33705","file":"lib/layout-page/header.component.ts","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"nzx-header","styleUrls":[],"styles":[],"template":"<div class=\\"page-header_row\\">\\n  <div class=\\"page-header_col\\">\\n    <ng-content></ng-content>\\n  </div>\\n  <div\\n    #divElement\\n    (cdkObserveContent)=\\"contentChanged(divElement)\\"\\n    [debounce]=\\"200\\"\\n    [class.header-content-wrapper]=\\"hasContent\\"\\n  >\\n    <ng-content select=\\"[buttons]\\"></ng-content>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"buttonsVisible","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示按钮区域\\n","description":"<p>是否显示按钮区域</p>\\n","line":34,"type":"boolean","decorators":[]},{"name":"hasBottom","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示验证占位符(是否显示form-item底部的空白)\\n","description":"<p>显示验证占位符(是否显示form-item底部的空白)</p>\\n","line":30,"type":"boolean","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"hasContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":26}],"methodsClass":[{"name":"contentChanged","args":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":41,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.hide-form-item-bottom","deprecated":false,"deprecationMessage":"","line":35,"type":"boolean","decorators":[]}],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, HostBinding, Input } from \'@angular/core\';\\r\\nimport { isContentEmpty } from \'./is-content-empty\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-header\',\\r\\n  template: `\\r\\n    <div class=\\"page-header_row\\">\\r\\n      <div class=\\"page-header_col\\">\\r\\n        <ng-content></ng-content>\\r\\n      </div>\\r\\n      <div\\r\\n        #divElement\\r\\n        (cdkObserveContent)=\\"contentChanged(divElement)\\"\\r\\n        [debounce]=\\"200\\"\\r\\n        [class.header-content-wrapper]=\\"hasContent\\"\\r\\n      >\\r\\n        <ng-content select=\\"[buttons]\\"></ng-content>\\r\\n      </div>\\r\\n    </div>\\r\\n  `,\\r\\n  host: {\\r\\n    \'[class.nzx-page-header]\': \'true\'\\r\\n  }\\r\\n})\\r\\nexport class NzxHeaderComponent {\\r\\n  hasContent = false;\\r\\n  /**\\r\\n   * 显示验证占位符(是否显示form-item底部的空白)\\r\\n   */\\r\\n  @Input() hasBottom = false;\\r\\n  /**\\r\\n   * 是否显示按钮区域\\r\\n   */\\r\\n  @Input() buttonsVisible = true;\\r\\n  @HostBinding(\'class.hide-form-item-bottom\') get hideFormItemBottom() {\\r\\n    return !this.hasBottom;\\r\\n  }\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  contentChanged(element: HTMLElement) {\\r\\n    this.hasContent = !isContentEmpty(element);\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":37},"accessors":{"hideFormItemBottom":{"name":"hideFormItemBottom","getSignature":{"name":"hideFormItemBottom","type":"","returnType":"","line":35}}}},{"name":"NzxPageComponent","id":"component-NzxPageComponent-ce200884b303c854e63fde16a14b8a42f6d06037b5f3d069dd0451ad6c14506179964d2e0ef0e41571d724a2b693fe4655ecd1e2f83588f1023d0e163b3dd1bd","file":"lib/layout-page/page.component.ts","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"nzx-page","styleUrls":[],"styles":[],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-page\',\\r\\n  template: \'<ng-content></ng-content>\',\\r\\n  host: {\\r\\n    \'[class.nzx-page]\': \'true\'\\r\\n  }\\r\\n})\\r\\nexport class NzxPageComponent {\\r\\n  constructor() {}\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":10}},{"name":"NzxSwitchComponent","id":"component-NzxSwitchComponent-baf8357501fe73d3d3b50142f9e23d77e673ad18575cba5bd2e1933c47de7a815fc5deea0f0047b163f368ccb18779e26c09ba6e11be79d81457fdfb38fc890f","file":"lib/switch/switch.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxSwitchComponent), multi: true\\n}","type":"component"}],"selector":"nzx-switch","styleUrls":[],"styles":[],"template":"<nz-switch\\n  [(ngModel)]=\\"nzxValue\\"\\n  [nzCheckedChildren]=\\"nzCheckedChildren\\"\\n  [nzUnCheckedChildren]=\\"nzUnCheckedChildren\\"\\n  [nzDisabled]=\\"nzDisabled\\"\\n  [nzSize]=\\"nzSize\\"\\n  [nzLoading]=\\"nzLoading\\"\\n  [nzControl]=\\"nzControl\\"\\n  (ngModelChange)=\\"ngModelChange($event)\\"\\n  (click)=\\"onTouched()\\"\\n  (focus)=\\"onTouched()\\"\\n></nz-switch>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"nzCheckedChildren","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n选中时的内容\\n","description":"<p>选中时的内容</p>\\n","line":56,"type":"string | TemplateRef<void>","decorators":[]},{"name":"nzControl","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t是否完全由用户控制状态, Switch 的状态完全由用户接管，不再自动根据点击事件改变数据。\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">是否完全由用户控制状态, Switch 的状态完全由用户接管，不再自动根据点击事件改变数据。</code></pre></div>","line":52,"type":"boolean","decorators":[]},{"name":"nzDisabled","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\tdisable 状态\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">disable 状态</code></pre></div>","line":44,"type":"boolean","decorators":[]},{"name":"nzLoading","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t加载中的开关\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">加载中的开关</code></pre></div>","line":48,"type":"boolean","decorators":[]},{"name":"nzSize","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n开关大小\\n","description":"<p>开关大小</p>\\n","line":64,"type":"NzSizeDSType","decorators":[]},{"name":"nzUnCheckedChildren","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n非选中时的内容\\n","description":"<p>非选中时的内容</p>\\n","line":60,"type":"string | TemplateRef<void>","decorators":[]},{"name":"nzxCheckedValue","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n选中时的值\\n","description":"<p>选中时的值</p>\\n","line":36,"type":"NzSafeAny","decorators":[]},{"name":"nzxUnCheckedValue","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n非选中时的值\\n","description":"<p>非选中时的值</p>\\n","line":40,"type":"NzSafeAny","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"nzxValue","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":32},{"name":"nzxDisabled","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":2,"modifierKind":[122],"inheritance":{"file":"BaseControl"}},{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":3,"inheritance":{"file":"BaseControl"}},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":4,"inheritance":{"file":"BaseControl"}}],"methodsClass":[{"name":"ngModelChange","args":[{"name":"val","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":66,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"deprecated":false,"deprecationMessage":"","modifierKind":[158],"jsdoctags":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}},{"name":"writeValue","args":[{"name":"value","type":"NzSafeAny | null","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"NzSafeAny | null","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"T","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":6,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"T","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}},{"name":"registerOnTouched","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":10,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, forwardRef, Input, TemplateRef } from \'@angular/core\';\\r\\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\r\\nimport { NzSafeAny, NzSizeDSType } from \'ng-zorro-antd/core/types\';\\r\\nimport { BaseControl } from \'@xmagic/nzx-antd/util\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-switch\',\\r\\n  template: `\\r\\n    <nz-switch\\r\\n      [(ngModel)]=\\"nzxValue\\"\\r\\n      [nzCheckedChildren]=\\"nzCheckedChildren\\"\\r\\n      [nzUnCheckedChildren]=\\"nzUnCheckedChildren\\"\\r\\n      [nzDisabled]=\\"nzDisabled\\"\\r\\n      [nzSize]=\\"nzSize\\"\\r\\n      [nzLoading]=\\"nzLoading\\"\\r\\n      [nzControl]=\\"nzControl\\"\\r\\n      (ngModelChange)=\\"ngModelChange($event)\\"\\r\\n      (click)=\\"onTouched()\\"\\r\\n      (focus)=\\"onTouched()\\"\\r\\n    ></nz-switch>\\r\\n  `,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NzxSwitchComponent),\\r\\n      multi: true\\r\\n    }\\r\\n  ]\\r\\n})\\r\\nexport class NzxSwitchComponent extends BaseControl<NzSafeAny> implements ControlValueAccessor {\\r\\n  nzxValue!: boolean;\\r\\n  /**\\r\\n   * 选中时的值\\r\\n   */\\r\\n  @Input() nzxCheckedValue: NzSafeAny = true;\\r\\n  /**\\r\\n   * 非选中时的值\\r\\n   */\\r\\n  @Input() nzxUnCheckedValue: NzSafeAny = false;\\r\\n  /**\\r\\n   * \\tdisable 状态\\r\\n   */\\r\\n  @Input() nzDisabled?: boolean;\\r\\n  /**\\r\\n   * \\t加载中的开关\\r\\n   */\\r\\n  @Input() nzLoading?: boolean;\\r\\n  /**\\r\\n   * \\t是否完全由用户控制状态, Switch 的状态完全由用户接管，不再自动根据点击事件改变数据。\\r\\n   */\\r\\n  @Input() nzControl?: boolean;\\r\\n  /**\\r\\n   * 选中时的内容\\r\\n   */\\r\\n  @Input() nzCheckedChildren?: string | TemplateRef<void>;\\r\\n  /**\\r\\n   * 非选中时的内容\\r\\n   */\\r\\n  @Input() nzUnCheckedChildren?: string | TemplateRef<void>;\\r\\n  /**\\r\\n   * 开关大小\\r\\n   */\\r\\n  @Input() nzSize?: NzSizeDSType;\\r\\n\\r\\n  ngModelChange(val: boolean) {\\r\\n    this.onChange(val ? this.nzxCheckedValue : this.nzxUnCheckedValue);\\r\\n  }\\r\\n\\r\\n  writeValue(value: NzSafeAny | null): void {\\r\\n    this.nzxValue = value === this.nzxCheckedValue;\\r\\n  }\\r\\n\\r\\n  override setDisabledState(isDisabled: boolean): void {\\r\\n    this.nzDisabled = isDisabled;\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":"BaseControl","implements":["ControlValueAccessor"]},{"name":"NzxTableComponent","id":"component-NzxTableComponent-7ca42a220cddd8d82e0b3b3da2a67de672c92b56ddadd4c366fdfa82a75038052f3c76f9460218df441b54cd32e879ac1a878d6d000fa3ea32ef674c72d3587c","file":"lib/table/table.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"nzx-table","styleUrls":[],"styles":[],"templateUrl":["./table.component.html"],"viewProviders":[],"inputsClass":[{"name":"actionVisible","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示操作按钮小图标\\n","description":"<p>是否显示操作按钮小图标</p>\\n","line":314,"type":"boolean","decorators":[]},{"name":"afterFetch","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求之后处理函数\\n","description":"<p>请求之后处理函数</p>\\n","line":126,"type":"function","decorators":[]},{"name":"api","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求处理\\n","description":"<p>请求处理</p>\\n","line":97,"type":"string | Promise<T[]> | Observable<T[]>","decorators":[]},{"name":"beforeFetch","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求之前处理函数\\n","description":"<p>请求之前处理函数</p>\\n","line":122,"type":"function","decorators":[]},{"name":"fetchSetting","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求配置\\n","description":"<p>请求配置</p>\\n","line":131,"type":"FetchSetting","decorators":[]},{"name":"minScrollX","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最小滚动宽度\\n","description":"<p>最小滚动宽度</p>\\n","line":245,"type":"number","decorators":[]},{"name":"minScrollY","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n最小滚动高度\\n","description":"<p>最小滚动高度</p>\\n","line":249,"type":"number","decorators":[]},{"name":"nzBordered","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否展示外边框和列边框\\n","description":"<p>是否展示外边框和列边框</p>\\n","line":289,"type":"boolean","decorators":[]},{"name":"nzData","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表格数据\\n","description":"<p>表格数据</p>\\n","line":229,"type":"","decorators":[]},{"name":"nzFooter","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表格尾部\\n","description":"<p>表格尾部</p>\\n","line":185,"type":"string | TemplateRef<NzSafeAny>","decorators":[]},{"name":"nzFrontPagination","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否在前端对数据进行分页，如果在服务器分页数据或者需要在前端显示全部数据时传入 false\\n","description":"<p>是否在前端对数据进行分页，如果在服务器分页数据或者需要在前端显示全部数据时传入 false</p>\\n","line":265,"type":"boolean","decorators":[]},{"name":"nzHideOnSinglePage","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n只有一页时是否隐藏分页器\\n","description":"<p>只有一页时是否隐藏分页器</p>\\n","line":301,"type":"boolean","decorators":[]},{"name":"nzItemRender","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n用于自定义页码的结构，用法参照 Pagination 组件\\n","description":"<p>用于自定义页码的结构，用法参照 Pagination 组件</p>\\n","line":177,"type":"TemplateRef<PaginationItemRenderContext>","decorators":[]},{"name":"nzLoading","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n页面是否加载中\\n","description":"<p>页面是否加载中</p>\\n","line":277,"type":"boolean","decorators":[]},{"name":"nzLoadingDelay","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n延迟显示加载效果的时间（防止闪烁）\\n","description":"<p>延迟显示加载效果的时间（防止闪烁）</p>\\n","line":209,"type":"number","decorators":[]},{"name":"nzLoadingIndicator","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n加载指示符\\n","description":"<p>加载指示符</p>\\n","line":285,"type":"TemplateRef<NzSafeAny>","decorators":[]},{"name":"nzNoResult","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n无数据时显示内容\\n","description":"<p>无数据时显示内容</p>\\n","line":189,"type":"string | TemplateRef<NzSafeAny>","decorators":[]},{"name":"nzOuterBordered","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示外边框\\n","description":"<p>是否显示外边框</p>\\n","line":281,"type":"boolean","decorators":[]},{"name":"nzPageIndex","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t当前页码，可双向绑定\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">当前页码，可双向绑定</code></pre></div>","line":213,"type":"number","decorators":[]},{"name":"nzPageSize","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n每页展示多少数据，可双向绑定\\n","description":"<p>每页展示多少数据，可双向绑定</p>\\n","line":217,"type":"number","decorators":[]},{"name":"nzPageSizeOptions","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t页数选择器可选值\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">页数选择器可选值</code></pre></div>","line":193,"type":"number[]","decorators":[]},{"name":"nzPaginationPosition","defaultValue":"\'bottom\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n指定分页显示的位置\\n","description":"<p>指定分页显示的位置</p>\\n","line":233,"type":"NzTablePaginationPosition","decorators":[]},{"name":"nzPaginationType","defaultValue":"\'default\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n指定分页显示的尺寸\\n","description":"<p>指定分页显示的尺寸</p>\\n","line":261,"type":"NzTablePaginationType","decorators":[]},{"name":"nzShowPagination","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t是否显示分页器\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">是否显示分页器</code></pre></div>","line":273,"type":"boolean","decorators":[]},{"name":"nzShowQuickJumper","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否可以快速跳转至某页\\n","description":"<p>是否可以快速跳转至某页</p>\\n","line":305,"type":"boolean","decorators":[]},{"name":"nzShowSizeChanger","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否可以改变 nzPageSize\\n","description":"<p>是否可以改变 nzPageSize</p>\\n","line":297,"type":"boolean","decorators":[]},{"name":"nzShowTotal","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n用于显示数据总量和当前数据范围，用法参照 Pagination 组件\\n","description":"<p>用于显示数据总量和当前数据范围，用法参照 Pagination 组件</p>\\n","line":173,"type":"TemplateRef<literal type>","decorators":[]},{"name":"nzSimple","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当添加该属性时，显示为简单分页\\n","description":"<p>当添加该属性时，显示为简单分页</p>\\n","line":309,"type":"boolean","decorators":[]},{"name":"nzSize","defaultValue":"\'small\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表格大小, 正常或迷你类型\\n","description":"<p>表格大小, 正常或迷你类型</p>\\n","line":293,"type":"NzxTableSize","decorators":[]},{"name":"nzTableLayout","defaultValue":"\'auto\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表格布局\\n","description":"<p>表格布局</p>\\n","line":169,"type":"NzTableLayout","decorators":[]},{"name":"nzTemplateMode","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n模板模式，无需将数据传递给 nzData\\n","description":"<p>模板模式，无需将数据传递给 nzData</p>\\n","line":269,"type":"boolean","decorators":[]},{"name":"nzTitle","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表格标题\\n","description":"<p>表格标题</p>\\n","line":181,"type":"string | TemplateRef<NzSafeAny>","decorators":[]},{"name":"nzTotal","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当前总数据，在服务器渲染时需要传入\\n","description":"<p>当前总数据，在服务器渲染时需要传入</p>\\n","line":221,"type":"number","decorators":[]},{"name":"nzVirtualForTrackBy","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n虚拟滚动数据 TrackByFunction 函数\\n","description":"<p>虚拟滚动数据 TrackByFunction 函数</p>\\n","line":331,"type":"TrackByFunction<T>","decorators":[]},{"name":"nzVirtualItemSize","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n虚拟滚动时每一列的高度，与 cdk itemSize 相同\\n","description":"<p>虚拟滚动时每一列的高度，与 cdk itemSize 相同</p>\\n","line":197,"type":"number","decorators":[]},{"name":"nzVirtualMaxBufferPx","defaultValue":"200","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t缓冲区最大像素高度，与 cdk maxBufferPx 相同\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">缓冲区最大像素高度，与 cdk maxBufferPx 相同</code></pre></div>","line":201,"type":"number","decorators":[]},{"name":"nzVirtualMinBufferPx","defaultValue":"100","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n缓冲区最小像素高度，低于该值时将加载新结构，与 cdk minBufferPx 相同\\n","description":"<p>缓冲区最小像素高度，低于该值时将加载新结构，与 cdk minBufferPx 相同</p>\\n","line":205,"type":"number","decorators":[]},{"name":"nzWidthConfig","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表头分组时指定每列宽度，与 th 的 [nzWidth] 不可混用\\n","description":"<p>表头分组时指定每列宽度，与 th 的 [nzWidth] 不可混用</p>\\n","line":225,"type":"ReadonlyArray<string | null>","decorators":[]},{"name":"nzxClickSelectedRow","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n点击行是否选中\\n","description":"<p>点击行是否选中</p>\\n","line":322,"type":"boolean","decorators":[]},{"name":"nzxColumns","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n配置列\\n","description":"<p>配置列</p>\\n","line":140,"type":"NzxColumn<T>[]","decorators":[]},{"name":"nzxDefaultRenderHeader","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n默认渲染表头\\n","description":"<p>默认渲染表头</p>\\n","line":145,"type":"boolean","decorators":[]},{"name":"nzxRefreshVisible","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示刷新按钮\\n","description":"<p>是否显示刷新按钮</p>\\n","line":106,"type":"boolean","decorators":[]},{"name":"nzxResizable","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否能调整列大小\\n","description":"<p>是否能调整列大小</p>\\n","line":165,"type":"boolean","decorators":[]},{"name":"nzxResizeVisible","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示调整表格大小按钮\\n","description":"<p>是否显示调整表格大小按钮</p>\\n","line":110,"type":"boolean","decorators":[]},{"name":"nzxSettingVisible","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示配置列, 只在非合并表头时可用\\n","description":"<p>显示配置列, 只在非合并表头时可用</p>\\n","line":114,"type":"boolean","decorators":[]},{"name":"nzxShowHeader","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示表头\\n","description":"<p>是否显示表头</p>\\n","line":153,"type":"boolean","decorators":[]},{"name":"nzxStripe","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示斑马线\\n","description":"<p>是否显示斑马线</p>\\n","line":118,"type":"boolean","decorators":[]},{"name":"params","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n请求参数\\n","description":"<p>请求参数</p>\\n","line":102,"type":"FetchParams","decorators":[]},{"name":"scrollX","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n横向支持滚动\\n","description":"<p>横向支持滚动</p>\\n","line":237,"type":"string","decorators":[]},{"name":"scrollXFillParent","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自动设置scrollX, 撑满父级容易\\n","description":"<p>自动设置scrollX, 撑满父级容易</p>\\n","line":253,"type":"boolean","decorators":[]},{"name":"scrollY","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n纵向支持滚动\\n","description":"<p>纵向支持滚动</p>\\n","line":241,"type":"string","decorators":[]},{"name":"scrollYFillParent","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自动设置scrollY, 撑满父级容易\\n","description":"<p>自动设置scrollY, 撑满父级容易</p>\\n","line":257,"type":"boolean","decorators":[]},{"name":"sortFn","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n排序函数\\n","description":"<p>排序函数</p>\\n","line":135,"type":"function","decorators":[]},{"name":"title","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n标题\\n","description":"<p>标题</p>\\n","line":149,"type":"string | TemplateRef<void>","decorators":[]},{"name":"toolbar","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n工具栏\\n","description":"<p>工具栏</p>\\n","line":161,"type":"string | TemplateRef<void>","decorators":[]},{"name":"toolbarBefore","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n工具栏-在工具栏之前\\n","description":"<p>工具栏-在工具栏之前</p>\\n","line":157,"type":"string | TemplateRef<void>","decorators":[]},{"name":"toolbarVisible","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示顶部标题\\n","description":"<p>是否显示顶部标题</p>\\n","line":318,"type":"boolean","decorators":[]},{"name":"tplMap","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n由外部传入模板列表\\n","description":"<p>由外部传入模板列表</p>\\n","line":327,"type":"Map<string | TemplateRef<NzSafeAny>>","decorators":[]}],"outputsClass":[{"name":"cellClick","defaultValue":"new EventEmitter<CellEventArg<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n单元格点击事件\\n","description":"<p>单元格点击事件</p>\\n","line":365,"type":"EventEmitter"},{"name":"cellContextmenu","defaultValue":"new EventEmitter<CellEventArg<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n单元格右键菜单事件\\n","description":"<p>单元格右键菜单事件</p>\\n","line":373,"type":"EventEmitter"},{"name":"cellDblclick","defaultValue":"new EventEmitter<CellEventArg<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n单元格双击事件\\n","description":"<p>单元格双击事件</p>\\n","line":369,"type":"EventEmitter"},{"name":"headerClick","defaultValue":"new EventEmitter<HeaderEventArg>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表头单元格事件\\n","description":"<p>表头单元格事件</p>\\n","line":378,"type":"EventEmitter"},{"name":"headerContextmenu","defaultValue":"new EventEmitter<HeaderEventArg>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表头单元格右键菜单事件\\n","description":"<p>表头单元格右键菜单事件</p>\\n","line":386,"type":"EventEmitter"},{"name":"headerDblclick","defaultValue":"new EventEmitter<HeaderEventArg>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表头单元格双击事件\\n","description":"<p>表头单元格双击事件</p>\\n","line":382,"type":"EventEmitter"},{"name":"nzCurrentPageDataChange","defaultValue":"new EventEmitter<readonly T[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当前页面展示数据改变的回调函数\\n","description":"<p>当前页面展示数据改变的回调函数</p>\\n","line":347,"type":"EventEmitter"},{"name":"nzPageIndexChange","defaultValue":"new EventEmitter<number>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n当前页码改变时的回调函数\\n","description":"<p>当前页码改变时的回调函数</p>\\n","line":339,"type":"EventEmitter"},{"name":"nzPageSizeChange","defaultValue":"new EventEmitter<number>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n页数改变时的回调函数\\n","description":"<p>页数改变时的回调函数</p>\\n","line":335,"type":"EventEmitter"},{"name":"nzQueryParams","defaultValue":"new EventEmitter<NzTableQueryParams>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n\\t当服务端分页、筛选、排序时，用于获得参数\\n","description":"<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\">当服务端分页、筛选、排序时，用于获得参数</code></pre></div>","line":343,"type":"EventEmitter"},{"name":"rowClick","defaultValue":"new EventEmitter<RowEventArg<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n数据行点击事件\\n","description":"<p>数据行点击事件</p>\\n","line":352,"type":"EventEmitter"},{"name":"rowContextmenu","defaultValue":"new EventEmitter<RowEventArg<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n数据行右键菜单事件\\n","description":"<p>数据行右键菜单事件</p>\\n","line":360,"type":"EventEmitter"},{"name":"rowDblclick","defaultValue":"new EventEmitter<RowEventArg<T>>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n数据行双击事件\\n","description":"<p>数据行双击事件</p>\\n","line":356,"type":"EventEmitter"}],"propertiesClass":[{"name":"_allColumns","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"NzxColumn<T>[]","optional":false,"description":"","line":89},{"name":"_bodyColumns","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"NzxColumn<T>[]","optional":false,"description":"","line":88},{"name":"_currentPageData","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>当前页数据</p>\\n","line":86,"rawdescription":"\\n\\n当前页数据\\n"},{"name":"_headerColumns","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"NzxColumn[][]","optional":false,"description":"","line":87},{"name":"_selectRow","deprecated":false,"deprecationMessage":"","type":"NzxColumn<T>","optional":true,"description":"<p>当前选中的行</p>\\n","line":82,"rawdescription":"\\n\\n当前选中的行\\n"},{"name":"children","deprecated":false,"deprecationMessage":"","type":"QueryList<NamedTemplate<NzSafeAny>>","optional":false,"description":"","line":388,"decorators":[{"name":"ContentChildren","stringifiedArguments":"NamedTemplate"}]},{"name":"defaultPageSizeOptions","defaultValue":"[10, 15, 20, 30, 40, 50, 100]","deprecated":false,"deprecationMessage":"","type":"[]","optional":false,"description":"","line":92},{"name":"nzTable","deprecated":false,"deprecationMessage":"","type":"NzTableComponent<T>","optional":false,"description":"","line":389,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'basicTable\'"}]},{"name":"resize$","defaultValue":"new Subject<void>()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":390,"modifierKind":[121]},{"name":"sortInfo","deprecated":false,"deprecationMessage":"","type":"SorterResult","optional":true,"description":"","line":91}],"methodsClass":[{"name":"doFetch","args":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":""},{"name":"method","type":"string","deprecated":false,"deprecationMessage":"","optional":true},{"name":"params","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","optional":true},{"name":"data","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"Observable<PageInfo<T>>","typeParameters":[],"line":552,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n执行请求\\n","description":"<p>执行请求</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":12420,"end":12423,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":12414,"end":12419,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":12437,"end":12443,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"method"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":12431,"end":12436,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":12457,"end":12463,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"params"},"type":"NzSafeAny","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":12451,"end":12456,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":12477,"end":12481,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"data"},"type":"NzSafeAny","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":12471,"end":12476,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"fetch","args":[{"name":"reset","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":["T"],"line":493,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n发起请求\\n","description":"<p>发起请求</p>\\n","jsdoctags":[{"name":{"pos":10858,"end":10863,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"reset"},"type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"pos":10852,"end":10857,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否重置</p>\\n"}]},{"name":"fixedClick","args":[{"name":"column","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":465,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n固定列\\n","description":"<p>固定列</p>\\n","jsdoctags":[{"name":{"pos":10265,"end":10271,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"column"},"type":"NzxColumn<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":10259,"end":10264,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"fixXFillParent","args":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":920,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n计算x轴滚动大小\\n","description":"<p>计算x轴滚动大小</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":22222,"end":22229,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"element"},"type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":22216,"end":22221,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":22237,"end":22244,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"fixYFillParent","args":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":936,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n计算y轴滚动大小\\n","description":"<p>计算y轴滚动大小</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":22607,"end":22614,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"element"},"type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":22601,"end":22606,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":22622,"end":22629,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"formatColumnData","args":[{"name":"list","type":"T[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":614,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n格式化数据\\n","description":"<p>格式化数据</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":14324,"end":14328,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"list"},"type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":14318,"end":14323,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":14336,"end":14343,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"getLinkHref","args":[{"name":"btn","type":"literal type","deprecated":false,"deprecationMessage":""},{"name":"row","type":"T","deprecated":false,"deprecationMessage":""},{"name":"data","type":"T[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string | undefined","typeParameters":[],"line":412,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取链接地址\\n","description":"<p>获取链接地址</p>\\n","jsdoctags":[{"name":{"pos":9077,"end":9080,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"btn"},"type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"pos":9071,"end":9076,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>btn配置</p>\\n"},{"name":{"pos":9100,"end":9103,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"row"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":9094,"end":9099,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前行</p>\\n"},{"name":{"pos":9121,"end":9125,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"data"},"type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":9115,"end":9120,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>上下文信息</p>\\n"}]},{"name":"getRowColumns","args":[{"name":"originColumns","type":"NzxColumn<T>[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":855,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n获取合并表头\\n","description":"<p>获取合并表头</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":20684,"end":20697,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"originColumns"},"type":"NzxColumn<T>[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":20678,"end":20683,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>原始列配置</p>\\n"}]},{"name":"isAsync","args":[{"name":"obj","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":670,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否是异步数据\\n","description":"<p>是否是异步数据</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":15758,"end":15761,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"obj"},"type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"pos":15752,"end":15757,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"mergeParams","args":[{"name":"reset","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"},{"name":"fetchSetting","type":"FetchSetting","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Record<string, NzSafeAny>","typeParameters":[],"line":651,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n合并请求参数\\n","description":"<p>合并请求参数</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":15187,"end":15192,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"reset"},"type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"pos":15181,"end":15186,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":15206,"end":15218,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fetchSetting"},"type":"FetchSetting","deprecated":false,"deprecationMessage":"","tagName":{"pos":15200,"end":15205,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":15226,"end":15233,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"ngAfterContentInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":788,"deprecated":false,"deprecationMessage":""},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":793,"deprecated":false,"deprecationMessage":""},{"name":"ngOnChanges","args":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":816,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":845,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":400,"deprecated":false,"deprecationMessage":""},{"name":"normalProps","args":[{"name":"col","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":906,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n规范化属性\\n","description":"<p>规范化属性</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":21959,"end":21962,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"col"},"type":"NzxColumn<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":21953,"end":21958,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>列</p>\\n"}]},{"name":"onCurrentPageDataChange","args":[{"name":"list","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":766,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"list","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onRefreshClick","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":449,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n点击刷新按钮\\n","description":"<p>点击刷新按钮</p>\\n"},{"name":"onResize","args":[{"type":"NzResizeEvent","deprecated":false,"deprecationMessage":""},{"name":"col","type":"NzxColumn","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":423,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"NzResizeEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"col","type":"NzxColumn","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onRowClick","args":[{"name":"info","type":"RowEventArg<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":537,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n行点击事件\\n","description":"<p>行点击事件</p>\\n","jsdoctags":[{"name":{"pos":12212,"end":12216,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"info"},"type":"RowEventArg<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":12206,"end":12211,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"refresh","args":[{"name":"reset","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":457,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n刷新\\n","description":"<p>刷新</p>\\n","jsdoctags":[{"name":{"pos":10164,"end":10169,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"reset"},"type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"pos":10158,"end":10163,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"refreshCheckedStatus","args":[{"name":"col","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":777,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"col","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"resolveColumns","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":678,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n处理表头合并单元格和 body的列\\n","description":"<p>处理表头合并单元格和 body的列</p>\\n","modifierKind":[122],"jsdoctags":[]},{"name":"resolveTemplateColumn","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":690,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n处理参数为模板的参数, 从字符串中找到真正的模板对象\\n","description":"<p>处理参数为模板的参数, 从字符串中找到真正的模板对象</p>\\n","modifierKind":[122],"jsdoctags":[]},{"name":"setFetchResult","args":[{"name":"res","type":"Record<string | NzSafeAny> | T[]","deprecated":false,"deprecationMessage":""},{"name":"fetchSetting","type":"FetchSetting","deprecated":false,"deprecationMessage":""},{"name":"reset","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":571,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n处理请求结果\\n","description":"<p>处理请求结果</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":12991,"end":12994,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"res"},"type":"Record<string | NzSafeAny> | T[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":12985,"end":12990,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":13008,"end":13020,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fetchSetting"},"type":"FetchSetting","deprecated":false,"deprecationMessage":"","tagName":{"pos":13002,"end":13007,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":13034,"end":13039,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"reset"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":13028,"end":13033,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":13047,"end":13054,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"setPageInfo","args":[{"name":"pageInfo","type":"PageInfo<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":600,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n设置分页信息\\n","description":"<p>设置分页信息</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":13988,"end":13996,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"pageInfo"},"type":"PageInfo<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":13982,"end":13987,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":14004,"end":14011,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"sortedColumn","args":[{"name":"event","type":"CdkDragDrop<NzxColumn<T> | NzSafeAny>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":841,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n拖拽排序\\n","description":"<p>拖拽排序</p>\\n","jsdoctags":[{"name":{"pos":20393,"end":20398,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"CdkDragDrop<NzxColumn<T> | NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"pos":20387,"end":20392,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"sortOrderChange","args":[{"name":"value","type":"NzTableSortOrder","deprecated":false,"deprecationMessage":""},{"name":"col","type":"NzxColumn","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":475,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n排序\\n","description":"<p>排序</p>\\n","jsdoctags":[{"name":{"pos":10481,"end":10486,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"NzTableSortOrder","deprecated":false,"deprecationMessage":"","tagName":{"pos":10475,"end":10480,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":10500,"end":10503,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"col"},"type":"NzxColumn","deprecated":false,"deprecationMessage":"","tagName":{"pos":10494,"end":10499,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"stringToTemplate","args":[{"name":"col","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":""},{"name":"key","type":"","deprecated":false,"deprecationMessage":""},{"name":"nameTemplateMap","type":"Record<string | TemplateRef<NzSafeAny>>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":715,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n字符串查找对应的模版\\n","description":"<p>字符串查找对应的模版</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":16929,"end":16932,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"col"},"type":"NzxColumn<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":16923,"end":16928,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":16946,"end":16949,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"","deprecated":false,"deprecationMessage":"","tagName":{"pos":16940,"end":16945,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":16963,"end":16978,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"nameTemplateMap"},"type":"Record<string | TemplateRef<NzSafeAny>>","deprecated":false,"deprecationMessage":"","tagName":{"pos":16957,"end":16962,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"tableSizeChange","args":[{"name":"size","type":"NzxTableSize","deprecated":false,"deprecationMessage":""},{"name":"table","type":"NzTableComponent<NzSafeAny>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":432,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n切换表格大小, 增加mini 类型\\n","description":"<p>切换表格大小, 增加mini 类型</p>\\n","jsdoctags":[{"name":{"pos":9560,"end":9564,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"size"},"type":"NzxTableSize","deprecated":false,"deprecationMessage":"","tagName":{"pos":9554,"end":9559,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>表格大小</p>\\n"},{"name":{"pos":9583,"end":9588,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"table"},"type":"NzTableComponent<NzSafeAny>","deprecated":false,"deprecationMessage":"","tagName":{"pos":9577,"end":9582,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>nz表格组件</p>\\n"}]},{"name":"tdCheckedChange","args":[{"name":"evt","type":"boolean","deprecated":false,"deprecationMessage":""},{"name":"col","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":""},{"name":"row","type":"T","deprecated":false,"deprecationMessage":""},{"name":"rowIndex","type":"IndexAttr","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":756,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ntd触发CheckBox change\\n","description":"<p>td触发CheckBox change</p>\\n","jsdoctags":[{"name":{"pos":17924,"end":17927,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"evt"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":17918,"end":17923,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":17941,"end":17944,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"col"},"type":"NzxColumn<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":17935,"end":17940,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":17958,"end":17961,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"row"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":17952,"end":17957,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":17975,"end":17983,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"rowIndex"},"type":"IndexAttr","deprecated":false,"deprecationMessage":"","tagName":{"pos":17969,"end":17974,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"thCheckedChange","args":[{"name":"evt","type":"boolean","deprecated":false,"deprecationMessage":""},{"name":"col","type":"NzxColumn<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":736,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n表头触发CheckBox change\\n","description":"<p>表头触发CheckBox change</p>\\n","jsdoctags":[{"name":{"pos":17468,"end":17471,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"evt"},"type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"pos":17462,"end":17467,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":17485,"end":17488,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"col"},"type":"NzxColumn<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":17479,"end":17484,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>基于nz-table二次封装的表格组件</p>\\n<h2 id=\\"特性\\">特性</h2>\\n<ul>\\n<li>配置加载数据: <code>api: string | Promise&lt;T[]&gt; | Observable&lt;T[]&gt;</code></li>\\n<li>支持列的配置: <code>nzxColumns: NzxColumn&lt;T&gt;[]</code></li>\\n<li>列支持排序配置</li>\\n<li>默认支持显示拖动列, 调整列顺序</li>\\n<li>支持配置显示序号、复选框</li>\\n<li>自定义渲染内容， template使用名称即可引用成功</li>\\n<li>支持请求/响应信息配置, <code>fetchSetting?: FetchSetting</code></li>\\n<li>支持异步格式化列数据</li>\\n</ul>\\n","rawdescription":"\\n\\n基于nz-table二次封装的表格组件\\n## 特性\\n- 配置加载数据: `api: string | Promise<T[]> | Observable<T[]>`\\n- 支持列的配置: `nzxColumns: NzxColumn<T>[]`\\n- 列支持排序配置\\n- 默认支持显示拖动列, 调整列顺序\\n- 支持配置显示序号、复选框\\n- 自定义渲染内容， template使用名称即可引用成功\\n- 支持请求/响应信息配置, `fetchSetting?: FetchSetting`\\n- 支持异步格式化列数据\\n","type":"component","sourceCode":"import {\\r\\n  AfterContentInit,\\r\\n  AfterViewInit,\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  ContentChildren,\\r\\n  ElementRef,\\r\\n  EventEmitter,\\r\\n  Input,\\r\\n  OnChanges,\\r\\n  OnDestroy,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  QueryList,\\r\\n  Renderer2,\\r\\n  SimpleChange,\\r\\n  SimpleChanges,\\r\\n  TemplateRef,\\r\\n  TrackByFunction,\\r\\n  ViewChild,\\r\\n  ViewEncapsulation\\r\\n} from \'@angular/core\';\\r\\nimport {\\r\\n  NzTableComponent,\\r\\n  NzTableLayout,\\r\\n  NzTablePaginationPosition,\\r\\n  NzTablePaginationType,\\r\\n  NzTableQueryParams,\\r\\n  NzTableSortOrder\\r\\n} from \'ng-zorro-antd/table\';\\r\\nimport { PaginationItemRenderContext } from \'ng-zorro-antd/pagination\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\nimport { CdkDragDrop, moveItemInArray } from \'@angular/cdk/drag-drop\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NzResizeEvent } from \'ng-zorro-antd/resizable\';\\r\\nimport {\\r\\n  CellEventArg,\\r\\n  FetchSetting,\\r\\n  HeaderEventArg,\\r\\n  IndexAttr,\\r\\n  NzxColumn,\\r\\n  NzxTableSize,\\r\\n  PageInfo,\\r\\n  RowEventArg,\\r\\n  SorterResult\\r\\n} from \'./table.type\';\\r\\nimport { FETCH_SETTING } from \'./const\';\\r\\nimport { debounceTime, fromEvent, Observable, Subject, takeUntil } from \'rxjs\';\\r\\nimport { switchMap } from \'rxjs/operators\';\\r\\nimport { HttpClient } from \'@angular/common/http\';\\r\\nimport { NzxAntdService } from \'@xmagic/nzx-antd\';\\r\\nimport { FetcherService, FetchParams } from \'@xmagic/nzx-antd/service\';\\r\\nimport { NamedTemplate } from \'@xmagic/nzx-antd/directive\';\\r\\n\\r\\n/**\\r\\n * 基于nz-table二次封装的表格组件\\r\\n * ## 特性\\r\\n * - 配置加载数据: `api: string | Promise<T[]> | Observable<T[]>`\\r\\n * - 支持列的配置: `nzxColumns: NzxColumn<T>[]`\\r\\n * - 列支持排序配置\\r\\n * - 默认支持显示拖动列, 调整列顺序\\r\\n * - 支持配置显示序号、复选框\\r\\n * - 自定义渲染内容， template使用名称即可引用成功\\r\\n * - 支持请求/响应信息配置, `fetchSetting?: FetchSetting`\\r\\n * - 支持异步格式化列数据\\r\\n */\\r\\n@Component({\\r\\n  selector: \'nzx-table\',\\r\\n  templateUrl: \'./table.component.html\',\\r\\n  preserveWhitespaces: false,\\r\\n  encapsulation: ViewEncapsulation.None,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  host: { \'[class.nzx-table]\': \'true\' }\\r\\n})\\r\\nexport class NzxTableComponent<T extends Record<string, NzSafeAny> = NzSafeAny>\\r\\n  implements OnInit, AfterContentInit, AfterViewInit, OnChanges, OnDestroy\\r\\n{\\r\\n  /**\\r\\n   * 当前选中的行\\r\\n   */\\r\\n  _selectRow?: NzxColumn<T>;\\r\\n  /**\\r\\n   * 当前页数据\\r\\n   */\\r\\n  _currentPageData: readonly T[] = [];\\r\\n  _headerColumns: NzxColumn<T>[][] = [];\\r\\n  _bodyColumns: NzxColumn<T>[] = [];\\r\\n  _allColumns: NzxColumn<T>[] = [];\\r\\n\\r\\n  sortInfo?: SorterResult;\\r\\n  defaultPageSizeOptions = [10, 15, 20, 30, 40, 50, 100];\\r\\n\\r\\n  /**\\r\\n   * 请求处理\\r\\n   */\\r\\n  @Input() api!: string | Promise<T[]> | Observable<T[]>;\\r\\n\\r\\n  /**\\r\\n   * 请求参数\\r\\n   */\\r\\n  @Input() params?: FetchParams;\\r\\n  /**\\r\\n   * 是否显示刷新按钮\\r\\n   */\\r\\n  @Input() nzxRefreshVisible = true;\\r\\n  /**\\r\\n   * 是否显示调整表格大小按钮\\r\\n   */\\r\\n  @Input() nzxResizeVisible = true;\\r\\n  /**\\r\\n   * 显示配置列, 只在非合并表头时可用\\r\\n   */\\r\\n  @Input() nzxSettingVisible = true;\\r\\n  /**\\r\\n   * 是否显示斑马线\\r\\n   */\\r\\n  @Input() nzxStripe = true;\\r\\n  /**\\r\\n   * 请求之前处理函数\\r\\n   */\\r\\n  @Input() beforeFetch?: (params: Record<string, NzSafeAny>) => Record<string, NzSafeAny> | Promise<NzSafeAny>;\\r\\n  /**\\r\\n   * 请求之后处理函数\\r\\n   */\\r\\n  @Input() afterFetch?: (res: NzSafeAny, pageIndex: number) => PageInfo<T> | Promise<PageInfo<T>>;\\r\\n\\r\\n  /**\\r\\n   * 请求配置\\r\\n   */\\r\\n  @Input() fetchSetting?: FetchSetting;\\r\\n  /**\\r\\n   * 排序函数\\r\\n   */\\r\\n  @Input() sortFn!: (data: SorterResult) => SorterResult;\\r\\n\\r\\n  /**\\r\\n   * 配置列\\r\\n   */\\r\\n  @Input() nzxColumns: NzxColumn<T>[] = [];\\r\\n\\r\\n  /**\\r\\n   * 默认渲染表头\\r\\n   */\\r\\n  @Input() nzxDefaultRenderHeader = true;\\r\\n  /**\\r\\n   * 标题\\r\\n   */\\r\\n  @Input() title?: string | TemplateRef<void>;\\r\\n  /**\\r\\n   * 是否显示表头\\r\\n   */\\r\\n  @Input() nzxShowHeader?: boolean;\\r\\n  /**\\r\\n   * 工具栏-在工具栏之前\\r\\n   */\\r\\n  @Input() toolbarBefore?: string | TemplateRef<void>;\\r\\n  /**\\r\\n   * 工具栏\\r\\n   */\\r\\n  @Input() toolbar?: string | TemplateRef<void>;\\r\\n  /**\\r\\n   * 是否能调整列大小\\r\\n   */\\r\\n  @Input() nzxResizable = true;\\r\\n  /**\\r\\n   * 表格布局\\r\\n   */\\r\\n  @Input() nzTableLayout: NzTableLayout = \'auto\';\\r\\n  /**\\r\\n   * 用于显示数据总量和当前数据范围，用法参照 Pagination 组件\\r\\n   */\\r\\n  @Input() nzShowTotal?: TemplateRef<{ $implicit: number; range: [number, number] }>;\\r\\n  /**\\r\\n   * 用于自定义页码的结构，用法参照 Pagination 组件\\r\\n   */\\r\\n  @Input() nzItemRender?: TemplateRef<PaginationItemRenderContext>;\\r\\n  /**\\r\\n   * 表格标题\\r\\n   */\\r\\n  @Input() nzTitle?: string | TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * 表格尾部\\r\\n   */\\r\\n  @Input() nzFooter?: string | TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * 无数据时显示内容\\r\\n   */\\r\\n  @Input() nzNoResult?: string | TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * \\t页数选择器可选值\\r\\n   */\\r\\n  @Input() nzPageSizeOptions?: number[];\\r\\n  /**\\r\\n   * 虚拟滚动时每一列的高度，与 cdk itemSize 相同\\r\\n   */\\r\\n  @Input() nzVirtualItemSize = 0;\\r\\n  /**\\r\\n   * \\t缓冲区最大像素高度，与 cdk maxBufferPx 相同\\r\\n   */\\r\\n  @Input() nzVirtualMaxBufferPx = 200;\\r\\n  /**\\r\\n   * 缓冲区最小像素高度，低于该值时将加载新结构，与 cdk minBufferPx 相同\\r\\n   */\\r\\n  @Input() nzVirtualMinBufferPx = 100;\\r\\n  /**\\r\\n   * 延迟显示加载效果的时间（防止闪烁）\\r\\n   */\\r\\n  @Input() nzLoadingDelay = 0;\\r\\n  /**\\r\\n   * \\t当前页码，可双向绑定\\r\\n   */\\r\\n  @Input() nzPageIndex = 1;\\r\\n  /**\\r\\n   * 每页展示多少数据，可双向绑定\\r\\n   */\\r\\n  @Input() nzPageSize?: number;\\r\\n  /**\\r\\n   * 当前总数据，在服务器渲染时需要传入\\r\\n   */\\r\\n  @Input() nzTotal = 0;\\r\\n  /**\\r\\n   * 表头分组时指定每列宽度，与 th 的 [nzWidth] 不可混用\\r\\n   */\\r\\n  @Input() nzWidthConfig: ReadonlyArray<string | null> = [];\\r\\n  /**\\r\\n   * 表格数据\\r\\n   */\\r\\n  @Input() nzData: readonly T[] = [];\\r\\n  /**\\r\\n   * 指定分页显示的位置\\r\\n   */\\r\\n  @Input() nzPaginationPosition: NzTablePaginationPosition = \'bottom\';\\r\\n  /**\\r\\n   * 横向支持滚动\\r\\n   */\\r\\n  @Input() scrollX?: string;\\r\\n  /**\\r\\n   * 纵向支持滚动\\r\\n   */\\r\\n  @Input() scrollY?: string;\\r\\n  /**\\r\\n   * 最小滚动宽度\\r\\n   */\\r\\n  @Input() minScrollX?: number;\\r\\n  /**\\r\\n   * 最小滚动高度\\r\\n   */\\r\\n  @Input() minScrollY?: number;\\r\\n  /**\\r\\n   * 自动设置scrollX, 撑满父级容易\\r\\n   */\\r\\n  @Input() scrollXFillParent?: boolean;\\r\\n  /**\\r\\n   * 自动设置scrollY, 撑满父级容易\\r\\n   */\\r\\n  @Input() scrollYFillParent?: boolean;\\r\\n  /**\\r\\n   * 指定分页显示的尺寸\\r\\n   */\\r\\n  @Input() nzPaginationType: NzTablePaginationType = \'default\';\\r\\n  /**\\r\\n   * 是否在前端对数据进行分页，如果在服务器分页数据或者需要在前端显示全部数据时传入 false\\r\\n   */\\r\\n  @Input() nzFrontPagination = false;\\r\\n  /**\\r\\n   * 模板模式，无需将数据传递给 nzData\\r\\n   */\\r\\n  @Input() nzTemplateMode = false;\\r\\n  /**\\r\\n   * \\t是否显示分页器\\r\\n   */\\r\\n  @Input() nzShowPagination = true;\\r\\n  /**\\r\\n   * 页面是否加载中\\r\\n   */\\r\\n  @Input() nzLoading = false;\\r\\n  /**\\r\\n   * 是否显示外边框\\r\\n   */\\r\\n  @Input() nzOuterBordered = false;\\r\\n  /**\\r\\n   * 加载指示符\\r\\n   */\\r\\n  @Input() nzLoadingIndicator?: TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * 是否展示外边框和列边框\\r\\n   */\\r\\n  @Input() nzBordered = false;\\r\\n  /**\\r\\n   * 表格大小, 正常或迷你类型\\r\\n   */\\r\\n  @Input() nzSize: NzxTableSize = \'small\';\\r\\n  /**\\r\\n   * 是否可以改变 nzPageSize\\r\\n   */\\r\\n  @Input() nzShowSizeChanger = true;\\r\\n  /**\\r\\n   * 只有一页时是否隐藏分页器\\r\\n   */\\r\\n  @Input() nzHideOnSinglePage = false;\\r\\n  /**\\r\\n   * 是否可以快速跳转至某页\\r\\n   */\\r\\n  @Input() nzShowQuickJumper = true;\\r\\n  /**\\r\\n   * 当添加该属性时，显示为简单分页\\r\\n   */\\r\\n  @Input() nzSimple = false;\\r\\n\\r\\n  /**\\r\\n   * 是否显示操作按钮小图标\\r\\n   */\\r\\n  @Input() actionVisible?: boolean;\\r\\n  /**\\r\\n   * 是否显示顶部标题\\r\\n   */\\r\\n  @Input() toolbarVisible?: boolean;\\r\\n  /**\\r\\n   * 点击行是否选中\\r\\n   */\\r\\n  @Input() nzxClickSelectedRow?: boolean;\\r\\n\\r\\n  /**\\r\\n   * 由外部传入模板列表\\r\\n   */\\r\\n  @Input() tplMap?: Map<string, TemplateRef<NzSafeAny>>;\\r\\n  /**\\r\\n   * 虚拟滚动数据 TrackByFunction 函数\\r\\n   */\\r\\n  @Input() nzVirtualForTrackBy?: TrackByFunction<T>;\\r\\n  /**\\r\\n   * 页数改变时的回调函数\\r\\n   */\\r\\n  @Output() readonly nzPageSizeChange = new EventEmitter<number>();\\r\\n  /**\\r\\n   * 当前页码改变时的回调函数\\r\\n   */\\r\\n  @Output() readonly nzPageIndexChange = new EventEmitter<number>();\\r\\n  /**\\r\\n   * \\t当服务端分页、筛选、排序时，用于获得参数\\r\\n   */\\r\\n  @Output() readonly nzQueryParams = new EventEmitter<NzTableQueryParams>();\\r\\n  /**\\r\\n   * 当前页面展示数据改变的回调函数\\r\\n   */\\r\\n  @Output() readonly nzCurrentPageDataChange = new EventEmitter<readonly T[]>();\\r\\n\\r\\n  /**\\r\\n   * 数据行点击事件\\r\\n   */\\r\\n  @Output() readonly rowClick = new EventEmitter<RowEventArg<T>>();\\r\\n  /**\\r\\n   * 数据行双击事件\\r\\n   */\\r\\n  @Output() readonly rowDblclick = new EventEmitter<RowEventArg<T>>();\\r\\n  /**\\r\\n   * 数据行右键菜单事件\\r\\n   */\\r\\n  @Output() readonly rowContextmenu = new EventEmitter<RowEventArg<T>>();\\r\\n\\r\\n  /**\\r\\n   * 单元格点击事件\\r\\n   */\\r\\n  @Output() readonly cellClick = new EventEmitter<CellEventArg<T>>();\\r\\n  /**\\r\\n   * 单元格双击事件\\r\\n   */\\r\\n  @Output() readonly cellDblclick = new EventEmitter<CellEventArg<T>>();\\r\\n  /**\\r\\n   * 单元格右键菜单事件\\r\\n   */\\r\\n  @Output() readonly cellContextmenu = new EventEmitter<CellEventArg<T>>();\\r\\n\\r\\n  /**\\r\\n   * 表头单元格事件\\r\\n   */\\r\\n  @Output() readonly headerClick = new EventEmitter<HeaderEventArg>();\\r\\n  /**\\r\\n   * 表头单元格双击事件\\r\\n   */\\r\\n  @Output() readonly headerDblclick = new EventEmitter<HeaderEventArg>();\\r\\n  /**\\r\\n   * 表头单元格右键菜单事件\\r\\n   */\\r\\n  @Output() readonly headerContextmenu = new EventEmitter<HeaderEventArg>();\\r\\n\\r\\n  @ContentChildren(NamedTemplate) children!: QueryList<NamedTemplate<NzSafeAny>>;\\r\\n  @ViewChild(\'basicTable\') nzTable!: NzTableComponent<T>;\\r\\n  private resize$ = new Subject<void>();\\r\\n\\r\\n  constructor(\\r\\n    protected cdr: ChangeDetectorRef,\\r\\n    protected render: Renderer2,\\r\\n    protected http: HttpClient,\\r\\n    protected elementRef: ElementRef<HTMLDivElement>,\\r\\n    private antdService: NzxAntdService\\r\\n  ) {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.nzPageSize = this.nzPageSize || this.antdService.table?.nzPageSize || 10;\\r\\n    this.resolveColumns();\\r\\n    this.fetch();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取链接地址\\r\\n   * @param btn btn配置\\r\\n   * @param row 当前行\\r\\n   * @param data 上下文信息\\r\\n   */\\r\\n  getLinkHref(btn: { href: string | ((row: T, data: T[]) => string) }, row: T, data: T[]): string | undefined {\\r\\n    if (!btn.href) {\\r\\n      return undefined;\\r\\n    }\\r\\n    if (typeof btn.href === \'string\') {\\r\\n      return btn.href;\\r\\n    }\\r\\n\\r\\n    return btn.href(row, data);\\r\\n  }\\r\\n\\r\\n  onResize({ width }: NzResizeEvent, col: NzxColumn) {\\r\\n    col.nzWidth = width + \'px\';\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 切换表格大小, 增加mini 类型\\r\\n   * @param size 表格大小\\r\\n   * @param table nz表格组件\\r\\n   */\\r\\n  tableSizeChange(size: NzxTableSize, table: NzTableComponent<NzSafeAny>) {\\r\\n    this.nzSize = size;\\r\\n    // @ts-ignore\\r\\n    const tableMainElement = table.elementRef.nativeElement.querySelector(\'.ant-table\');\\r\\n    if (!tableMainElement) {\\r\\n      return;\\r\\n    }\\r\\n    if (size === \'mini\') {\\r\\n      this.render.addClass(tableMainElement, \'ant-table-mini\');\\r\\n    } else {\\r\\n      this.render.removeClass(tableMainElement, \'ant-table-mini\');\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 点击刷新按钮\\r\\n   */\\r\\n  onRefreshClick() {\\r\\n    this.fetch(false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 刷新\\r\\n   * @param reset\\r\\n   */\\r\\n  refresh(reset = true) {\\r\\n    this.fetch(reset);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 固定列\\r\\n   * @param column\\r\\n   */\\r\\n  fixedClick(column: NzxColumn<T>) {\\r\\n    const hasFixed = this._allColumns.filter(value => value.fixed).length;\\r\\n    this.scrollX = hasFixed ? \'100vw\' : undefined;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 排序\\r\\n   * @param value\\r\\n   * @param col\\r\\n   */\\r\\n  sortOrderChange(value: NzTableSortOrder, col: NzxColumn) {\\r\\n    if (col.nzSortOrderChange) {\\r\\n      col.nzSortOrderChange(value, col);\\r\\n    }\\r\\n\\r\\n    const key = col.nzColumnKey! || col.name!;\\r\\n    this.sortInfo = {\\r\\n      column: col,\\r\\n      order: value,\\r\\n      field: key\\r\\n    };\\r\\n    this.fetch(false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 发起请求\\r\\n   * @param reset 是否重置\\r\\n   */\\r\\n  fetch<T>(reset = true): void {\\r\\n    if (!this.api) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const fetchSetting = Object.assign({}, FETCH_SETTING, this.antdService.table, this.fetchSetting);\\r\\n    const setResult: (value: Record<string, NzSafeAny> | T[]) => void = res =>\\r\\n      this.setFetchResult(res, fetchSetting, reset);\\r\\n    if (NzxUtils.isString(this.api)) {\\r\\n      FetcherService.resolveParams(this.params)\\r\\n        .pipe(\\r\\n          switchMap(_params => {\\r\\n            const commonParams = this.mergeParams(reset, fetchSetting);\\r\\n            const data = Object.assign({}, _params, commonParams);\\r\\n            if (!this.beforeFetch) {\\r\\n              return this.doFetch(this.api as string, fetchSetting.method, commonParams, data);\\r\\n            }\\r\\n\\r\\n            return FetcherService.resolveParams(this.beforeFetch(data)).pipe(_data =>\\r\\n              this.doFetch(this.api as string, fetchSetting.method, commonParams, _data)\\r\\n            );\\r\\n          })\\r\\n        )\\r\\n        .subscribe(setResult);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (NzxUtils.isObservable(this.api)) {\\r\\n      (this.api as Observable<T[]>).subscribe(setResult);\\r\\n      return;\\r\\n    }\\r\\n    if (NzxUtils.isPromise(this.api)) {\\r\\n      (this.api as Promise<T[]>).then(setResult);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    setResult([]);\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 行点击事件\\r\\n   * @param info\\r\\n   */\\r\\n  onRowClick(info: RowEventArg<T>) {\\r\\n    this.rowClick.emit(info);\\r\\n    if (this.nzxClickSelectedRow !== false) {\\r\\n      this._selectRow = info.row;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 执行请求\\r\\n   * @param url\\r\\n   * @param method\\r\\n   * @param params\\r\\n   * @param data\\r\\n   * @protected\\r\\n   */\\r\\n  protected doFetch(url: string, method?: string, params?: NzSafeAny, data?: NzSafeAny): Observable<PageInfo<T>> {\\r\\n    const option: { params?: NzSafeAny; body?: NzSafeAny } = {};\\r\\n    method ||= \'post\';\\r\\n    if (/^post|put$/i.test(method)) {\\r\\n      option.params = params;\\r\\n      option.body = data;\\r\\n    } else {\\r\\n      option.params = Object.assign({}, data, params);\\r\\n    }\\r\\n    return this.http.request<PageInfo<T>>(method, url, option);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 处理请求结果\\r\\n   * @param res\\r\\n   * @param fetchSetting\\r\\n   * @param reset\\r\\n   * @private\\r\\n   */\\r\\n  private setFetchResult(res: Record<string, NzSafeAny> | T[], fetchSetting: FetchSetting, reset: boolean): void {\\r\\n    let result: PageInfo<T> = { total: 0, list: [] };\\r\\n    if (this.afterFetch && NzxUtils.isFunction(this.afterFetch)) {\\r\\n      const data = this.afterFetch(res, this.nzPageIndex);\\r\\n      if (NzxUtils.isPromise(data)) {\\r\\n        data.then(v => this.setPageInfo(v));\\r\\n        return;\\r\\n      }\\r\\n      result = data as PageInfo<T>;\\r\\n    } else {\\r\\n      if (Array.isArray(res)) {\\r\\n        result.list = res;\\r\\n        result.total = res.length;\\r\\n      } else {\\r\\n        result.list = NzxUtils.get(res, fetchSetting.listField);\\r\\n        result.total = NzxUtils.get(res, fetchSetting.totalField);\\r\\n        result.pageIndex = reset ? 1 : NzxUtils.get(res, fetchSetting.pageIndexField);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    this.formatColumnData(result.list);\\r\\n    this.setPageInfo(result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 设置分页信息\\r\\n   * @param pageInfo\\r\\n   * @private\\r\\n   */\\r\\n  private setPageInfo(pageInfo: PageInfo<T>): void {\\r\\n    this.nzData = pageInfo.list || ([] as T[]);\\r\\n    this.nzTotal = pageInfo.total || 0;\\r\\n    if (pageInfo.pageIndex != null) {\\r\\n      this.nzPageIndex = pageInfo.pageIndex;\\r\\n    }\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 格式化数据\\r\\n   * @param list\\r\\n   * @private\\r\\n   */\\r\\n  private formatColumnData(list: T[]) {\\r\\n    if (!list) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const formatMap = this.nzxColumns.reduce((prev, curr) => {\\r\\n      if (curr.name && curr.format) {\\r\\n        prev[curr.name] = curr.format;\\r\\n      }\\r\\n      return prev;\\r\\n    }, {});\\r\\n\\r\\n    list.forEach((value, index) => {\\r\\n      if (value) {\\r\\n        Object.keys(value).forEach(key => {\\r\\n          if (formatMap[key]) {\\r\\n            const formatValue = formatMap[key](value[key], value, index);\\r\\n            if (this.isAsync(formatValue)) {\\r\\n              // 异步数据\\r\\n              // @ts-ignore\\r\\n              value[\'$ASYNC-\' + key] = formatValue;\\r\\n            } else {\\r\\n              // @ts-ignore\\r\\n              value[\'$FORMAT-\' + key] = formatValue;\\r\\n            }\\r\\n          }\\r\\n        });\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 合并请求参数\\r\\n   * @param reset\\r\\n   * @param fetchSetting\\r\\n   * @private\\r\\n   */\\r\\n  private mergeParams(reset = true, fetchSetting: FetchSetting) {\\r\\n    const params: Record<string, NzSafeAny> = {\\r\\n      [fetchSetting.pageIndexField!]: reset ? 1 : this.nzPageIndex,\\r\\n      [fetchSetting.pageSizeField!]: this.nzPageSize\\r\\n    };\\r\\n\\r\\n    if (this.sortInfo) {\\r\\n      const sortInfo = NzxUtils.isFunction(this.sortFn) ? this.sortFn(this.sortInfo) : this.sortInfo;\\r\\n      delete sortInfo.column;\\r\\n      Object.assign(params, sortInfo);\\r\\n    }\\r\\n    return params;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 是否是异步数据\\r\\n   * @param obj\\r\\n   * @protected\\r\\n   */\\r\\n  protected isAsync(obj: NzSafeAny): boolean {\\r\\n    return NzxUtils.isObservable(obj) || NzxUtils.isPromise(obj);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 处理表头合并单元格和 body的列\\r\\n   * @protected\\r\\n   */\\r\\n  protected resolveColumns() {\\r\\n    const { headerRows, bodyRows, allColumns } = this.getRowColumns(this.nzxColumns);\\r\\n    this._headerColumns = headerRows;\\r\\n    this._allColumns = allColumns;\\r\\n    // 没有合并表头, 使用同一对象\\r\\n    this._bodyColumns = headerRows.length ? bodyRows : headerRows[0];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 处理参数为模板的参数, 从字符串中找到真正的模板对象\\r\\n   * @protected\\r\\n   */\\r\\n  protected resolveTemplateColumn() {\\r\\n    const nameTemplateMap: Record<string, TemplateRef<NzSafeAny>> = {};\\r\\n    for (const tpl of this.children) {\\r\\n      nameTemplateMap[tpl.named] = tpl.template;\\r\\n    }\\r\\n\\r\\n    if (this.tplMap) {\\r\\n      this.tplMap.forEach((value, key) => (nameTemplateMap[key] = value));\\r\\n    }\\r\\n\\r\\n    this._allColumns.forEach(col =>\\r\\n      Object.keys(col)\\r\\n        .filter(v => /Template$/.test(v))\\r\\n        .forEach(tplName => this.stringToTemplate(col, tplName, nameTemplateMap))\\r\\n    );\\r\\n    setTimeout(() => this.cdr.markForCheck());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 字符串查找对应的模版\\r\\n   * @param col\\r\\n   * @param key\\r\\n   * @param nameTemplateMap\\r\\n   * @protected\\r\\n   */\\r\\n  protected stringToTemplate(\\r\\n    col: NzxColumn<T>,\\r\\n    key: keyof NzxColumn,\\r\\n    nameTemplateMap: Record<string, TemplateRef<NzSafeAny>>\\r\\n  ) {\\r\\n    const newKey = \'_\' + key;\\r\\n    if (typeof col[key] === \'string\') {\\r\\n      const tpl = nameTemplateMap[col[key]];\\r\\n      if (tpl) {\\r\\n        col[newKey] = tpl;\\r\\n      }\\r\\n    } else if (col[key] instanceof TemplateRef) {\\r\\n      col[newKey] = col[key];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 表头触发CheckBox change\\r\\n   * @param evt\\r\\n   * @param col\\r\\n   */\\r\\n  thCheckedChange(evt: boolean, col: NzxColumn<T>): void {\\r\\n    if (col.enableCheckAll !== false) {\\r\\n      col.checked = evt;\\r\\n      col.nzIndeterminate = false;\\r\\n      // @ts-ignore\\r\\n      this._currentPageData.forEach(v => !v.disabled && (v.checked = evt));\\r\\n    }\\r\\n    if (col.thCheckedChange) {\\r\\n      col.thCheckedChange(evt, col);\\r\\n    }\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * td触发CheckBox change\\r\\n   * @param evt\\r\\n   * @param col\\r\\n   * @param row\\r\\n   * @param rowIndex\\r\\n   */\\r\\n  tdCheckedChange(evt: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) {\\r\\n    if (col.enableCheckAll !== false) {\\r\\n      this.refreshCheckedStatus(col);\\r\\n    }\\r\\n    if (col.tdCheckedChange) {\\r\\n      col.tdCheckedChange(evt, col, row, rowIndex);\\r\\n    }\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n\\r\\n  onCurrentPageDataChange(list: readonly T[]): void {\\r\\n    this._currentPageData = list;\\r\\n    const col = this._bodyColumns.filter(v => v.nzShowCheckbox)[0];\\r\\n    if (col) {\\r\\n      this.refreshCheckedStatus(col);\\r\\n    }\\r\\n\\r\\n    this.nzCurrentPageDataChange.emit(list);\\r\\n    this.cdr.markForCheck();\\r\\n  }\\r\\n\\r\\n  refreshCheckedStatus(col: NzxColumn<T>): void {\\r\\n    const list = this._currentPageData.filter(v => !v.disabled);\\r\\n    if (list.length) {\\r\\n      col.checked = list.every(v => v.checked);\\r\\n      col.nzIndeterminate = !col.checked && list.some(v => v.checked);\\r\\n    } else {\\r\\n      col.checked = false;\\r\\n      col.nzIndeterminate = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  ngAfterContentInit(): void {\\r\\n    this.children.changes.subscribe(() => this.resolveTemplateColumn());\\r\\n    this.resolveTemplateColumn();\\r\\n  }\\r\\n\\r\\n  ngAfterViewInit(): void {\\r\\n    if (this.nzSize === \'mini\') {\\r\\n      this.tableSizeChange(this.nzSize, this.nzTable);\\r\\n    }\\r\\n\\r\\n    if (this.scrollXFillParent || this.scrollYFillParent) {\\r\\n      const element = this.elementRef.nativeElement.parentElement!;\\r\\n      const fixedAutoScroll = () => {\\r\\n        if (this.scrollXFillParent) {\\r\\n          this.fixXFillParent(element);\\r\\n        }\\r\\n\\r\\n        if (this.scrollYFillParent) {\\r\\n          this.fixYFillParent(element);\\r\\n        }\\r\\n      };\\r\\n      fromEvent(window, \'resize\')\\r\\n        .pipe(takeUntil(this.resize$), debounceTime(80))\\r\\n        .subscribe(() => fixedAutoScroll());\\r\\n      fixedAutoScroll();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: { [P in keyof this]?: SimpleChange } & SimpleChanges): void {\\r\\n    if (\\r\\n      (changes.nzxColumns && !changes.nzxColumns.isFirstChange()) ||\\r\\n      (changes.tplMap && !changes.tplMap.isFirstChange())\\r\\n    ) {\\r\\n      this.resolveColumns();\\r\\n      this.resolveTemplateColumn();\\r\\n    }\\r\\n\\r\\n    if (changes.api && !changes.api.isFirstChange()) {\\r\\n      this.fetch(true);\\r\\n    }\\r\\n\\r\\n    if (\\r\\n      (changes.nzPageIndex && !changes.nzPageIndex.isFirstChange()) ||\\r\\n      (changes.nzPageSize && !changes.nzPageSize.isFirstChange())\\r\\n    ) {\\r\\n      this.fetch();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 拖拽排序\\r\\n   * @param event\\r\\n   */\\r\\n  sortedColumn(event: CdkDragDrop<NzxColumn<T>, NzSafeAny>) {\\r\\n    moveItemInArray(this._headerColumns[0], event.previousIndex, event.currentIndex);\\r\\n  }\\r\\n\\r\\n  ngOnDestroy(): void {\\r\\n    this.resize$.next();\\r\\n    this.resize$.complete();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 获取合并表头\\r\\n   * @param originColumns 原始列配置\\r\\n   * @protected\\r\\n   */\\r\\n  protected getRowColumns(originColumns: NzxColumn<T>[]): {\\r\\n    headerRows: NzxColumn<T>[][];\\r\\n    bodyRows: NzxColumn<T>[];\\r\\n    allColumns: NzxColumn<T>[];\\r\\n  } {\\r\\n    let maxLevel = 0;\\r\\n    const allColumns: NzxColumn<T>[] = [];\\r\\n    NzxUtils.forEachTree(originColumns, (node, parent, level) => {\\r\\n      this.normalProps(node);\\r\\n\\r\\n      allColumns.push(node);\\r\\n      node.colspan = node.children && node.children.length ? 0 : 1;\\r\\n      node.level = level;\\r\\n\\r\\n      if (level > maxLevel) {\\r\\n        maxLevel = level;\\r\\n      }\\r\\n\\r\\n      node.parent = parent;\\r\\n      if (parent && !node.children) {\\r\\n        let p = parent;\\r\\n        while (p) {\\r\\n          p.colspan++;\\r\\n          p = p.parent;\\r\\n        }\\r\\n      }\\r\\n    });\\r\\n\\r\\n    const headerRows: NzxColumn<T>[][] = Array.from({ length: maxLevel + 1 })\\r\\n      .fill(0)\\r\\n      .map(() => []) as NzSafeAny;\\r\\n\\r\\n    const bodyRows: NzxColumn<T>[] = [];\\r\\n    allColumns.forEach(col => {\\r\\n      if (!col.children) {\\r\\n        col.rowspan = maxLevel - col.level + 1;\\r\\n        bodyRows.push(col);\\r\\n      } else {\\r\\n        col.rowspan = 1;\\r\\n      }\\r\\n      headerRows[col.level].push(col);\\r\\n    });\\r\\n\\r\\n    return { headerRows, bodyRows, allColumns };\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 规范化属性\\r\\n   * @param col 列\\r\\n   * @protected\\r\\n   */\\r\\n  protected normalProps(col: NzxColumn<T>) {\\r\\n    if (col.visible == null) {\\r\\n      col.visible = true;\\r\\n    }\\r\\n    if (col.thText == null && col.isIndex) {\\r\\n      col.thText = \'序号\';\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 计算x轴滚动大小\\r\\n   * @param element\\r\\n   * @private\\r\\n   */\\r\\n  private fixXFillParent(element: HTMLElement) {\\r\\n    if (!element.clientWidth) {\\r\\n      return;\\r\\n    }\\r\\n    if (this.minScrollX) {\\r\\n      this.scrollX = `${element.clientWidth >= this.minScrollX ? element.clientWidth : this.minScrollX}px`;\\r\\n    } else {\\r\\n      this.scrollX = `${element.clientWidth}px`;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 计算y轴滚动大小\\r\\n   * @param element\\r\\n   * @private\\r\\n   */\\r\\n  private fixYFillParent(element: HTMLElement) {\\r\\n    if (!element.clientHeight) {\\r\\n      return;\\r\\n    }\\r\\n    if (this.minScrollY) {\\r\\n      this.scrollY = `${element.clientHeight >= this.minScrollY ? element.clientHeight : this.minScrollY}px`;\\r\\n    } else {\\r\\n      this.scrollY = `${element.clientHeight}px`;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","preserveWhitespaces":false,"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""},{"name":"render","type":"Renderer2","deprecated":false,"deprecationMessage":""},{"name":"http","type":"HttpClient","deprecated":false,"deprecationMessage":""},{"name":"elementRef","type":"ElementRef<HTMLDivElement>","deprecated":false,"deprecationMessage":""},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":""}],"line":390,"jsdoctags":[{"name":"cdr","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"render","type":"Renderer2","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"http","type":"HttpClient","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"elementRef","type":"ElementRef<HTMLDivElement>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"antdService","type":"NzxAntdService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"implements":["OnInit","AfterContentInit","AfterViewInit","OnChanges","OnDestroy"],"templateData":"<nzx-table-header\\r\\n  *ngIf=\\"toolbarVisible !== false\\"\\r\\n  [actionVisible]=\\"actionVisible\\"\\r\\n  [tableSize]=\\"nzSize\\"\\r\\n  [refreshVisible]=\\"nzxRefreshVisible\\"\\r\\n  [resizeVisible]=\\"nzxResizeVisible\\"\\r\\n  (tableSizeChange)=\\"tableSizeChange($event, basicTable)\\"\\r\\n  (refreshClick)=\\"onRefreshClick()\\"\\r\\n>\\r\\n  <ng-container *nzStringTemplateOutlet=\\"title; context: { $implicit: { context: this } }\\">\\r\\n    {{ title }}\\r\\n  </ng-container>\\r\\n  <ng-content select=\\"[title]\\"></ng-content>\\r\\n\\r\\n  <ng-container setting-before>\\r\\n    <ng-container *nzStringTemplateOutlet=\\"toolbarBefore; context: { $implicit: { context: this } }\\">\\r\\n      {{ toolbarBefore }}\\r\\n    </ng-container>\\r\\n    <ng-content select=\\"[toolbarBefore]\\"></ng-content>\\r\\n  </ng-container>\\r\\n\\r\\n  <nzx-column-setting\\r\\n    setting\\r\\n    *ngIf=\\"nzxSettingVisible\\"\\r\\n    [nzxColumns]=\\"_bodyColumns\\"\\r\\n    (sortedColumn)=\\"sortedColumn($event)\\"\\r\\n    (fixedClick)=\\"fixedClick($event)\\"\\r\\n  ></nzx-column-setting>\\r\\n\\r\\n  <ng-container toolbar>\\r\\n    <ng-container *nzStringTemplateOutlet=\\"toolbar; context: { $implicit: { context: this } }\\">\\r\\n      {{ toolbar }}\\r\\n    </ng-container>\\r\\n    <ng-content select=\\"[toolbar]\\"></ng-content>\\r\\n  </ng-container>\\r\\n</nzx-table-header>\\r\\n\\r\\n<nz-table\\r\\n  #basicTable\\r\\n  [nzData]=\\"nzData\\"\\r\\n  [nzTableLayout]=\\"nzTableLayout\\"\\r\\n  [nzFrontPagination]=\\"nzFrontPagination\\"\\r\\n  [nzTotal]=\\"nzTotal\\"\\r\\n  [(nzPageIndex)]=\\"nzPageIndex\\"\\r\\n  [(nzPageSize)]=\\"nzPageSize\\"\\r\\n  [nzShowPagination]=\\"nzShowPagination\\"\\r\\n  [nzPaginationPosition]=\\"nzPaginationPosition\\"\\r\\n  [nzPaginationType]=\\"nzPaginationType\\"\\r\\n  [nzBordered]=\\"nzBordered\\"\\r\\n  [nzOuterBordered]=\\"nzOuterBordered\\"\\r\\n  [nzWidthConfig]=\\"nzWidthConfig\\"\\r\\n  [nzSize]=\\"$any(nzSize)\\"\\r\\n  [nzLoading]=\\"nzLoading\\"\\r\\n  [nzLoadingIndicator]=\\"nzLoadingIndicator\\"\\r\\n  [nzLoadingDelay]=\\"nzLoadingDelay\\"\\r\\n  [nzScroll]=\\"{ x: scrollX, y: scrollY }\\"\\r\\n  [nzTitle]=\\"nzTitle\\"\\r\\n  [nzFooter]=\\"nzFooter\\"\\r\\n  [nzNoResult]=\\"nzNoResult\\"\\r\\n  [nzPageSizeOptions]=\\"nzPageSizeOptions || defaultPageSizeOptions\\"\\r\\n  [nzShowQuickJumper]=\\"nzShowQuickJumper\\"\\r\\n  [nzShowSizeChanger]=\\"nzShowSizeChanger\\"\\r\\n  [nzShowTotal]=\\"nzShowTotal === undefined ? totalTemplate : nzShowTotal\\"\\r\\n  [nzItemRender]=\\"nzItemRender\\"\\r\\n  [nzHideOnSinglePage]=\\"nzHideOnSinglePage\\"\\r\\n  [nzSimple]=\\"nzSimple\\"\\r\\n  [nzTemplateMode]=\\"nzTemplateMode\\"\\r\\n  [nzVirtualItemSize]=\\"nzVirtualItemSize\\"\\r\\n  [nzVirtualMaxBufferPx]=\\"nzVirtualMaxBufferPx\\"\\r\\n  [nzVirtualMinBufferPx]=\\"nzVirtualMinBufferPx\\"\\r\\n  [nzVirtualForTrackBy]=\\"nzVirtualForTrackBy\\"\\r\\n  (nzPageIndexChange)=\\"nzPageIndexChange.emit($event); fetch(false)\\"\\r\\n  (nzPageSizeChange)=\\"nzPageSizeChange.emit($event); fetch(false)\\"\\r\\n  (nzCurrentPageDataChange)=\\"onCurrentPageDataChange($event)\\"\\r\\n  (nzQueryParams)=\\"nzQueryParams.emit($event)\\"\\r\\n>\\r\\n  <thead *ngIf=\\"nzxShowHeader !== false\\">\\r\\n    <ng-container *ngIf=\\"nzxDefaultRenderHeader !== false\\">\\r\\n      <tr *ngFor=\\"let row of _headerColumns\\">\\r\\n        <ng-container *ngFor=\\"let col of row\\">\\r\\n          <th\\r\\n            *ngIf=\\"!col.nzShowCheckbox && col.visible !== false\\"\\r\\n            nz-resizable\\r\\n            [nzDisabled]=\\"nzxResizable === false\\"\\r\\n            nzBounds=\\"window\\"\\r\\n            (nzResize)=\\"onResize($event, col)\\"\\r\\n            (click)=\\"headerClick.emit({ column: col, event: $event })\\"\\r\\n            (dblclick)=\\"headerDblclick.emit({ column: col, event: $event })\\"\\r\\n            (contextmenu)=\\"headerContextmenu.emit({ column: col, event: $event })\\"\\r\\n            [nzShowSort]=\\"col.nzShowSort\\"\\r\\n            [nzCustomFilter]=\\"col.nzCustomFilter\\"\\r\\n            [nzSortFn]=\\"col.nzSortFn == null ? true : col.nzSortFn\\"\\r\\n            [nzSortDirections]=\\"col.nzSortDirections\\"\\r\\n            [(nzSortOrder)]=\\"col.nzSortOrder\\"\\r\\n            (nzSortOrderChange)=\\"sortOrderChange($event, col)\\"\\r\\n            [nzColumnKey]=\\"col.nzColumnKey || col.name\\"\\r\\n            [nzShowFilter]=\\"col.nzShowFilter\\"\\r\\n            [nzSortPriority]=\\"col.nzSortPriority === true\\"\\r\\n            [nzFilterFn]=\\"col.nzFilterFn\\"\\r\\n            [nzFilters]=\\"col.nzFilters\\"\\r\\n            [nzFilterMultiple]=\\"col.nzFilterMultiple !== false\\"\\r\\n            [nzWidth]=\\"col.nzWidth == null && col.isIndex ? \'60px\' : col.nzWidth\\"\\r\\n            [nzLeft]=\\"col.fixed === \'left\'\\"\\r\\n            [nzRight]=\\"col.fixed === \'right\'\\"\\r\\n            [nzAlign]=\\"col.thAlign\\"\\r\\n            [nzBreakWord]=\\"col.nzBreakWord\\"\\r\\n            [nzEllipsis]=\\"col.nzEllipsis\\"\\r\\n            [colspan]=\\"col.colspan\\"\\r\\n            [rowspan]=\\"col.rowspan\\"\\r\\n            [ngClass]=\\"col.thNgClass\\"\\r\\n            [ngStyle]=\\"col.thNgStyle\\"\\r\\n          >\\r\\n            <nz-resize-handles [nzDirections]=\\"[\'right\']\\"></nz-resize-handles>\\r\\n            <ng-container\\r\\n              *ngTemplateOutlet=\\"\\r\\n                thRenderTemplate;\\r\\n                context: { $implicit: { col: col, row: row, context: this }, row: row }\\r\\n              \\"\\r\\n            ></ng-container>\\r\\n          </th>\\r\\n\\r\\n          <th\\r\\n            *ngIf=\\"col.nzShowCheckbox && col.visible !== false\\"\\r\\n            nz-resizable\\r\\n            [nzDisabled]=\\"nzxResizable === false\\"\\r\\n            nzBounds=\\"window\\"\\r\\n            (nzResize)=\\"onResize($event, col)\\"\\r\\n            (click)=\\"headerClick.emit({ column: col, event: $event })\\"\\r\\n            (dblclick)=\\"headerDblclick.emit({ column: col, event: $event })\\"\\r\\n            (contextmenu)=\\"headerContextmenu.emit({ column: col, event: $event })\\"\\r\\n            [nzShowCheckbox]=\\"col.nzShowCheckbox\\"\\r\\n            [nzIndeterminate]=\\"col.nzIndeterminate\\"\\r\\n            [(nzChecked)]=\\"col.checked\\"\\r\\n            (nzCheckedChange)=\\"thCheckedChange($event, col)\\"\\r\\n            [nzShowRowSelection]=\\"col.nzShowRowSelection\\"\\r\\n            [nzSelections]=\\"col.nzSelections\\"\\r\\n            [nzWidth]=\\"col.nzWidth == null && col.nzShowCheckbox ? \'60px\' : col.nzWidth\\"\\r\\n            [nzLeft]=\\"col.fixed === \'left\'\\"\\r\\n            [nzRight]=\\"col.fixed === \'right\'\\"\\r\\n            [nzAlign]=\\"col.nzAlign\\"\\r\\n            [nzBreakWord]=\\"col.nzBreakWord\\"\\r\\n            [nzEllipsis]=\\"col.nzEllipsis\\"\\r\\n            [colspan]=\\"col.colspan\\"\\r\\n            [rowspan]=\\"col.rowspan\\"\\r\\n            [ngClass]=\\"col.thClassName\\"\\r\\n            [ngStyle]=\\"col.thStyle\\"\\r\\n          >\\r\\n            <nz-resize-handles [nzDirections]=\\"[\'right\']\\"></nz-resize-handles>\\r\\n            <ng-container\\r\\n              *ngTemplateOutlet=\\"\\r\\n                thRenderTemplate;\\r\\n                context: { $implicit: { col: col, row: row, context: this }, row: row }\\r\\n              \\"\\r\\n            ></ng-container>\\r\\n          </th>\\r\\n        </ng-container>\\r\\n      </tr>\\r\\n    </ng-container>\\r\\n  </thead>\\r\\n\\r\\n  <tbody class=\\"nzx-table-striped-tbody\\" [class.nzx-table-striped-tbody]=\\"nzxStripe\\">\\r\\n    <ng-container\\r\\n      *ngFor=\\"let row of basicTable.data; index as index; first as first; last as last; even as even; odd as odd\\"\\r\\n    >\\r\\n      <tr\\r\\n        *ngIf=\\"row.parent?.expand || !row.parent\\"\\r\\n        (click)=\\"\\r\\n          onRowClick({\\r\\n            row: row,\\r\\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\\r\\n            event: $event\\r\\n          })\\r\\n        \\"\\r\\n        (dblclick)=\\"\\r\\n          rowDblclick.emit({\\r\\n            row: row,\\r\\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\\r\\n            event: $event\\r\\n          })\\r\\n        \\"\\r\\n        (contextmenu)=\\"\\r\\n          rowContextmenu.emit({\\r\\n            row: row,\\r\\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\\r\\n            event: $event\\r\\n          })\\r\\n        \\"\\r\\n        [ngClass]=\\"row.className\\"\\r\\n        [ngStyle]=\\"row.style\\"\\r\\n        [class.ant-table-row-selected]=\\"row.checked || _selectRow === row\\"\\r\\n      >\\r\\n        <ng-container\\r\\n          *ngFor=\\"let col of _bodyColumns; index as _index; first as _first; last as _last; even as _even; odd as _odd\\"\\r\\n        >\\r\\n          <td\\r\\n            *ngIf=\\"col.visible !== false\\"\\r\\n            (click)=\\"\\r\\n              cellClick.emit({\\r\\n                row: row,\\r\\n                column: col,\\r\\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\\r\\n                columnIndex: {\\r\\n                  index: _index,\\r\\n                  first: _first,\\r\\n                  last: _last,\\r\\n                  even: _even,\\r\\n                  odd: _odd\\r\\n                },\\r\\n                event: $event\\r\\n              })\\r\\n            \\"\\r\\n            (dblclick)=\\"\\r\\n              cellDblclick.emit({\\r\\n                row: row,\\r\\n                column: col,\\r\\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\\r\\n                columnIndex: {\\r\\n                  index: _index,\\r\\n                  first: _first,\\r\\n                  last: _last,\\r\\n                  even: _even,\\r\\n                  odd: _odd\\r\\n                },\\r\\n                event: $event\\r\\n              })\\r\\n            \\"\\r\\n            (contextmenu)=\\"\\r\\n              cellContextmenu.emit({\\r\\n                row: row,\\r\\n                column: col,\\r\\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\\r\\n                columnIndex: {\\r\\n                  index: _index,\\r\\n                  first: _first,\\r\\n                  last: _last,\\r\\n                  even: _even,\\r\\n                  odd: _odd\\r\\n                },\\r\\n                event: $event\\r\\n              })\\r\\n            \\"\\r\\n            [nzShowCheckbox]=\\"col.nzShowCheckbox || row.showCheckbox\\"\\r\\n            [nzDisabled]=\\"row.disabled\\"\\r\\n            [nzIndeterminate]=\\"row.indeterminate\\"\\r\\n            [(nzChecked)]=\\"row.checked\\"\\r\\n            (nzCheckedChange)=\\"tdCheckedChange($event, col, row, {index, first, last, even, odd})\\"\\r\\n            [nzShowExpand]=\\"col.showExpand && row.showExpand\\"\\r\\n            [(nzExpand)]=\\"row.expand\\"\\r\\n            (nzExpandChange)=\\"col.nzExpandChange && col.nzExpandChange($event, col, row, {index, first, last, even, odd})\\"\\r\\n            [nzIndentSize]=\\"col.showExpand && row.nzIndentSize ? row.nzIndentSize : null\\"\\r\\n            [nzLeft]=\\"col.fixed === \'left\'\\"\\r\\n            [nzRight]=\\"col.fixed === \'right\'\\"\\r\\n            [nzAlign]=\\"col.tdAlign || col.nzAlign\\"\\r\\n            [nzBreakWord]=\\"col.nzBreakWord\\"\\r\\n            [nzEllipsis]=\\"col.nzEllipsis\\"\\r\\n            [attr.colspan]=\\"row.colspan\\"\\r\\n            [attr.rowspan]=\\"row.rowspan\\"\\r\\n            [ngClass]=\\"col.tdNgClass\\"\\r\\n            [ngStyle]=\\"col.tdNgStyle\\"\\r\\n          >\\r\\n            <ng-container\\r\\n              *ngTemplateOutlet=\\"\\r\\n                tdDataRender;\\r\\n                context: {\\r\\n                  $implicit: {\\r\\n                    col: col,\\r\\n                    row: row,\\r\\n                    context: this,\\r\\n                    indexAttr: { index: index, first: first, last: last, even: even, odd: odd }\\r\\n                  },\\r\\n                  row: row\\r\\n                }\\r\\n              \\"\\r\\n            ></ng-container>\\r\\n          </td>\\r\\n        </ng-container>\\r\\n      </tr>\\r\\n    </ng-container>\\r\\n  </tbody>\\r\\n</nz-table>\\r\\n\\r\\n<ng-template #thRenderTemplate let-data>\\r\\n  <ng-container *ngIf=\\"data.col._thTemplate; else textThTemplate\\">\\r\\n    <ng-container *ngTemplateOutlet=\\"data.col._thTemplate; context: { $implicit: data }\\"></ng-container>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-template #textThTemplate>\\r\\n    {{ data.col.thText == null && data.col.isIndex ? \'序号\' : data.col.thText }}\\r\\n  </ng-template>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #tdDataRender let-data let-row=\\"row\\">\\r\\n  <ng-container *ngIf=\\"!data.col.isIndex; else tdTemplateTemplate\\">\\r\\n    <ng-container *ngIf=\\"data.col._tdTemplate; else buttonControlTemplate\\">\\r\\n      <ng-container *ngTemplateOutlet=\\"data.col._tdTemplate; context: { $implicit: data, row: row }\\"></ng-container>\\r\\n    </ng-container>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-template #tdTemplateTemplate>\\r\\n    {{ nzPageSize * (nzPageIndex - 1) + data.indexAttr.index + 1 }}\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #buttonControlTemplate>\\r\\n    <ng-container *ngIf=\\"data.col.buttons?.length; else textValueTemplate\\">\\r\\n      <ng-container *ngFor=\\"let btn of data.col.buttons; index as index; count as count; last as last\\">\\r\\n        <button\\r\\n          *ngIf=\\"btn.link === false && (btn.visible !== false || row.buttons?.[index]?.visible !== false)\\"\\r\\n          type=\\"button\\"\\r\\n          nz-button\\r\\n          [type]=\\"btn.type\\"\\r\\n          [nzBlock]=\\"btn.nzBlock\\"\\r\\n          [nzDanger]=\\"btn.nzDanger\\"\\r\\n          [nzGhost]=\\"btn.nzGhost\\"\\r\\n          [nzSize]=\\"btn.nzSize || \'small\'\\"\\r\\n          [nzLoading]=\\"btn.nzLoading || row.buttons?.[index]?.nzLoading\\"\\r\\n          [nzSearch]=\\"btn.nzSearch\\"\\r\\n          [nzShape]=\\"btn.nzShape\\"\\r\\n          [nzType]=\\"btn.nzType || \'link\'\\"\\r\\n          [disabled]=\\"row.buttons?.[index]?.disabled\\"\\r\\n          (click)=\\"btn.click && btn.click(row, data, $event)\\"\\r\\n        >\\r\\n          {{ row.buttons?.[index]?.text || btn.text }}\\r\\n        </button>\\r\\n        <a\\r\\n          *ngIf=\\"btn.link !== false && (btn.visible !== false || row.buttons?.[index]?.visible !== false)\\"\\r\\n          [attr.href]=\\"getLinkHref(btn, row, data)\\"\\r\\n          [attr.target]=\\"btn.target || row.buttons?.[index]?.target\\"\\r\\n          (click)=\\"btn.click && row.buttons?.[index]?.disabled !== true && btn.click(row, data, $event)\\"\\r\\n        >\\r\\n          {{ btn.text || row.buttons?.[index]?.text }}\\r\\n        </a>\\r\\n        <nz-divider nzType=\\"vertical\\" *ngIf=\\"count > 1 && !last\\"></nz-divider>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container *ngTemplateOutlet=\\"data.col._tdTemplate; context: { $implicit: data, row: row }\\"></ng-container>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #textValueTemplate>\\r\\n    <ng-container *ngIf=\\"data.col.name\\">\\r\\n      \x3c!--处理异步数据--\x3e\\r\\n      <ng-container *ngIf=\\"data.row[\'$ASYNC-\' + data.col.name] != null; else formatValue\\">\\r\\n        {{ data.row[\'$ASYNC-\' + data.col.name] | async | defaultify }}\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-template #formatValue>\\r\\n        <ng-container *ngIf=\\"data.row[\'$FORMAT-\' + data.col.name] != null; else simpleValue\\">\\r\\n          {{ data.row[\'$FORMAT-\' + data.col.name] }}\\r\\n        </ng-container>\\r\\n      </ng-template>\\r\\n\\r\\n      <ng-template #simpleValue>\\r\\n        {{ data.row[data.col.name] | defaultify }}\\r\\n      </ng-template>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #totalTemplate let-range=\\"range\\" let-total>\\r\\n  第 {{ range[0] / nzPageSize | math: \'ceil\' }}/{{ total / nzPageSize | math: \'ceil\' }} 页 共 {{ total }} 条\\r\\n</ng-template>\\r\\n"},{"name":"NzxTableHeaderComponent","id":"component-NzxTableHeaderComponent-58831f521c802cc489b94a3b91a977d1e8261998dd56c45fa9b26f0cad0872d60ef9e0fb2c4d4335af83545679f38148def48fe03c9bdcff2d3902dbb41e3ff7","file":"lib/table/header/table-header/table-header.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"nzx-table-header","styleUrls":[],"styles":[":host{display: block}"],"templateUrl":["./table-header.component.html"],"viewProviders":[],"inputsClass":[{"name":"actionVisible","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示操作按钮小图标\\n","description":"<p>是否显示操作按钮小图标</p>\\n","line":29,"type":"boolean","decorators":[]},{"name":"refreshVisible","deprecated":false,"deprecationMessage":"","line":30,"type":"boolean","decorators":[]},{"name":"resizeVisible","deprecated":false,"deprecationMessage":"","line":31,"type":"boolean","decorators":[]},{"name":"tableSize","defaultValue":"\'small\'","deprecated":false,"deprecationMessage":"","line":25,"type":"NzxTableSize","decorators":[]}],"outputsClass":[{"name":"refreshClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","line":34,"type":"EventEmitter"},{"name":"tableSizeChange","defaultValue":"new EventEmitter<NzTableSize>()","deprecated":false,"deprecationMessage":"","line":33,"type":"EventEmitter"}],"propertiesClass":[{"name":"tableSizeOptions","defaultValue":"[\\r\\n    { sizeName: \'大号\', selected: false, value: \'default\' },\\r\\n    { sizeName: \'中等\', selected: false, value: \'middle\' },\\r\\n    { sizeName: \'紧凑\', selected: true, value: \'small\' },\\r\\n    { sizeName: \'迷你\', selected: true, value: \'mini\' }\\r\\n  ]","deprecated":false,"deprecationMessage":"","type":"[]","optional":false,"description":"","line":36,"modifierKind":[144]}],"methodsClass":[{"name":"ngOnChanges","args":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":49,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":45,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  Input,\\r\\n  OnChanges,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  SimpleChange,\\r\\n  SimpleChanges,\\r\\n  ViewEncapsulation\\r\\n} from \'@angular/core\';\\r\\nimport { NzTableSize } from \'ng-zorro-antd/table\';\\r\\nimport { NzxTableSize } from \'../../table.type\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-table-header\',\\r\\n  templateUrl: \'./table-header.component.html\',\\r\\n  styles: [\':host{display: block}\'],\\r\\n  preserveWhitespaces: false,\\r\\n  encapsulation: ViewEncapsulation.None,\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush\\r\\n})\\r\\nexport class NzxTableHeaderComponent implements OnInit, OnChanges {\\r\\n  @Input() tableSize: NzxTableSize = \'small\';\\r\\n  /**\\r\\n   * 是否显示操作按钮小图标\\r\\n   */\\r\\n  @Input() actionVisible?: boolean;\\r\\n  @Input() refreshVisible?: boolean;\\r\\n  @Input() resizeVisible?: boolean;\\r\\n\\r\\n  @Output() tableSizeChange = new EventEmitter<NzTableSize>();\\r\\n  @Output() refreshClick = new EventEmitter<void>();\\r\\n\\r\\n  readonly tableSizeOptions = [\\r\\n    { sizeName: \'大号\', selected: false, value: \'default\' },\\r\\n    { sizeName: \'中等\', selected: false, value: \'middle\' },\\r\\n    { sizeName: \'紧凑\', selected: true, value: \'small\' },\\r\\n    { sizeName: \'迷你\', selected: true, value: \'mini\' }\\r\\n  ];\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.tableSizeOptions.forEach(v => (v.selected = v.value === this.tableSize));\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\\r\\n    if (changes.tableSize && !changes.tableSize.isFirstChange()) {\\r\\n      this.ngOnInit();\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":":host{display: block}\\n","preserveWhitespaces":false,"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":41},"implements":["OnInit","OnChanges"],"templateData":"<div class=\\"nzx-table__header\\">\\r\\n  <div class=\\"nzx-table__title\\">\\r\\n    <ng-content></ng-content>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\"nzx-table__toolbar\\">\\r\\n    <ng-content select=\\"[setting-before]\\"></ng-content>\\r\\n    <ng-container *ngIf=\\"actionVisible !== false\\">\\r\\n      <i\\r\\n        *ngIf=\\"refreshVisible\\"\\r\\n        (click)=\\"refreshClick.emit()\\"\\r\\n        nz-icon\\r\\n        nzType=\\"reload\\"\\r\\n        nzTheme=\\"outline\\"\\r\\n        nz-tooltip\\r\\n        nzTooltipTitle=\\"刷新\\"\\r\\n        tabindex=\\"-1\\"\\r\\n      ></i>\\r\\n      <i\\r\\n        *ngIf=\\"resizeVisible\\"\\r\\n        nzTrigger=\\"click\\"\\r\\n        nz-dropdown\\r\\n        [nzDropdownMenu]=\\"tableSizeMenu\\"\\r\\n        nz-icon\\r\\n        nzType=\\"column-height\\"\\r\\n        nzTheme=\\"outline\\"\\r\\n        nz-tooltip\\r\\n        tabindex=\\"-1\\"\\r\\n        nzTooltipTitle=\\"密度\\"\\r\\n      ></i>\\r\\n\\r\\n      <ng-content select=\\"[setting]\\"></ng-content>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-content select=\\"[toolbar]\\"></ng-content>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<nz-dropdown-menu #tableSizeMenu>\\r\\n  <ul nz-menu>\\r\\n    <li\\r\\n      nz-menu-item\\r\\n      (click)=\\"item.value !== tableSize && tableSizeChange.emit(item.value)\\"\\r\\n      [nzSelected]=\\"item.selected\\"\\r\\n      *ngFor=\\"let item of tableSizeOptions\\"\\r\\n    >\\r\\n      <span>{{ item.sizeName }}</span>\\r\\n    </li>\\r\\n  </ul>\\r\\n</nz-dropdown-menu>\\r\\n"},{"name":"NzxUploadComponent","id":"component-NzxUploadComponent-a17ae1d9e823ad87de17c85e3619c4074bb2b8f425a5bf5f73a61672de692d84b3881fbd1b69426e2637a2d0863a84e3c78846a21598c9f18a9b018b4a5d0865","file":"lib/upload/upload.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxUploadComponent), multi: true\\n}","type":"component"},{"name":"NzBytesPipe","type":"pipe"}],"selector":"nzx-upload","styleUrls":[],"styles":[],"templateUrl":["./upload.component.html"],"viewProviders":[],"inputsClass":[{"name":"nzAccept","deprecated":false,"deprecationMessage":"","line":105,"type":"string | string[]","decorators":[]},{"name":"nzAction","deprecated":false,"deprecationMessage":"","line":106,"type":"string | ","decorators":[]},{"name":"nzBeforeUpload","deprecated":false,"deprecationMessage":"","line":113,"type":"function","decorators":[]},{"name":"nzCustomRequest","deprecated":false,"deprecationMessage":"","line":119,"type":"function","decorators":[]},{"name":"nzData","deprecated":false,"deprecationMessage":"","line":120,"type":"literal type | ","decorators":[]},{"name":"nzDirectory","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":107,"type":"boolean","decorators":[]},{"name":"nzDisabled","deprecated":false,"deprecationMessage":"","line":122,"type":"boolean","decorators":[]},{"name":"nzDownload","deprecated":false,"deprecationMessage":"","line":135,"type":"function","decorators":[]},{"name":"nzFileListRender","deprecated":false,"deprecationMessage":"","line":137,"type":"TemplateRef<void>","decorators":[]},{"name":"nzFileType","deprecated":false,"deprecationMessage":"","line":104,"type":"string | string[]","decorators":[]},{"name":"nzFilter","defaultValue":"[]","deprecated":false,"deprecationMessage":"","line":121,"type":"UploadFilter[]","decorators":[]},{"name":"nzHeaders","deprecated":false,"deprecationMessage":"","line":123,"type":"literal type | ","decorators":[]},{"name":"nzIconRender","deprecated":false,"deprecationMessage":"","line":136,"type":"NzIconRenderTemplate | null","decorators":[]},{"name":"nzLimit","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n上传的文件个数限制\\n","description":"<p>上传的文件个数限制</p>\\n","line":87,"type":"number","decorators":[]},{"name":"nzListType","defaultValue":"\'text\'","deprecated":false,"deprecationMessage":"","line":124,"type":"NzUploadListType","decorators":[]},{"name":"nzMultiple","deprecated":false,"deprecationMessage":"","line":125,"type":"boolean","decorators":[]},{"name":"nzName","defaultValue":"\'file\'","deprecated":false,"deprecationMessage":"","line":126,"type":"string","decorators":[]},{"name":"nzOpenFileDialogOnClick","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":108,"type":"boolean","decorators":[]},{"name":"nzPreview","deprecated":false,"deprecationMessage":"","line":131,"type":"function","decorators":[]},{"name":"nzPreviewFile","deprecated":false,"deprecationMessage":"","line":132,"type":"function","decorators":[]},{"name":"nzPreviewIsImage","deprecated":false,"deprecationMessage":"","line":133,"type":"function","decorators":[]},{"name":"nzRemove","deprecated":false,"deprecationMessage":"","line":130,"type":"function","decorators":[]},{"name":"nzShowButton","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":128,"type":"boolean","decorators":[]},{"name":"nzShowUploadList","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":127,"type":"boolean | NzShowUploadList","decorators":[]},{"name":"nzSize","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n文件大小,单位kb\\n","description":"<p>文件大小,单位kb</p>\\n","line":99,"type":"number","decorators":[]},{"name":"nzTotalSize","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n总文件大小,单位kb\\n","description":"<p>总文件大小,单位kb</p>\\n","line":103,"type":"number","decorators":[]},{"name":"nzTransformFile","deprecated":false,"deprecationMessage":"","line":134,"type":"function","decorators":[]},{"name":"nzType","defaultValue":"\'select\'","deprecated":false,"deprecationMessage":"","line":83,"type":"NzUploadType","decorators":[]},{"name":"nzWithCredentials","deprecated":false,"deprecationMessage":"","line":129,"type":"boolean","decorators":[]},{"name":"nzxFileNameDuplicate","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n文件名重复验证\\n","description":"<p>文件名重复验证</p>\\n","line":91,"type":"boolean","decorators":[]},{"name":"nzxFileNameLength","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n文件名长度\\n","description":"<p>文件名长度</p>\\n","line":95,"type":"number","decorators":[]},{"name":"nzxHint","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n上传的提示信息\\n","description":"<p>上传的提示信息</p>\\n","line":70,"type":"string","decorators":[]},{"name":"nzxShowUploadButtonIcon","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示上传按钮, 如果是nzType=\\"drag\\" 隐藏按钮\\n","description":"<p>是否显示上传按钮, 如果是nzType=&quot;drag&quot; 隐藏按钮</p>\\n","line":74,"type":"boolean","decorators":[]},{"name":"nzxShowValidateMessage","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n是否显示验证错误提示信息\\n","description":"<p>是否显示验证错误提示信息</p>\\n","line":112,"type":"boolean","decorators":[]},{"name":"nzxUploadButton","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n自定义按钮或显示内容\\n","description":"<p>自定义按钮或显示内容</p>\\n","line":66,"type":"string | TemplateRef<NzSafeAny>","decorators":[]},{"name":"nzxUploadButtonIcon","defaultValue":"\'cloud-upload\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n上传按钮的图标\\n","description":"<p>上传按钮的图标</p>\\n","line":78,"type":"string","decorators":[]},{"name":"nzxValidateMessage","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n错误信息映射\\n","description":"<p>错误信息映射</p>\\n","line":82,"type":"literal type","decorators":[]}],"outputsClass":[{"name":"nzChange","defaultValue":"new EventEmitter<NzUploadChangeParam>()","deprecated":false,"deprecationMessage":"","line":139,"type":"EventEmitter"},{"name":"nzFileListChange","defaultValue":"new EventEmitter<NzUploadFile[]>()","deprecated":false,"deprecationMessage":"","line":140,"type":"EventEmitter"}],"propertiesClass":[{"name":"_nzBeforeUpload","deprecated":false,"deprecationMessage":"","type":"function","optional":true,"description":"","line":118},{"name":"defaultValidateMessage","defaultValue":"{\\r\\n    FILE_SIZE: \'文件 \\"{fileName}\\" 大小不能超过{fileSize}\',\\r\\n    FILE_TOTAL_SIZE: \'总上传文件大小不能超过{totalSize}\',\\r\\n    FILE_TYPE: \'上传的文件格式只能是 \\"{fileType}\',\\r\\n    FILE_LIMIT: \'最多允许上传{fileLimit}个文件\',\\r\\n    FILE_NAME_LENGTH: \'文件 \\"{fileName}\\" 名称长度不能大于{fileNameLength}个字符\',\\r\\n    FILE_NAME_DUPLICATE: \'已上传名称 \\"{fileName}\\" 相同的文件，不能重复上传\'\\r\\n  }","deprecated":false,"deprecationMessage":"","type":"literal type","optional":false,"description":"","line":142,"modifierKind":[144]},{"name":"nzFileList","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"NzUploadFile[]","optional":false,"description":"","line":62},{"name":"nzxDisabled","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":2,"modifierKind":[122],"inheritance":{"file":"BaseControl"}},{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":3,"inheritance":{"file":"BaseControl"}},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","optional":false,"description":"","line":4,"inheritance":{"file":"BaseControl"}}],"methodsClass":[{"name":"beforeUploadValidator","args":[{"name":"file","type":"NzUploadFile","deprecated":false,"deprecationMessage":""},{"name":"fileList","type":"NzUploadFile[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"FileValidateError | null","typeParameters":[],"line":250,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n文件验证\\n","description":"<p>文件验证</p>\\n","modifierKind":[122],"jsdoctags":[{"name":{"pos":7157,"end":7161,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"file"},"type":"NzUploadFile","deprecated":false,"deprecationMessage":"","tagName":{"pos":7151,"end":7156,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前文件</p>\\n"},{"name":{"pos":7180,"end":7188,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fileList"},"type":"NzUploadFile[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":7174,"end":7179,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>文件列表</p>\\n"}]},{"name":"getError","args":[{"name":"errorType","type":"ErrorType","deprecated":false,"deprecationMessage":""},{"name":"file","type":"NzUploadFile","deprecated":false,"deprecationMessage":""},{"name":"messages","type":"literal type","deprecated":false,"deprecationMessage":""},{"name":"fmtData","type":"Record<string | NzSafeAny>","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"FileValidateError","typeParameters":[],"line":315,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"errorType","type":"ErrorType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"file","type":"NzUploadFile","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"messages","type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"fmtData","type":"Record<string | NzSafeAny>","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"getNzBeforeUpload","args":[],"optional":false,"returnType":" | undefined","typeParameters":[],"line":234,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n重新包装zBeforeUpload\\n","description":"<p>重新包装zBeforeUpload</p>\\n","modifierKind":[122]},{"name":"ngOnChanges","args":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":217,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":159,"deprecated":false,"deprecationMessage":""},{"name":"onNzChange","args":[{"name":"evt","type":"NzUploadChangeParam","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":201,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"evt","type":"NzUploadChangeParam","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setDefaultFileFilter","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":164,"deprecated":false,"deprecationMessage":"","modifierKind":[122]},{"name":"setDisabledState","args":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":227,"deprecated":false,"deprecationMessage":"","modifierKind":[158],"jsdoctags":[{"name":"isDisabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}},{"name":"setNzBeforeUpload","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":197,"deprecated":false,"deprecationMessage":""},{"name":"showFileErrorMessage","args":[{"name":"file","type":"NzUploadFile","deprecated":false,"deprecationMessage":""},{"name":"fileList","type":"NzUploadFile[]","deprecated":false,"deprecationMessage":""},{"name":"showValidateMessage","type":"boolean","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"FileValidateError | null","typeParameters":[],"line":303,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n显示文件验证错误\\n","description":"<p>显示文件验证错误</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":9099,"end":9103,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"file"},"type":"NzUploadFile","deprecated":false,"deprecationMessage":"","tagName":{"pos":9093,"end":9098,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>当前文件</p>\\n"},{"name":{"pos":9122,"end":9130,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fileList"},"type":"NzUploadFile[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":9116,"end":9121,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>文件列表</p>\\n"},{"name":{"pos":9149,"end":9168,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"showValidateMessage"},"type":"boolean","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":9143,"end":9148,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>是否显示</p>\\n"},{"tagName":{"pos":9181,"end":9188,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"writeValue","args":[{"name":"value","type":"NzUploadFile[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":213,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"NzUploadFile[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"T","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":6,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"_","type":"T","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}},{"name":"registerOnTouched","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":10,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}],"inheritance":{"file":"BaseControl"}}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  OnChanges,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  SimpleChange,\\r\\n  SimpleChanges,\\r\\n  TemplateRef\\r\\n} from \'@angular/core\';\\r\\nimport {\\r\\n  NzIconRenderTemplate,\\r\\n  NzUploadChangeParam,\\r\\n  NzUploadFile,\\r\\n  NzUploadListType,\\r\\n  NzUploadTransformFileType,\\r\\n  NzUploadType,\\r\\n  NzUploadXHRArgs,\\r\\n  UploadFilter,\\r\\n  NzShowUploadList\\r\\n} from \'ng-zorro-antd/upload\';\\r\\nimport { Observable, Subscription } from \'rxjs\';\\r\\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\r\\nimport { BaseControl } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NzMessageService } from \'ng-zorro-antd/message\';\\r\\nimport { NzxUtils } from \'@xmagic/nzx-antd/util\';\\r\\nimport { NzBytesPipe } from \'ng-zorro-antd/pipes\';\\r\\nimport { NzSafeAny } from \'ng-zorro-antd/core/types\';\\r\\n\\r\\nexport enum ErrorType {\\r\\n  /**\\r\\n   * 单文件大小限制,单位KB\\r\\n   */\\r\\n  FILE_SIZE = \'FILE_SIZE\',\\r\\n  /**\\r\\n   * 总文件大小限制\\r\\n   */\\r\\n  FILE_TOTAL_SIZE = \'FILE_TOTAL_SIZE\',\\r\\n  FILE_TYPE = \'FILE_TYPE\',\\r\\n  FILE_LIMIT = \'FILE_LIMIT\',\\r\\n  FILE_NAME_LENGTH = \'FILE_NAME_LENGTH\',\\r\\n  FILE_NAME_DUPLICATE = \'FILE_NAME_DUPLICATE\'\\r\\n}\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-upload\',\\r\\n  templateUrl: \'./upload.component.html\',\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NzxUploadComponent),\\r\\n      multi: true\\r\\n    },\\r\\n    NzBytesPipe\\r\\n  ]\\r\\n})\\r\\nexport class NzxUploadComponent extends BaseControl<NzUploadFile[]> implements ControlValueAccessor, OnInit, OnChanges {\\r\\n  nzFileList: NzUploadFile[] = [];\\r\\n  /**\\r\\n   * 自定义按钮或显示内容\\r\\n   */\\r\\n  @Input() nzxUploadButton?: string | TemplateRef<NzSafeAny>;\\r\\n  /**\\r\\n   * 上传的提示信息\\r\\n   */\\r\\n  @Input() nzxHint?: string;\\r\\n  /**\\r\\n   * 是否显示上传按钮, 如果是nzType=\\"drag\\" 隐藏按钮\\r\\n   */\\r\\n  @Input() nzxShowUploadButtonIcon?: boolean;\\r\\n  /**\\r\\n   * 上传按钮的图标\\r\\n   */\\r\\n  @Input() nzxUploadButtonIcon = \'cloud-upload\';\\r\\n  /**\\r\\n   * 错误信息映射\\r\\n   */\\r\\n  @Input() nzxValidateMessage?: { [validateKey: string]: string };\\r\\n  @Input() nzType: NzUploadType = \'select\';\\r\\n  /**\\r\\n   * 上传的文件个数限制\\r\\n   */\\r\\n  @Input() nzLimit = 0;\\r\\n  /**\\r\\n   * 文件名重复验证\\r\\n   */\\r\\n  @Input() nzxFileNameDuplicate?: boolean;\\r\\n  /**\\r\\n   * 文件名长度\\r\\n   */\\r\\n  @Input() nzxFileNameLength?: number;\\r\\n  /**\\r\\n   * 文件大小,单位kb\\r\\n   */\\r\\n  @Input() nzSize = 0;\\r\\n  /**\\r\\n   * 总文件大小,单位kb\\r\\n   */\\r\\n  @Input() nzTotalSize?: number;\\r\\n  @Input() nzFileType?: string | string[];\\r\\n  @Input() nzAccept?: string | string[];\\r\\n  @Input() nzAction?: string | ((file: NzUploadFile) => string | Observable<string>);\\r\\n  @Input() nzDirectory = false;\\r\\n  @Input() nzOpenFileDialogOnClick = true;\\r\\n  /**\\r\\n   * 是否显示验证错误提示信息\\r\\n   */\\r\\n  @Input() nzxShowValidateMessage?: boolean;\\r\\n  @Input() nzBeforeUpload?: (\\r\\n    file: NzUploadFile,\\r\\n    fileList: NzUploadFile[],\\r\\n    error: FileValidateError | null\\r\\n  ) => boolean | Observable<boolean>;\\r\\n  _nzBeforeUpload?: (file: NzUploadFile, fileList: NzUploadFile[]) => boolean | Observable<boolean>;\\r\\n  @Input() nzCustomRequest?: (item: NzUploadXHRArgs) => Subscription;\\r\\n  @Input() nzData?: {} | ((file: NzUploadFile) => {} | Observable<{}>);\\r\\n  @Input() nzFilter: UploadFilter[] = [];\\r\\n  @Input() nzDisabled?: boolean;\\r\\n  @Input() nzHeaders?: {} | ((file: NzUploadFile) => {} | Observable<{}>);\\r\\n  @Input() nzListType: NzUploadListType = \'text\';\\r\\n  @Input() nzMultiple?: boolean;\\r\\n  @Input() nzName = \'file\';\\r\\n  @Input() nzShowUploadList: boolean | NzShowUploadList = true;\\r\\n  @Input() nzShowButton = true;\\r\\n  @Input() nzWithCredentials?: boolean;\\r\\n  @Input() nzRemove?: (file: NzUploadFile) => boolean | Observable<boolean>;\\r\\n  @Input() nzPreview?: (file: NzUploadFile) => void;\\r\\n  @Input() nzPreviewFile?: (file: NzUploadFile) => Observable<string>;\\r\\n  @Input() nzPreviewIsImage?: (file: NzUploadFile) => boolean;\\r\\n  @Input() nzTransformFile?: (file: NzUploadFile) => NzUploadTransformFileType;\\r\\n  @Input() nzDownload?: (file: NzUploadFile) => void;\\r\\n  @Input() nzIconRender!: NzIconRenderTemplate | null;\\r\\n  @Input() nzFileListRender?: TemplateRef<void>;\\r\\n\\r\\n  @Output() readonly nzChange = new EventEmitter<NzUploadChangeParam>();\\r\\n  @Output() readonly nzFileListChange = new EventEmitter<NzUploadFile[]>();\\r\\n\\r\\n  readonly defaultValidateMessage: { [K: string]: string } = {\\r\\n    FILE_SIZE: \'文件 \\"{fileName}\\" 大小不能超过{fileSize}\',\\r\\n    FILE_TOTAL_SIZE: \'总上传文件大小不能超过{totalSize}\',\\r\\n    FILE_TYPE: \'上传的文件格式只能是 \\"{fileType}\',\\r\\n    FILE_LIMIT: \'最多允许上传{fileLimit}个文件\',\\r\\n    FILE_NAME_LENGTH: \'文件 \\"{fileName}\\" 名称长度不能大于{fileNameLength}个字符\',\\r\\n    FILE_NAME_DUPLICATE: \'已上传名称 \\"{fileName}\\" 相同的文件，不能重复上传\'\\r\\n  };\\r\\n\\r\\n  get isTemplateUploadButton() {\\r\\n    return this.nzxUploadButton instanceof TemplateRef;\\r\\n  }\\r\\n\\r\\n  constructor(protected messageService: NzMessageService, protected bytesPipe: NzBytesPipe) {\\r\\n    super();\\r\\n  }\\r\\n\\r\\n  ngOnInit() {\\r\\n    this.setDefaultFileFilter();\\r\\n    this.setNzBeforeUpload();\\r\\n  }\\r\\n\\r\\n  protected setDefaultFileFilter() {\\r\\n    const defaultFilter: UploadFilter = {\\r\\n      name: \'defaultFilter\',\\r\\n      fn: (fileList: NzUploadFile[]) => {\\r\\n        let error: FileValidateError | null = null;\\r\\n        const allFiles = (this.nzFileList || []).concat(fileList);\\r\\n        const list = [];\\r\\n\\r\\n        for (const file of fileList) {\\r\\n          const err = this.beforeUploadValidator(file, allFiles);\\r\\n          if (!err) {\\r\\n            list.push(file);\\r\\n          } else if (!error || err.errorType === ErrorType.FILE_TOTAL_SIZE) {\\r\\n            error = err;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (error && this.nzxShowValidateMessage !== false) {\\r\\n          this.messageService.error(error.message || \'文件不合法，请重新选择\');\\r\\n        }\\r\\n        return list;\\r\\n      }\\r\\n    };\\r\\n\\r\\n    if (!this.nzFilter) {\\r\\n      this.nzFilter = [defaultFilter];\\r\\n    }\\r\\n\\r\\n    if (!this.nzFilter.find(f => f.name === \'defaultFilter\')) {\\r\\n      this.nzFilter.push(defaultFilter);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  setNzBeforeUpload() {\\r\\n    this._nzBeforeUpload = this.getNzBeforeUpload();\\r\\n  }\\r\\n\\r\\n  onNzChange(evt: NzUploadChangeParam) {\\r\\n    this.onTouched();\\r\\n    if (evt.type === \'error\') {\\r\\n      this.nzFileList = this.nzFileList.filter(f => !f.error);\\r\\n    }\\r\\n\\r\\n    if (evt.type === \'success\' || evt.type === \'removed\') {\\r\\n      this.onChange(evt.fileList);\\r\\n    }\\r\\n    this.nzChange.emit(evt);\\r\\n  }\\r\\n\\r\\n  writeValue(value: NzUploadFile[]): void {\\r\\n    this.nzFileList = value || [];\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\\r\\n    if (changes.nzFilter && !changes.nzFilter.isFirstChange()) {\\r\\n      this.setDefaultFileFilter();\\r\\n    }\\r\\n\\r\\n    if (changes.nzBeforeUpload && !changes.nzBeforeUpload.isFirstChange()) {\\r\\n      this.setNzBeforeUpload();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  override setDisabledState(isDisabled: boolean) {\\r\\n    this.nzDisabled = isDisabled;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 重新包装zBeforeUpload\\r\\n   */\\r\\n  protected getNzBeforeUpload():\\r\\n    | ((file: NzUploadFile, fileList: NzUploadFile[]) => boolean | Observable<boolean>)\\r\\n    | undefined {\\r\\n    if (this.nzBeforeUpload) {\\r\\n      return (file, fileList) => this.nzBeforeUpload!(file, fileList, this.beforeUploadValidator(file, fileList));\\r\\n    }\\r\\n\\r\\n    return undefined;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 文件验证\\r\\n   * @param file 当前文件\\r\\n   * @param fileList 文件列表\\r\\n   * @protected\\r\\n   */\\r\\n  protected beforeUploadValidator(file: NzUploadFile, fileList: NzUploadFile[]): FileValidateError | null {\\r\\n    const messages = Object.assign({}, this.defaultValidateMessage, this.nzxValidateMessage);\\r\\n\\r\\n    // 文件类型\\r\\n    if (this.nzFileType != null) {\\r\\n      const nzFileTypes = typeof this.nzFileType === \'string\' ? [this.nzFileType] : this.nzFileType;\\r\\n      if (nzFileTypes.length > 0 && !nzFileTypes.includes(file.type!)) {\\r\\n        return this.getError(ErrorType.FILE_TYPE, file, messages, { fileType: this.nzFileType });\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // 单个文件大小\\r\\n    if (this.nzSize != null && this.nzSize > 0 && (file.size || 0) / 1024 > this.nzSize) {\\r\\n      return this.getError(ErrorType.FILE_SIZE, file, messages, {\\r\\n        fileSize: this.bytesPipe.transform(this.nzSize, 2, \'kB\'),\\r\\n        fileName: file.name\\r\\n      });\\r\\n    }\\r\\n\\r\\n    // 文件名长度\\r\\n    if (this.nzxFileNameLength && file.name.length > this.nzxFileNameLength) {\\r\\n      return this.getError(ErrorType.FILE_NAME_LENGTH, file, messages, {\\r\\n        fileNameLength: this.nzxFileNameLength,\\r\\n        fileName: file.name\\r\\n      });\\r\\n    }\\r\\n\\r\\n    // 文件名重复\\r\\n    if (this.nzxFileNameDuplicate === false && fileList.filter(f => f !== file).find(it => it.name === file.name)) {\\r\\n      return this.getError(ErrorType.FILE_NAME_DUPLICATE, file, messages, { fileName: file.name });\\r\\n    }\\r\\n\\r\\n    // 最大上传个数\\r\\n    if (this.nzLimit && fileList.length > this.nzLimit) {\\r\\n      return this.getError(ErrorType.FILE_LIMIT, file, messages, { fileLimit: this.nzLimit });\\r\\n    }\\r\\n\\r\\n    // 总文件大小\\r\\n    if (this.nzTotalSize && fileList.reduce((prev, curr) => (prev += curr.size || 0), 0) / 1024 > this.nzTotalSize) {\\r\\n      return this.getError(ErrorType.FILE_TOTAL_SIZE, file, messages, {\\r\\n        totalSize: this.bytesPipe.transform(this.nzTotalSize, 2, \'kB\')\\r\\n      });\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * 显示文件验证错误\\r\\n   * @param file 当前文件\\r\\n   * @param fileList 文件列表\\r\\n   * @param showValidateMessage 是否显示\\r\\n   * @private\\r\\n   */\\r\\n  private showFileErrorMessage(\\r\\n    file: NzUploadFile,\\r\\n    fileList: NzUploadFile[],\\r\\n    showValidateMessage?: boolean\\r\\n  ): FileValidateError | null {\\r\\n    const error = this.beforeUploadValidator(file, fileList);\\r\\n    if (error && showValidateMessage !== false) {\\r\\n      this.messageService.error(error.message || \'文件不合法\');\\r\\n    }\\r\\n    return error;\\r\\n  }\\r\\n\\r\\n  private getError(\\r\\n    errorType: ErrorType,\\r\\n    file: NzUploadFile,\\r\\n    messages: { [K: string]: string },\\r\\n    fmtData?: Record<string, NzSafeAny>\\r\\n  ): FileValidateError {\\r\\n    return {\\r\\n      errorType,\\r\\n      file,\\r\\n      message: NzxUtils.format(messages[errorType], fmtData)\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\nexport interface FileValidateError {\\r\\n  /**\\r\\n   * 验证错误类型\\r\\n   */\\r\\n  errorType: ErrorType;\\r\\n  /**\\r\\n   * 错误信息\\r\\n   */\\r\\n  message: string;\\r\\n  /**\\r\\n   * 错误的文件\\r\\n   */\\r\\n  file: NzUploadFile;\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"messageService","type":"NzMessageService","deprecated":false,"deprecationMessage":""},{"name":"bytesPipe","type":"NzBytesPipe","deprecated":false,"deprecationMessage":""}],"line":153,"jsdoctags":[{"name":"messageService","type":"NzMessageService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"bytesPipe","type":"NzBytesPipe","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":"BaseControl","implements":["ControlValueAccessor","OnInit","OnChanges"],"accessors":{"isTemplateUploadButton":{"name":"isTemplateUploadButton","getSignature":{"name":"isTemplateUploadButton","type":"","returnType":"","line":151}}},"templateData":"<nz-upload\\r\\n  [nzType]=\\"nzType\\"\\r\\n  [nzAccept]=\\"nzAccept\\"\\r\\n  [nzAction]=\\"nzAction\\"\\r\\n  [nzDirectory]=\\"nzDirectory\\"\\r\\n  [nzOpenFileDialogOnClick]=\\"nzOpenFileDialogOnClick\\"\\r\\n  [nzBeforeUpload]=\\"_nzBeforeUpload\\"\\r\\n  [nzCustomRequest]=\\"nzCustomRequest\\"\\r\\n  [nzData]=\\"nzData\\"\\r\\n  [nzFilter]=\\"nzFilter\\"\\r\\n  [(nzFileList)]=\\"nzFileList\\"\\r\\n  [nzDisabled]=\\"nzDisabled\\"\\r\\n  [nzHeaders]=\\"nzHeaders\\"\\r\\n  [nzListType]=\\"nzListType\\"\\r\\n  [nzMultiple]=\\"nzMultiple\\"\\r\\n  [nzName]=\\"nzName\\"\\r\\n  [nzShowUploadList]=\\"nzShowUploadList\\"\\r\\n  [nzShowButton]=\\"nzShowButton\\"\\r\\n  [nzWithCredentials]=\\"nzWithCredentials\\"\\r\\n  [nzRemove]=\\"nzRemove\\"\\r\\n  [nzPreview]=\\"nzPreview\\"\\r\\n  [nzPreviewFile]=\\"nzPreviewFile\\"\\r\\n  [nzPreviewIsImage]=\\"nzPreviewIsImage\\"\\r\\n  [nzTransformFile]=\\"nzTransformFile\\"\\r\\n  [nzDownload]=\\"nzDownload\\"\\r\\n  [nzIconRender]=\\"nzIconRender\\"\\r\\n  [nzFileListRender]=\\"nzFileListRender\\"\\r\\n  (nzChange)=\\"onNzChange($event)\\"\\r\\n  (nzFileListChange)=\\"nzFileListChange.emit($event)\\"\\r\\n>\\r\\n  <ng-container *nzStringTemplateOutlet=\\"nzxUploadButton; context: { $implicit: this, nzFileList: nzFileList }\\">\\r\\n    <button nz-button [disabled]=\\"nzDisabled\\" type=\\"button\\" *ngIf=\\"nzType === \'select\' && nzxShowUploadButtonIcon !== false\\">\\r\\n      <i *ngIf=\\"nzxUploadButtonIcon\\" nz-icon [nzType]=\\"nzxUploadButtonIcon\\"></i>\\r\\n      {{ nzxUploadButton || \'上传\' }}\\r\\n    </button>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container *ngIf=\\"nzType === \'drag\'\\">\\r\\n    <p class=\\"ant-upload-drag-icon\\">\\r\\n      <i *ngIf=\\"nzxUploadButtonIcon\\" nz-icon [nzType]=\\"nzxUploadButtonIcon\\"></i>\\r\\n    </p>\\r\\n    <p class=\\"ant-upload-text\\">点击或拖拽上传文件</p>\\r\\n    <p class=\\"ant-upload-hint\\">{{ nzxHint }}</p>\\r\\n  </ng-container>\\r\\n</nz-upload>\\r\\n"},{"name":"RepeatComponent","id":"component-RepeatComponent-b288c37f76dee6f1645442ae541aa3697c5074dcd6fb6f355379aa4531381efb90d5783b218b874a2df78e3e5993f669128a21d9fcc5c62ce1adb73456121483","file":"lib/repeat/repeat.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"nzx-repeat","styleUrls":["./repeat.component.less"],"styles":[],"templateUrl":["./repeat.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":12,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, OnInit } from \'@angular/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'nzx-repeat\',\\r\\n  templateUrl: \'./repeat.component.html\',\\r\\n  styleUrls: [\'./repeat.component.less\']\\r\\n})\\r\\nexport class RepeatComponent implements OnInit {\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":"","styleUrl":"./repeat.component.less"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":8},"implements":["OnInit"],"templateData":"<p>repeat works!</p>\\r\\n"}],"modules":[{"name":"NzxBetweenDatetimeModule","id":"module-NzxBetweenDatetimeModule-331bd62b1824553f35e5902ec66a2a1d883ab64502133f52305b508ef4c6127ef2c11562994ee9690f3f0617bda5f16fe032c3bf3302fcaba3709789be965459","description":"","deprecationMessage":"","deprecated":false,"file":"lib/between-datetime/between-datetime.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzxBetweenDatetimeComponent } from \'./between-datetime.component\';\\r\\nimport { FormsModule } from \'@angular/forms\';\\r\\nimport { NzDatePickerModule } from \'ng-zorro-antd/date-picker\';\\r\\nimport { NzxBetweenModule } from \'@xmagic/nzx-antd/between\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NzxBetweenDatetimeComponent],\\r\\n  imports: [CommonModule, FormsModule, NzxBetweenModule, NzDatePickerModule],\\r\\n  exports: [NzxBetweenDatetimeComponent]\\r\\n})\\r\\nexport class NzxBetweenDatetimeModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxBetweenDatetimeComponent"}]},{"type":"imports","elements":[{"name":"NzxBetweenModule"}]},{"type":"exports","elements":[{"name":"NzxBetweenDatetimeComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxBetweenInputModule","id":"module-NzxBetweenInputModule-67c917cee7ce51b532bacdadf8252ea8a1080ac7f8223f7592e71208bd67486938da04382b9d750ed90ba1916dce3a9bd6cb4f7ff0d93e7237179a9b589ae380","description":"","deprecationMessage":"","deprecated":false,"file":"lib/between-input/between-input.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzxBetweenInputComponent } from \'./between-input.component\';\\r\\nimport { NzInputModule } from \'ng-zorro-antd/input\';\\r\\nimport { FormsModule } from \'@angular/forms\';\\r\\nimport { NzInputNumberModule } from \'ng-zorro-antd/input-number\';\\r\\nimport { NzxBetweenModule } from \'@xmagic/nzx-antd/between\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NzxBetweenInputComponent],\\r\\n  imports: [CommonModule, FormsModule, NzxBetweenModule, NzInputModule, NzInputNumberModule],\\r\\n  exports: [NzxBetweenInputComponent]\\r\\n})\\r\\nexport class NzxBetweenInputModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxBetweenInputComponent"}]},{"type":"imports","elements":[{"name":"NzxBetweenModule"}]},{"type":"exports","elements":[{"name":"NzxBetweenInputComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxBetweenModule","id":"module-NzxBetweenModule-3d485e4a136317cb726fe529ab36aa2fb1a8f6e6e18e32f65872aa5c706c49c4994a367bce1d0f946eb43130acf535b1a908c6165f95893f8248bed1784de4a9","description":"","deprecationMessage":"","deprecated":false,"file":"lib/between/between.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzxBetweenComponent } from \'./between.component\';\\r\\nimport { NzInputModule } from \'ng-zorro-antd/input\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NzxBetweenComponent],\\r\\n  imports: [CommonModule, NzInputModule],\\r\\n  exports: [NzxBetweenComponent]\\r\\n})\\r\\nexport class NzxBetweenModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxBetweenComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NzxBetweenComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxBetweenTimeModule","id":"module-NzxBetweenTimeModule-7415e239d3838062620cf108979a833be5cfc5d62fd95d81e0a0758872f6f3711e76c6175b05af53af5df308d6174adada0fea7c62132509d8ac6e318e82b275","description":"","deprecationMessage":"","deprecated":false,"file":"lib/between-time/between-time.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzxBetweenTimeComponent } from \'./between-time.component\';\\r\\nimport { NzTimePickerModule } from \'ng-zorro-antd/time-picker\';\\r\\nimport { FormsModule } from \'@angular/forms\';\\r\\nimport { NzxBetweenModule } from \'@xmagic/nzx-antd/between\'\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NzxBetweenTimeComponent],\\r\\n  imports: [CommonModule, NzTimePickerModule, FormsModule, NzxBetweenModule],\\r\\n  exports: [NzxBetweenTimeComponent]\\r\\n})\\r\\nexport class NzxBetweenTimeModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxBetweenTimeComponent"}]},{"type":"imports","elements":[{"name":"NzxBetweenModule"}]},{"type":"exports","elements":[{"name":"NzxBetweenTimeComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxButtonModule","id":"module-NzxButtonModule-000f61d801f424baa7bb0469c18a49e3830447bf75d976ef1e893f0648f18df99fb1f13cf775e5067b0686930b376be17a78fb30de200477f4046a51817c388b","description":"","deprecationMessage":"","deprecated":false,"file":"lib/button/button.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzxButtonDirective } from \'./button.directive\';\\r\\nimport { NzButtonModule } from \'ng-zorro-antd/button\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NzxButtonDirective],\\r\\n  imports: [CommonModule, NzButtonModule],\\r\\n  exports: [NzxButtonDirective, NzButtonModule]\\r\\n})\\r\\nexport class NzxButtonModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxButtonDirective"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NzxButtonDirective"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxCheckboxModule","id":"module-NzxCheckboxModule-f3bfd3fcd228e6b2b31db805438d4c8c40cde556ec515c274b9a9b260913911bb0c5e0a797e816859b3636c550e02655bbca61ec131ed05ea9539d76f058d5f6","description":"","deprecationMessage":"","deprecated":false,"file":"lib/checkbox/checkbox.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzCheckboxModule } from \'ng-zorro-antd/checkbox\';\\r\\nimport { FormsModule, ReactiveFormsModule } from \'@angular/forms\';\\r\\nimport { NzxCheckboxComponent } from \'./checkbox.component\';\\r\\nimport { NzOutletModule } from \'ng-zorro-antd/core/outlet\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NzxCheckboxComponent],\\r\\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, NzCheckboxModule, NzOutletModule],\\r\\n  exports: [NzxCheckboxComponent]\\r\\n})\\r\\nexport class NzxCheckboxModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxCheckboxComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NzxCheckboxComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxDirectiveModule","id":"module-NzxDirectiveModule-7ab95f2d48e1043991b3bb0b1000c31aabb0f4912b5d9052374aa3d36ee0fb098053da13fbbab3eeecc594b7d16f60bb57c8373b054fed7c64c3c214e6d6abb3","description":"","deprecationMessage":"","deprecated":false,"file":"lib/directive/directive.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NamedTemplate } from \'./named-template\';\\r\\nimport { ClickOnceDirective } from \'./click.once.directive\';\\r\\nimport { FaIconDirective } from \'./fa-icon.directive\';\\r\\nimport { ClickOutsideDirective } from \'./click-outside.directive\';\\r\\nimport { LetDirective } from \'./let.directive\';\\r\\nimport { DownFileDirective } from \'./down-file.directive\';\\r\\nimport { AuthDirective } from \'./auth.directive\';\\r\\nimport { AuthNotDirective } from \'./auth.not.directive\';\\r\\nimport { NzxServiceModule } from \'@xmagic/nzx-antd/service\';\\r\\n\\r\\nconst DIRECTIVE = [\\r\\n  NamedTemplate,\\r\\n  ClickOnceDirective,\\r\\n  FaIconDirective,\\r\\n  ClickOutsideDirective,\\r\\n  LetDirective,\\r\\n  DownFileDirective,\\r\\n  AuthDirective,\\r\\n  AuthNotDirective\\r\\n];\\r\\n@NgModule({\\r\\n  declarations: [DIRECTIVE],\\r\\n  imports: [CommonModule, NzxServiceModule],\\r\\n  exports: [DIRECTIVE]\\r\\n})\\r\\nexport class NzxDirectiveModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"AuthDirective"},{"name":"AuthNotDirective"},{"name":"ClickOnceDirective"},{"name":"ClickOutsideDirective"},{"name":"DownFileDirective"},{"name":"FaIconDirective"},{"name":"LetDirective"},{"name":"NamedTemplate"}]},{"type":"imports","elements":[{"name":"NzxServiceModule"}]},{"type":"exports","elements":[{"name":"AuthDirective"},{"name":"AuthNotDirective"},{"name":"ClickOnceDirective"},{"name":"ClickOutsideDirective"},{"name":"DownFileDirective"},{"name":"FaIconDirective"},{"name":"LetDirective"},{"name":"NamedTemplate"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxHttpInterceptorModule","id":"module-NzxHttpInterceptorModule-b0b91c356bd200838074f2b632d40a17982ae97e7dd68a9e6c6c8eb4f6c8e30a3de1ec3ee55ff1d8c9b5d1fe80ff690d2c9e9993a806e6550244fce094290c5e","description":"","deprecationMessage":"","deprecated":false,"file":"lib/http-interceptor/http-interceptor.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { HttpBackend, HttpClientModule } from \'@angular/common/http\';\\nimport { httpInterceptors } from \'./http-interceptor.config\';\\nimport { AsyncHttpXhrBackend } from \'./xhr\';\\nimport { NzxModalModule } from \'@xmagic/nzx-antd/modal\';\\n\\n@NgModule({\\n  imports: [HttpClientModule, NzxModalModule],\\n  providers: [httpInterceptors, AsyncHttpXhrBackend, { provide: HttpBackend, useExisting: AsyncHttpXhrBackend }]\\n})\\nexport class NzxHttpInterceptorModule {}\\n","children":[{"type":"providers","elements":[{"name":"AsyncHttpXhrBackend"}]},{"type":"declarations","elements":[]},{"type":"imports","elements":[{"name":"NzxModalModule"}]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxLayoutPageModule","id":"module-NzxLayoutPageModule-bfd76e955e64487ec42b53691153939734ea426e197342a4a28aa03224d4aefcde27bb9db1e4ccf23a5c34f246f9d283f85aa2227ead5351b63d26b7453ba04c","description":"","deprecationMessage":"","deprecated":false,"file":"lib/layout-page/layout-page.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzxContentComponent } from \'./content.component\';\\r\\nimport { NzxPageComponent } from \'./page.component\';\\r\\nimport { NzxHeaderComponent } from \'./header.component\';\\r\\nimport { ObserversModule } from \'@angular/cdk/observers\';\\r\\n\\r\\nconst COMPONENTS = [NzxContentComponent, NzxPageComponent, NzxHeaderComponent];\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [COMPONENTS],\\r\\n  imports: [CommonModule, ObserversModule],\\r\\n  exports: [COMPONENTS]\\r\\n})\\r\\nexport class NzxLayoutPageModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxContentComponent"},{"name":"NzxHeaderComponent"},{"name":"NzxPageComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NzxContentComponent"},{"name":"NzxHeaderComponent"},{"name":"NzxPageComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxModalModule","id":"module-NzxModalModule-4eab8aa8ad3cb6b3f93edce702e7ed935bef06f1da23d519a294d92ae0f397801f85d34437b494e96b2096146027888d2077245f258b9c39393c8c53172bbef4","description":"","deprecationMessage":"","deprecated":false,"file":"lib/modal/modal.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { NzxModalWrapService } from \'./nz-modal-wrap.service\';\\r\\nimport { NzModalModule } from \'ng-zorro-antd/modal\';\\r\\nimport { NzxModalDragDirective } from \'./modal-drag.directive\';\\r\\nimport { NzxModalDragService } from \'./modal-drag.service\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NzxModalDragDirective],\\r\\n  imports: [NzModalModule],\\r\\n  exports: [NzxModalDragDirective],\\r\\n  providers: [NzxModalWrapService, NzxModalDragService]\\r\\n})\\r\\nexport class NzxModalModule {}\\r\\n","children":[{"type":"providers","elements":[{"name":"NzxModalDragService"},{"name":"NzxModalWrapService"}]},{"type":"declarations","elements":[{"name":"NzxModalDragDirective"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NzxModalDragDirective"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxPipeModule","id":"module-NzxPipeModule-d1b26b019d0a30a485f8d777b0f35a1433657b37ee7339d978ef366ca6e89b13e5f9852650ddad85eedd071a48412611d376a87c66d465509c1ca355fd97c234","description":"","deprecationMessage":"","deprecated":false,"file":"lib/pipe/pipe.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { MathPipe } from \'./math.pipe\';\\r\\nimport { DefaultifyPipe } from \'./defaultify.pipe\';\\r\\nimport { TrustHtmlPipe, TrustScriptPipe, TrustStylePipe, TrustUrlPipe } from \'./trust-resource.pipe\';\\r\\nimport { TimeUnitPipe } from \'./time-unit.pipe\';\\r\\nimport { ToAsyncPipe } from \'./to-async.pipe\';\\r\\nimport { FilterPipe } from \'./filter.pipe\';\\r\\nimport { DicPipe } from \'./dic.pipe\';\\r\\n\\r\\nconst PIPE = [\\r\\n  MathPipe,\\r\\n  DefaultifyPipe,\\r\\n  TrustUrlPipe,\\r\\n  TrustHtmlPipe,\\r\\n  TrustScriptPipe,\\r\\n  TrustStylePipe,\\r\\n  TimeUnitPipe,\\r\\n  ToAsyncPipe,\\r\\n  FilterPipe,\\r\\n  DicPipe\\r\\n];\\r\\n@NgModule({\\r\\n  declarations: [PIPE],\\r\\n  imports: [CommonModule],\\r\\n  exports: [PIPE]\\r\\n})\\r\\nexport class NzxPipeModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"DefaultifyPipe"},{"name":"DicPipe"},{"name":"FilterPipe"},{"name":"MathPipe"},{"name":"TimeUnitPipe"},{"name":"ToAsyncPipe"},{"name":"TrustHtmlPipe"},{"name":"TrustScriptPipe"},{"name":"TrustStylePipe"},{"name":"TrustUrlPipe"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"DefaultifyPipe"},{"name":"DicPipe"},{"name":"FilterPipe"},{"name":"MathPipe"},{"name":"TimeUnitPipe"},{"name":"ToAsyncPipe"},{"name":"TrustHtmlPipe"},{"name":"TrustScriptPipe"},{"name":"TrustStylePipe"},{"name":"TrustUrlPipe"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxRepeatModule","id":"module-NzxRepeatModule-76b02cd93b84c20582f70ff09d454dc0fe768dd72c89e151afefd0c705e2e3dc6512533ac698b4f04ba7737ca85fbbf8adefe7d03a47159a7e1be5efe595f74a","description":"","deprecationMessage":"","deprecated":false,"file":"lib/repeat/repeat.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { RepeatComponent } from \'./repeat.component\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [RepeatComponent],\\r\\n  imports: [CommonModule],\\r\\n  exports: [RepeatComponent]\\r\\n})\\r\\nexport class NzxRepeatModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"RepeatComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"RepeatComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxServiceModule","id":"module-NzxServiceModule-3aa46b6f39d9ac59c5b7b2cb155e53dc370f056ec06289857f37e9b53ecf232dff29d4173b9239012af91eb9cf6318d82f83e69c5262df3d5eb1b614323ff84d","description":"","deprecationMessage":"","deprecated":false,"file":"lib/service/service.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { FetcherService } from \'./fetcher.service\';\\r\\nimport { HttpClientModule } from \'@angular/common/http\';\\r\\nimport { NzxDownloadService } from \'./download.service\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [],\\r\\n  imports: [CommonModule, HttpClientModule],\\r\\n  providers: [FetcherService, NzxDownloadService]\\r\\n})\\r\\nexport class NzxServiceModule {}\\r\\n","children":[{"type":"providers","elements":[{"name":"FetcherService"},{"name":"NzxDownloadService"}]},{"type":"declarations","elements":[]},{"type":"imports","elements":[]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxSwitchModule","id":"module-NzxSwitchModule-5c205969956bff3d90a1df93bf863fb6796dd37cd3dc182c913234efbc320f1db4b12970a6828e61848e59ab8e5d32dde2459d9fe98dc5bbbdeb7393a78cb1f9","description":"","deprecationMessage":"","deprecated":false,"file":"lib/switch/switch.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzxSwitchComponent } from \'./switch.component\';\\r\\nimport { NzSwitchModule } from \'ng-zorro-antd/switch\';\\r\\nimport { FormsModule } from \'@angular/forms\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NzxSwitchComponent],\\r\\n  imports: [CommonModule, FormsModule, NzSwitchModule],\\r\\n  exports: [NzxSwitchComponent]\\r\\n})\\r\\nexport class NzxSwitchModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxSwitchComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NzxSwitchComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxTableModule","id":"module-NzxTableModule-ccf005a9ba1835fa8b7f604450f6cc8de71238e94f32494c7c1fc5af54a48f80ce2a419a077adde29086247beed513b0ef797c66ce7df8bec4df07ac6383c0d7","description":"","deprecationMessage":"","deprecated":false,"file":"lib/table/table.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzTableModule } from \'ng-zorro-antd/table\';\\r\\nimport { NzxTableComponent } from \'./table.component\';\\r\\nimport { NzxTableHeaderComponent } from \'./header/table-header/table-header.component\';\\r\\nimport { NzxColumnSettingComponent } from \'./header/column-setting/column-setting.component\';\\r\\nimport { NzResizableModule } from \'ng-zorro-antd/resizable\';\\r\\nimport { NzIconModule } from \'ng-zorro-antd/icon\';\\r\\nimport { NzPopoverModule } from \'ng-zorro-antd/popover\';\\r\\nimport { NzCheckboxModule } from \'ng-zorro-antd/checkbox\';\\r\\nimport { FormsModule, ReactiveFormsModule } from \'@angular/forms\';\\r\\nimport { DragDropModule } from \'@angular/cdk/drag-drop\';\\r\\nimport { NzDividerModule } from \'ng-zorro-antd/divider\';\\r\\nimport { NzDropDownModule } from \'ng-zorro-antd/dropdown\';\\r\\nimport { NzToolTipModule } from \'ng-zorro-antd/tooltip\';\\r\\nimport { NzxPipeModule } from \'@xmagic/nzx-antd/pipe\';\\r\\nimport { NzxServiceModule } from \'@xmagic/nzx-antd/service\';\\r\\nimport { NzOutletModule } from \'ng-zorro-antd/core/outlet\';\\r\\nimport { NzButtonModule } from \'ng-zorro-antd/button\';\\r\\n\\r\\nconst COMPONENT = [NzxTableComponent, NzxTableHeaderComponent, NzxColumnSettingComponent];\\r\\n@NgModule({\\r\\n  declarations: [COMPONENT],\\r\\n  imports: [\\r\\n    CommonModule,\\r\\n    FormsModule,\\r\\n    ReactiveFormsModule,\\r\\n    NzTableModule,\\r\\n    NzResizableModule,\\r\\n    NzIconModule,\\r\\n    NzPopoverModule,\\r\\n    NzCheckboxModule,\\r\\n    DragDropModule,\\r\\n    NzDividerModule,\\r\\n    NzDropDownModule,\\r\\n    NzToolTipModule,\\r\\n    NzxPipeModule,\\r\\n    NzxServiceModule,\\r\\n    NzOutletModule,\\r\\n    NzButtonModule\\r\\n  ],\\r\\n  exports: [COMPONENT]\\r\\n})\\r\\nexport class NzxTableModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxColumnSettingComponent"},{"name":"NzxTableComponent"},{"name":"NzxTableHeaderComponent"}]},{"type":"imports","elements":[{"name":"NzxServiceModule"}]},{"type":"exports","elements":[{"name":"NzxColumnSettingComponent"},{"name":"NzxTableComponent"},{"name":"NzxTableHeaderComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NzxUploadModule","id":"module-NzxUploadModule-3f27565e179000bb370210a1660033926b32f2ea79587b71ff87bd8d1ed6a6276e7a562c8d90463238e2b3094f4f8e465101a2fd36815a1bf54fb5253f745b0d","description":"","deprecationMessage":"","deprecated":false,"file":"lib/upload/upload.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NzxUploadComponent } from \'./upload.component\';\\r\\nimport { NzUploadModule } from \'ng-zorro-antd/upload\';\\r\\nimport { HttpClientModule } from \'@angular/common/http\';\\r\\nimport { FormsModule, ReactiveFormsModule } from \'@angular/forms\';\\r\\nimport { NzButtonModule } from \'ng-zorro-antd/button\';\\r\\nimport { NzIconModule } from \'ng-zorro-antd/icon\';\\r\\nimport { NzMessageModule } from \'ng-zorro-antd/message\';\\r\\nimport { NzOutletModule } from \'ng-zorro-antd/core/outlet\';\\r\\n\\r\\nconst COMPONENT = [NzxUploadComponent];\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [COMPONENT],\\r\\n  imports: [\\r\\n    CommonModule,\\r\\n    HttpClientModule,\\r\\n    FormsModule,\\r\\n    ReactiveFormsModule,\\r\\n    NzUploadModule,\\r\\n    NzMessageModule,\\r\\n    NzButtonModule,\\r\\n    NzIconModule,\\r\\n    NzOutletModule\\r\\n  ],\\r\\n  exports: [COMPONENT]\\r\\n})\\r\\nexport class NzxUploadModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NzxColumnSettingComponent"},{"name":"NzxTableComponent"},{"name":"NzxTableHeaderComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NzxColumnSettingComponent"},{"name":"NzxTableComponent"},{"name":"NzxTableHeaderComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"Checked","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxValue: [\'value-1\'], nzxOptions: getNzxOptions() })"},{"name":"ColspanHead","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzBordered: true,\\r\\n  nzxColumns: [\\r\\n    { nzShowCheckbox: true, nzText: \'测试\' },\\r\\n    {\\r\\n      thText: \'姓名\',\\r\\n      children: [\\r\\n        { name: \'firstName\', thText: \'FIRST_NAME\' },\\r\\n        { name: \'lastName\', thText: \'LAST_NAME\' }\\r\\n      ]\\r\\n    },\\r\\n    { name: \'org\', thText: \'部门\' }\\r\\n  ],\\r\\n  nzData: NzxUtils.clone(nzData)\\r\\n})"},{"name":"COMPONENT","ctype":"miscellaneous","subtype":"variable","file":"lib/table/table.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[NzxTableComponent, NzxTableHeaderComponent, NzxColumnSettingComponent]"},{"name":"COMPONENT","ctype":"miscellaneous","subtype":"variable","file":"lib/upload/upload.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[NzxUploadComponent]"},{"name":"COMPONENTS","ctype":"miscellaneous","subtype":"variable","file":"lib/layout-page/layout-page.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[NzxContentComponent, NzxPageComponent, NzxHeaderComponent]"},{"name":"context","ctype":"miscellaneous","subtype":"variable","file":"lib/test.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"require.context(\'./\', true, /\\\\.spec\\\\.ts$/)"},{"name":"DatePickerControl","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenComponent>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <nzx-between  [nzxSize]=\\"nzxSize\\"\\r\\n      [nzxDisabled]=\\"nzxDisabled\\"\\r\\n      [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n      [nzxStartDisabled]=\\"nzxStartDisabled\\">\\r\\n       <nz-date-picker start nzPlaceHolder=\\"开始控件\\" [nzSize]=\\"nzxSize\\" [nzDisabled]=\\"nzxDisabled || nzxStartDisabled\\"></nz-date-picker>\\r\\n       <nz-date-picker end nzPlaceHolder=\\"结束控件\\" [nzSize]=\\"nzxSize\\" [nzDisabled]=\\"nzxDisabled || nzxEndDisabled\\"></nz-date-picker>\\r\\n    </nzx-between>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template()"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template()"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">nzxColor</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">nzGhost</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzGhost\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px; \\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">dashed</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzType=\\"dashed\\"\\r\\n          nzGhost\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n       <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">text</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzType=\\"text\\"\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">link</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzType=\\"link\\"\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">disabled</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          disabled\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">disabled</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzType=\\"dashed\\"\\r\\n          nzGhost\\r\\n          disabled\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template()"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxOptions: getNzxOptions() })"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxColumns: [\\r\\n    { name: \'name\', thText: \'姓名\' },\\r\\n    { name: \'org\', thText: \'部门\' }\\r\\n  ],\\r\\n  nzData: NzxUtils.clone(nzData)\\r\\n})"},{"name":"DEFAULT_RESPONSE_SETTING","ctype":"miscellaneous","subtype":"variable","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"ResponseSetting","defaultValue":"{\\r\\n  code: \'code\',\\r\\n  message: \'message\',\\r\\n  data: \'result\',\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  success: response => response.body.code == 200,\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  timeout: error => error.code == 401,\\r\\n  forceLogout: () => false,\\r\\n  defaultError: error => error.code < 1024\\r\\n}","rawdescription":"默认配置","description":"<p>默认配置</p>\\n"},{"name":"DEFAULT_STATUS_MESSAGE_MAP","ctype":"miscellaneous","subtype":"variable","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"Record<string, string>","defaultValue":"{\\r\\n  0: \'请求网络错误，请检查网络是否正常\',\\r\\n  404: \'请求的地址不存在，请检查地址是否正确\',\\r\\n  403: \'您没有操作权限\',\\r\\n  other: \'请求发生错误，请联系管理员\'\\r\\n}","rawdescription":"默认状态错误信息","description":"<p>默认状态错误信息</p>\\n"},{"name":"defineProperty","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.defineProperty"},{"name":"DIRECTIVE","ctype":"miscellaneous","subtype":"variable","file":"lib/directive/directive.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  NamedTemplate,\\r\\n  ClickOnceDirective,\\r\\n  FaIconDirective,\\r\\n  ClickOutsideDirective,\\r\\n  LetDirective,\\r\\n  DownFileDirective,\\r\\n  AuthDirective,\\r\\n  AuthNotDirective\\r\\n]"},{"name":"DisabledOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i == 1) {\\r\\n      v.disabled = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"EndMaxDateTime","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ endMaxDateTime: new Date() })"},{"name":"EXCLUDE_PARAMS","ctype":"miscellaneous","subtype":"variable","file":"stories/index.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  \'setDisabledState\',\\r\\n  \'registerOnChange\',\\r\\n  \'registerOnTouched\',\\r\\n  \'onChange\',\\r\\n  \'onTouched\',\\r\\n  \'writeValue\',\\r\\n  \'ngModelChange\'\\r\\n]"},{"name":"FETCH_SETTING","ctype":"miscellaneous","subtype":"variable","file":"lib/table/const.ts","deprecated":false,"deprecationMessage":"","type":"FetchSetting","defaultValue":"{\\r\\n  pageIndexField: \'pageIndex\',\\r\\n  pageSizeField: \'pageSize\',\\r\\n  listField: \'list\',\\r\\n  totalField: \'total\',\\r\\n  method: \'post\',\\r\\n  responseType: \'json\'\\r\\n}"},{"name":"gOPD","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.getOwnPropertyDescriptor"},{"name":"hasOwn","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.prototype.hasOwnProperty"},{"name":"HIDE_CONTROL","ctype":"miscellaneous","subtype":"variable","file":"stories/index.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  table: { defaultValue: { summary: null } },\\r\\n  control: false\\r\\n}"},{"name":"HIDE_CONTROL_COMMONS","ctype":"miscellaneous","subtype":"variable","file":"stories/index.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"hideControlArgType(\'nzxValue\')","rawdescription":"隐藏属性","description":"<p>隐藏属性</p>\\n"},{"name":"HideOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i < 3) {\\r\\n      v.hide = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"HttpDefaultCodec","ctype":"miscellaneous","subtype":"variable","file":"lib/http-interceptor/http-default-encoder.ts","deprecated":false,"deprecationMessage":"","type":"HttpParameterCodec","defaultValue":"{\\r\\n  decodeKey: (key: string): string => {\\r\\n    return key;\\r\\n  },\\r\\n\\r\\n  decodeValue(value: string): string {\\r\\n    return value;\\r\\n  },\\r\\n\\r\\n  encodeKey(key: string): string {\\r\\n    return key;\\r\\n  },\\r\\n\\r\\n  encodeValue(value: string): string {\\r\\n    return value;\\r\\n  }\\r\\n}"},{"name":"httpInterceptors","ctype":"miscellaneous","subtype":"variable","file":"lib/http-interceptor/http-interceptor.config.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpLoadingInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpUrlInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpHeaderInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpParamsInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpCustomServerErrorInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpResponseParseInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true }\\r\\n]","rawdescription":"注意，中间件是有序的，谨慎调整下列中间件的顺序","description":"<p>注意，中间件是有序的，谨慎调整下列中间件的顺序</p>\\n"},{"name":"ImportInfo","ctype":"miscellaneous","subtype":"variable","file":".storybook/block/ImportInfo.tsx","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"() => {\\r\\n  const context = useContext(DocsContext);\\r\\n  console.log(context);\\r\\n  // @ts-ignore\\r\\n  const componentName = context.component?.name;\\r\\n  if (!componentName) {\\r\\n    return null;\\r\\n  }\\r\\n  const moduleName = componentName.replace(/(Component|Directive|Service|Pipe)$/, \'Module\');\\r\\n  const importName = componentName\\r\\n    .replace(/(^Nzx)|((Component|Directive|Service|Pipe)$)/g, \'\')\\r\\n    .replace(/\\\\w([A-Z])/g, \'-$1\')\\r\\n    .toLowerCase();\\r\\n  const importStatement = `import { ${moduleName} } from \'@xmagic/nzx-antd/${importName}\';`;\\r\\n  return (\\r\\n    <SyntaxHighlighter copyable bordered language=\\"ts\\">\\r\\n      {importStatement}\\r\\n    </SyntaxHighlighter>\\r\\n  );\\r\\n}"},{"name":"IndeterminateOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i < 3) {\\r\\n      v.indeterminate = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"IsIndex","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxColumns: [{ isIndex: true }, { name: \'name\', thText: \'姓名\' }, { name: \'org\', thText: \'部门\' }],\\r\\n  nzData: NzxUtils.clone(nzData)\\r\\n})"},{"name":"IsIndexName","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxColumns: [\\r\\n    { isIndex: true, thText: \'编号\' },\\r\\n    { name: \'name\', thText: \'姓名\' },\\r\\n    { name: \'org\', thText: \'部门\' }\\r\\n  ],\\r\\n  nzData: NzxUtils.clone(nzData)\\r\\n})"},{"name":"IsLoading","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzLoading: true,\\r\\n  nzxColumns: [\\r\\n    { name: \'name\', thText: \'姓名\' },\\r\\n    { name: \'org\', thText: \'部门\' }\\r\\n  ]\\r\\n})"},{"name":"LabelOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions()\\r\\n})"},{"name":"LOADING_ENABLED","ctype":"miscellaneous","subtype":"variable","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new HttpContextToken<boolean>(() => true)","rawdescription":"是否启用loading","description":"<p>是否启用loading</p>\\n"},{"name":"loadingService","ctype":"miscellaneous","subtype":"variable","file":"lib/service/loading.service.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new NzxLoadingService()"},{"name":"mdxMeta","ctype":"miscellaneous","subtype":"variable","file":"stories/@types/index.ts","deprecated":false,"deprecationMessage":"","type":"literal type"},{"name":"NgModelChangeOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    v.ngModelChange = action(\'ngModelChange\');\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"NzAllowClear","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzAllowClear: true })"},{"name":"nzData","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Array(10)\\r\\n  .fill(0)\\r\\n  .map<Record<string, NzSafeAny>>((m, i) => ({\\r\\n    name: xing[i % xing.length] + \'三\',\\r\\n    org: \'测试部门\',\\r\\n    firstName: xing[i % xing.length],\\r\\n    lastName: \'六\'\\r\\n  }))"},{"name":"NzGhost","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <div style=\\"padding: 8px; background: #bec8c8;\\">\\r\\n      <button nz-button [nzSize]=\\"nzSize\\" [disabled]=\\"disabled\\" [nzType]=\\"nzType\\" [nzGhost]=\\"nzGhost\\" [nzxColor]=\\"nzxColor\\">\\r\\n        测试按钮\\r\\n      </button>\\r\\n    </div>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"NzMode","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzMode: \'week\' })"},{"name":"NzShowCheckbox","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxColumns: [{ nzShowCheckbox: true }, { name: \'name\', thText: \'姓名\' }, { name: \'org\', thText: \'部门\' }],\\r\\n  nzData: NzxUtils.clone(nzData).map((v, i) => {\\r\\n    v.checked = i % 2 == 0;\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"NzSize","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzType","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxDisabled: true })"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxDisabled: true })"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxDisabled: true })"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxOptions: getNzxOptions(), nzxDisabled: true })"},{"name":"NzxEndDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzxEndDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndDisabled: true })"},{"name":"NzxEndDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndDisabled: true })"},{"name":"NzxEndDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndDisabled: true })"},{"name":"NzxFormUtils","ctype":"miscellaneous","subtype":"variable","file":"lib/util/form-utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new FormUtilsClass()"},{"name":"NzxSize","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzxSize","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxSize: \'large\' })"},{"name":"NzxSize","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxSize: \'large\' })"},{"name":"NzxSize","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxSize: \'large\' })"},{"name":"NzxStartDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzxStartDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartDisabled: true })"},{"name":"NzxStartDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartDisabled: true })"},{"name":"NzxStartDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartDisabled: true })"},{"name":"NzxType","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxType: \'number\' })"},{"name":"NzxUtils","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new UtilsClass()"},{"name":"page","ctype":"miscellaneous","subtype":"variable","file":".storybook/block/docPage.tsx","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"() => (\\r\\n  <>\\r\\n    <Title />\\r\\n    <Subtitle />\\r\\n    <Description />\\r\\n    <ImportInfo />\\r\\n    <Primary />\\r\\n    <H2>参数定义</H2>\\r\\n    <ArgsTable story={PRIMARY_STORY} />\\r\\n    <Stories title=\\"所有示例\\" includePrimary={false} />\\r\\n  </>\\r\\n)"},{"name":"PIPE","ctype":"miscellaneous","subtype":"variable","file":"lib/pipe/pipe.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  MathPipe,\\r\\n  DefaultifyPipe,\\r\\n  TrustUrlPipe,\\r\\n  TrustHtmlPipe,\\r\\n  TrustScriptPipe,\\r\\n  TrustStylePipe,\\r\\n  TimeUnitPipe,\\r\\n  ToAsyncPipe,\\r\\n  FilterPipe,\\r\\n  DicPipe\\r\\n]"},{"name":"require","ctype":"miscellaneous","subtype":"variable","file":"lib/test.ts","deprecated":false,"deprecationMessage":"","type":"literal type"},{"name":"ScrollTemplate","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxTableComponent>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <div style=\\"height: 50%; overflow: hidden;\\">\\r\\n        <nzx-table [nzData]=\\"nzData\\" [nzxColumns]=\\"nzxColumns\\" [nzFrontPagination]=\\"false\\" scrollY=\\"100%\\"></nzx-table>\\r\\n    </div>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"SelectControl","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <nzx-between  [nzxSize]=\\"nzxSize\\"\\r\\n      [nzxDisabled]=\\"nzxDisabled\\"\\r\\n      [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n      [nzxStartDisabled]=\\"nzxStartDisabled\\">\\r\\n       <nz-select start nzPlaceHolder=\\"开始控件\\" [nzOptions]=\\"nzOptions\\" [nzDisabled]=\\"nzxDisabled || nzxStartDisabled\\"></nz-select>\\r\\n       <nz-select end nzPlaceHolder=\\"结束控件\\" [nzOptions]=\\"nzOptions\\" [nzDisabled]=\\"nzxDisabled || nzxEndDisabled\\"></nz-select>\\r\\n    </nzx-between>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"ShowTime","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzShowTime: true })"},{"name":"ShowTimeEnd","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndShowTime: true })"},{"name":"ShowTimeStart","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartShowTime: true })"},{"name":"ShowToday","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzShowToday: true })"},{"name":"ShowTodayEnd","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndShowToday: true })"},{"name":"ShowTodayStart","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartShowToday: true })"},{"name":"SIZE_ARG_TYPE","ctype":"miscellaneous","subtype":"variable","file":"stories/index.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  control: \'inline-radio\',\\r\\n  options: [\'large\', \'default\', \'small\'],\\r\\n  defaultValue: \'default\'\\r\\n}"},{"name":"start","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new Date()"},{"name":"StartMinDate","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ startMinDateTime: start })"},{"name":"SYNCED_ENABLED","ctype":"miscellaneous","subtype":"variable","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new HttpContextToken<boolean>(() => false)","rawdescription":"启用同步请求","description":"<p>启用同步请求</p>\\n"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenComponent>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <nzx-between\\r\\n      [nzxSize]=\\"nzxSize\\"\\r\\n      [nzxDisabled]=\\"nzxDisabled\\"\\r\\n      [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n      [nzxStartDisabled]=\\"nzxStartDisabled\\">\\r\\n       <input nz-input start placeholder=\\"开始控件\\" [disabled]=\\"nzxDisabled || nzxStartDisabled\\">\\r\\n       <input nz-input end placeholder=\\"结束控件\\" [disabled]=\\"nzxDisabled || nzxEndDisabled\\">\\r\\n    </nzx-between>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenDatetimeComponent>","defaultValue":"storyFactory"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenInputComponent>","defaultValue":"storyFactory"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <button nz-button [nzSize]=\\"nzSize\\" [disabled]=\\"disabled\\" [nzType]=\\"nzType\\" [nzGhost]=\\"nzGhost\\" [nzxColor]=\\"nzxColor\\">\\r\\n      测试按钮\\r\\n    </button>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenTimeComponent>","defaultValue":"storyFactory"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(props: Partial<NzxCheckboxComponent>): Story<NzxCheckboxComponent> => {\\r\\n  return storyFactory(\\r\\n    props,\\r\\n    `\\r\\n    <nzx-checkbox\\r\\n        [(ngModel)]=\\"nzxValue\\"\\r\\n        (nzxBlur)=\\"nzxBlur($event)\\"\\r\\n        (nzxFocus)=\\"nzxFocus($event)\\"\\r\\n        [nzxDisabled]=\\"nzxDisabled\\"\\r\\n        [nzxLayout]=\\"nzxLayout\\"\\r\\n        [nzxOptions]=\\"nzxOptions\\" >\\r\\n    </nzx-checkbox>`\\r\\n  );\\r\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxTableComponent>","defaultValue":"storyFactory"},{"name":"toStr","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.prototype.toString"},{"name":"WidthFormItem","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenComponent>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <nz-form-item>\\r\\n      <nz-form-label>label1</nz-form-label>\\r\\n      <nz-form-control>\\r\\n        <nzx-between  [nzxSize]=\\"nzxSize\\"\\r\\n          [nzxDisabled]=\\"nzxDisabled\\"\\r\\n          [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n          [nzxStartDisabled]=\\"nzxStartDisabled\\">\\r\\n            <input nz-input start placeholder=\\"开始控件\\" [disabled]=\\"nzxDisabled || nzxStartDisabled\\">\\r\\n            <input nz-input end placeholder=\\"结束控件\\" [disabled]=\\"nzxDisabled || nzxEndDisabled\\">\\r\\n        </nzx-between>\\r\\n      </nz-form-control>\\r\\n    </nz-form-item>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"xing","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"\'赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨\'.split(\'\')"},{"name":"XSSI_PREFIX","ctype":"miscellaneous","subtype":"variable","file":"lib/http-interceptor/xhr.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"/^\\\\)]}\',?\\\\n/"}],"functions":[{"name":"assertTemplate","file":"lib/directive/auth.directive.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"property","type":"string","deprecated":false,"deprecationMessage":""},{"name":"templateRef","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":"property","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"templateRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getEndDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getEndMonthDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getEndWeekDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getEndYearDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getNzxOptions","file":"lib/checkbox/Checkbox.stories.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[],"returnType":"NzxCheckboxOption[]"},{"name":"getRealDateTime","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>获取Datetime 真实值</p>\\n","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"disabledDateType","type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"Date | null | undefined","jsdoctags":[{"name":{"pos":1902,"end":1906,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"date"},"type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"pos":1896,"end":1901,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>,</p>\\n"},{"name":{"pos":1919,"end":1935,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"disabledDateType"},"type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1913,"end":1918,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"getResponseUrl","file":"lib/http-interceptor/xhr.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determine an appropriate URL for the response, by checking either\\nXMLHttpRequest.responseURL or the X-Request-URL header.</p>\\n","args":[{"name":"xhr","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"returnType":"string | null","jsdoctags":[{"name":"xhr","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStartDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStartMonthDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStartWeekDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStartYearDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getTimeValue","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"value","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"literal type | null","jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"value","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"hideControlArgType","file":"stories/index.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>隐藏指定属性的control,　属性不隐藏</p>\\n","args":[{"name":"props","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"Record<string, InputType>","jsdoctags":[{"name":{"pos":935,"end":940,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"props"},"deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":929,"end":934,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>属性名称列表</p>\\n"}]},{"name":"isContentEmpty","file":"lib/layout-page/is-content-empty.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>用于校验 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 是否为空，自定义组件时蛮有用。</p>\\n","args":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"storyFactory","file":"stories/index.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>storybook 模板工程</p>\\n","args":[{"name":"props","type":"Partial","deprecated":false,"deprecationMessage":"","optional":true},{"name":"template","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"Story<T>","jsdoctags":[{"name":{"pos":609,"end":614,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"props"},"type":"Partial","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":603,"end":608,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>传递的参数</p>\\n"},{"name":{"pos":632,"end":640,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"template"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":626,"end":631,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>模板</p>\\n"}]},{"name":"synced","file":"lib/service/fetcher.service.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>模板字符串函数, 构造同步请求URL</p>\\n","args":[{"name":"url","type":"TemplateStringsArray","deprecated":false,"deprecationMessage":""},{"name":"keys","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"string","jsdoctags":[{"name":"url","type":"TemplateStringsArray","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"keys","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"text":"param"}},{"tagName":{"pos":435,"end":442,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>let value!: string;\\nthis.http.get<string>(&#39;url&#39;, { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res =&gt; (value = res));\\nconsole.log(value);</p>\\n"}]}],"typealiases":[{"name":"AsyncOption","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"lib/pipe/to-async.pipe.ts","deprecated":false,"deprecationMessage":"","description":"<p>异步请求信息</p>\\n","kind":187},{"name":"AuthGuardFnType","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"lib/service/auth-guard.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>权限路由守卫 使用函数处理</p>\\n","kind":178},{"name":"AuthGuardType","ctype":"miscellaneous","subtype":"typealias","rawtype":"AuthGuardFnType | T","file":"lib/service/auth-guard.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>权限路由守卫配置</p>\\n","kind":186},{"name":"CellSpanArgType","ctype":"miscellaneous","subtype":"typealias","rawtype":"literal type","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"","kind":181},{"name":"CellSpanType","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"<p>合并单元格参数类型</p>\\n","kind":178},{"name":"DatetimeValueType","ctype":"miscellaneous","subtype":"typealias","rawtype":"Record<string | Date | null>","file":"lib/between-datetime/datetime-utils.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177},{"name":"DicItem","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"lib/service/dic.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>字典项定义, {label: string; value: any}</p>\\n","kind":187},{"name":"DisabledDateType","ctype":"miscellaneous","subtype":"typealias","rawtype":"Date | null | ","file":"lib/between-datetime/datetime-utils.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"DownloadOption","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"lib/service/download.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>下载文件配置信息</p>\\n","kind":187},{"name":"FetchParams","ctype":"miscellaneous","subtype":"typealias","rawtype":" | Promise<T> | T","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>请求参数</p>\\n","kind":186},{"name":"FetchValidatorParams","ctype":"miscellaneous","subtype":"typealias","rawtype":" | Promise<T> | T","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>验证器请求参数</p>\\n","kind":186},{"name":"FilterMatcherFn","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"lib/pipe/filter.pipe.ts","deprecated":false,"deprecationMessage":"","description":"","kind":178},{"name":"IconSizeType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"xs\\" | \\"lg\\" | \\"sm\\" | \\"1x\\" | \\"2x\\" | \\"3x\\" | \\"4x\\" | \\"5x\\" | \\"6x\\" | \\"7x\\" | \\"8x\\" | \\"9x\\" | \\"10x\\"","file":"lib/directive/fa-icon.directive.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"InputValueType","ctype":"miscellaneous","subtype":"typealias","rawtype":"Record<string | string | number | null> | null","file":"lib/between-input/between-input.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"Method","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"get\\" | \\"GET\\" | \\"delete\\" | \\"DELETE\\" | \\"head\\" | \\"HEAD\\" | \\"options\\" | \\"OPTIONS\\" | \\"post\\" | \\"POST\\" | \\"put\\" | \\"PUT\\" | \\"patch\\" | \\"PATCH\\" | \\"purge\\" | \\"PURGE\\" | \\"link\\" | \\"LINK\\" | \\"unlink\\" | \\"UNLINK\\"","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"NzxClassType","ctype":"miscellaneous","subtype":"typealias","rawtype":"string | string[] | Set<string> | literal type","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"NzxColorType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"success\\" | \\"warning\\" | \\"info\\" | \\"error\\" | \\"gray\\" | \\"teal\\" | \\"cyan\\" | string","file":"lib/button/button.directive.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"NzxStyleType","ctype":"miscellaneous","subtype":"typealias","rawtype":"literal type | null","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"NzxTableSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"NzTableSize | \\"mini\\"","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"<p>表格大小</p>\\n","kind":186},{"name":"OptionItem","ctype":"miscellaneous","subtype":"typealias","rawtype":"Omit<NzxCheckboxOption | \\"indeterminate\\" | \\"ngModelChange\\">","file":"lib/checkbox/checkbox.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177},{"name":"TreeChildren","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","description":"","kind":178},{"name":"ValidatorOption","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>远程验证器配置</p>\\n","kind":187}],"enumerations":[{"name":"ErrorType","childs":[{"name":"FILE_SIZE","deprecated":false,"deprecationMessage":"","value":"FILE_SIZE"},{"name":"FILE_TOTAL_SIZE","deprecated":false,"deprecationMessage":"","value":"FILE_TOTAL_SIZE"},{"name":"FILE_TYPE","deprecated":false,"deprecationMessage":"","value":"FILE_TYPE"},{"name":"FILE_LIMIT","deprecated":false,"deprecationMessage":"","value":"FILE_LIMIT"},{"name":"FILE_NAME_LENGTH","deprecated":false,"deprecationMessage":"","value":"FILE_NAME_LENGTH"},{"name":"FILE_NAME_DUPLICATE","deprecated":false,"deprecationMessage":"","value":"FILE_NAME_DUPLICATE"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"","file":"lib/upload/upload.component.ts"}],"groupedVariables":{"lib/checkbox/Checkbox.stories.ts":[{"name":"Checked","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxValue: [\'value-1\'], nzxOptions: getNzxOptions() })"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxOptions: getNzxOptions() })"},{"name":"DisabledOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i == 1) {\\r\\n      v.disabled = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"HideOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i < 3) {\\r\\n      v.hide = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"IndeterminateOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    if (i < 3) {\\r\\n      v.indeterminate = true;\\r\\n    }\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"LabelOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions()\\r\\n})"},{"name":"NgModelChangeOption","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxOptions: getNzxOptions().map((v, i) => {\\r\\n    v.ngModelChange = action(\'ngModelChange\');\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxOptions: getNzxOptions(), nzxDisabled: true })"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/checkbox/Checkbox.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(props: Partial<NzxCheckboxComponent>): Story<NzxCheckboxComponent> => {\\r\\n  return storyFactory(\\r\\n    props,\\r\\n    `\\r\\n    <nzx-checkbox\\r\\n        [(ngModel)]=\\"nzxValue\\"\\r\\n        (nzxBlur)=\\"nzxBlur($event)\\"\\r\\n        (nzxFocus)=\\"nzxFocus($event)\\"\\r\\n        [nzxDisabled]=\\"nzxDisabled\\"\\r\\n        [nzxLayout]=\\"nzxLayout\\"\\r\\n        [nzxOptions]=\\"nzxOptions\\" >\\r\\n    </nzx-checkbox>`\\r\\n  );\\r\\n}"}],"lib/table/Table.stories.ts":[{"name":"ColspanHead","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzBordered: true,\\r\\n  nzxColumns: [\\r\\n    { nzShowCheckbox: true, nzText: \'测试\' },\\r\\n    {\\r\\n      thText: \'姓名\',\\r\\n      children: [\\r\\n        { name: \'firstName\', thText: \'FIRST_NAME\' },\\r\\n        { name: \'lastName\', thText: \'LAST_NAME\' }\\r\\n      ]\\r\\n    },\\r\\n    { name: \'org\', thText: \'部门\' }\\r\\n  ],\\r\\n  nzData: NzxUtils.clone(nzData)\\r\\n})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxColumns: [\\r\\n    { name: \'name\', thText: \'姓名\' },\\r\\n    { name: \'org\', thText: \'部门\' }\\r\\n  ],\\r\\n  nzData: NzxUtils.clone(nzData)\\r\\n})"},{"name":"IsIndex","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxColumns: [{ isIndex: true }, { name: \'name\', thText: \'姓名\' }, { name: \'org\', thText: \'部门\' }],\\r\\n  nzData: NzxUtils.clone(nzData)\\r\\n})"},{"name":"IsIndexName","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxColumns: [\\r\\n    { isIndex: true, thText: \'编号\' },\\r\\n    { name: \'name\', thText: \'姓名\' },\\r\\n    { name: \'org\', thText: \'部门\' }\\r\\n  ],\\r\\n  nzData: NzxUtils.clone(nzData)\\r\\n})"},{"name":"IsLoading","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzLoading: true,\\r\\n  nzxColumns: [\\r\\n    { name: \'name\', thText: \'姓名\' },\\r\\n    { name: \'org\', thText: \'部门\' }\\r\\n  ]\\r\\n})"},{"name":"nzData","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Array(10)\\r\\n  .fill(0)\\r\\n  .map<Record<string, NzSafeAny>>((m, i) => ({\\r\\n    name: xing[i % xing.length] + \'三\',\\r\\n    org: \'测试部门\',\\r\\n    firstName: xing[i % xing.length],\\r\\n    lastName: \'六\'\\r\\n  }))"},{"name":"NzShowCheckbox","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({\\r\\n  nzxColumns: [{ nzShowCheckbox: true }, { name: \'name\', thText: \'姓名\' }, { name: \'org\', thText: \'部门\' }],\\r\\n  nzData: NzxUtils.clone(nzData).map((v, i) => {\\r\\n    v.checked = i % 2 == 0;\\r\\n    return v;\\r\\n  })\\r\\n})"},{"name":"ScrollTemplate","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxTableComponent>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <div style=\\"height: 50%; overflow: hidden;\\">\\r\\n        <nzx-table [nzData]=\\"nzData\\" [nzxColumns]=\\"nzxColumns\\" [nzFrontPagination]=\\"false\\" scrollY=\\"100%\\"></nzx-table>\\r\\n    </div>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxTableComponent>","defaultValue":"storyFactory"},{"name":"xing","ctype":"miscellaneous","subtype":"variable","file":"lib/table/Table.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"\'赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨\'.split(\'\')"}],"lib/table/table.module.ts":[{"name":"COMPONENT","ctype":"miscellaneous","subtype":"variable","file":"lib/table/table.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[NzxTableComponent, NzxTableHeaderComponent, NzxColumnSettingComponent]"}],"lib/upload/upload.module.ts":[{"name":"COMPONENT","ctype":"miscellaneous","subtype":"variable","file":"lib/upload/upload.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[NzxUploadComponent]"}],"lib/layout-page/layout-page.module.ts":[{"name":"COMPONENTS","ctype":"miscellaneous","subtype":"variable","file":"lib/layout-page/layout-page.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[NzxContentComponent, NzxPageComponent, NzxHeaderComponent]"}],"lib/test.ts":[{"name":"context","ctype":"miscellaneous","subtype":"variable","file":"lib/test.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"require.context(\'./\', true, /\\\\.spec\\\\.ts$/)"},{"name":"require","ctype":"miscellaneous","subtype":"variable","file":"lib/test.ts","deprecated":false,"deprecationMessage":"","type":"literal type"}],"lib/between/Between.stories.ts":[{"name":"DatePickerControl","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenComponent>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <nzx-between  [nzxSize]=\\"nzxSize\\"\\r\\n      [nzxDisabled]=\\"nzxDisabled\\"\\r\\n      [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n      [nzxStartDisabled]=\\"nzxStartDisabled\\">\\r\\n       <nz-date-picker start nzPlaceHolder=\\"开始控件\\" [nzSize]=\\"nzxSize\\" [nzDisabled]=\\"nzxDisabled || nzxStartDisabled\\"></nz-date-picker>\\r\\n       <nz-date-picker end nzPlaceHolder=\\"结束控件\\" [nzSize]=\\"nzxSize\\" [nzDisabled]=\\"nzxDisabled || nzxEndDisabled\\"></nz-date-picker>\\r\\n    </nzx-between>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzxEndDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzxSize","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzxStartDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"SelectControl","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <nzx-between  [nzxSize]=\\"nzxSize\\"\\r\\n      [nzxDisabled]=\\"nzxDisabled\\"\\r\\n      [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n      [nzxStartDisabled]=\\"nzxStartDisabled\\">\\r\\n       <nz-select start nzPlaceHolder=\\"开始控件\\" [nzOptions]=\\"nzOptions\\" [nzDisabled]=\\"nzxDisabled || nzxStartDisabled\\"></nz-select>\\r\\n       <nz-select end nzPlaceHolder=\\"结束控件\\" [nzOptions]=\\"nzOptions\\" [nzDisabled]=\\"nzxDisabled || nzxEndDisabled\\"></nz-select>\\r\\n    </nzx-between>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenComponent>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <nzx-between\\r\\n      [nzxSize]=\\"nzxSize\\"\\r\\n      [nzxDisabled]=\\"nzxDisabled\\"\\r\\n      [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n      [nzxStartDisabled]=\\"nzxStartDisabled\\">\\r\\n       <input nz-input start placeholder=\\"开始控件\\" [disabled]=\\"nzxDisabled || nzxStartDisabled\\">\\r\\n       <input nz-input end placeholder=\\"结束控件\\" [disabled]=\\"nzxDisabled || nzxEndDisabled\\">\\r\\n    </nzx-between>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"WidthFormItem","ctype":"miscellaneous","subtype":"variable","file":"lib/between/Between.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenComponent>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <nz-form-item>\\r\\n      <nz-form-label>label1</nz-form-label>\\r\\n      <nz-form-control>\\r\\n        <nzx-between  [nzxSize]=\\"nzxSize\\"\\r\\n          [nzxDisabled]=\\"nzxDisabled\\"\\r\\n          [nzxEndDisabled]=\\"nzxEndDisabled\\"\\r\\n          [nzxStartDisabled]=\\"nzxStartDisabled\\">\\r\\n            <input nz-input start placeholder=\\"开始控件\\" [disabled]=\\"nzxDisabled || nzxStartDisabled\\">\\r\\n            <input nz-input end placeholder=\\"结束控件\\" [disabled]=\\"nzxDisabled || nzxEndDisabled\\">\\r\\n        </nzx-between>\\r\\n      </nz-form-control>\\r\\n    </nz-form-item>\\r\\n    `\\r\\n  };\\r\\n}"}],"lib/between-datetime/BetweenDatetime.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template()"},{"name":"EndMaxDateTime","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ endMaxDateTime: new Date() })"},{"name":"NzAllowClear","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzAllowClear: true })"},{"name":"NzMode","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzMode: \'week\' })"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxDisabled: true })"},{"name":"NzxEndDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndDisabled: true })"},{"name":"NzxSize","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxSize: \'large\' })"},{"name":"NzxStartDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartDisabled: true })"},{"name":"ShowTime","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzShowTime: true })"},{"name":"ShowTimeEnd","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndShowTime: true })"},{"name":"ShowTimeStart","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartShowTime: true })"},{"name":"ShowToday","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzShowToday: true })"},{"name":"ShowTodayEnd","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndShowToday: true })"},{"name":"ShowTodayStart","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartShowToday: true })"},{"name":"start","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new Date()"},{"name":"StartMinDate","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ startMinDateTime: start })"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/between-datetime/BetweenDatetime.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenDatetimeComponent>","defaultValue":"storyFactory"}],"lib/between-input/BetweenInput.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template()"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxDisabled: true })"},{"name":"NzxEndDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndDisabled: true })"},{"name":"NzxSize","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxSize: \'large\' })"},{"name":"NzxStartDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartDisabled: true })"},{"name":"NzxType","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxType: \'number\' })"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/between-input/BetweenInput.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenInputComponent>","defaultValue":"storyFactory"}],"lib/button/Button.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">nzxColor</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">nzGhost</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzGhost\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px; \\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">dashed</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzType=\\"dashed\\"\\r\\n          nzGhost\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n       <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">text</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzType=\\"text\\"\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">link</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzType=\\"link\\"\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">disabled</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          disabled\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <div style=\\"margin-bottom: 10px\\">\\r\\n        <label class=\\"doc-label\\">disabled</label>\\r\\n        <button\\r\\n          nz-button\\r\\n          *ngFor=\\"let color of [\'success\', \'warning\', \'info\', \'error\', \'gray\', \'teal\', \'cyan\']\\"\\r\\n          nzType=\\"dashed\\"\\r\\n          nzGhost\\r\\n          disabled\\r\\n          [nzxColor]=\\"color\\" style=\\"margin-right: 10px;\\">\\r\\n          {{color}}\\r\\n        </button>\\r\\n      </div>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"NzGhost","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <div style=\\"padding: 8px; background: #bec8c8;\\">\\r\\n      <button nz-button [nzSize]=\\"nzSize\\" [disabled]=\\"disabled\\" [nzType]=\\"nzType\\" [nzGhost]=\\"nzGhost\\" [nzxColor]=\\"nzxColor\\">\\r\\n        测试按钮\\r\\n      </button>\\r\\n    </div>\\r\\n    `\\r\\n  };\\r\\n}"},{"name":"NzSize","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"NzType","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/button/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<>","defaultValue":"args => {\\r\\n  return {\\r\\n    props: args,\\r\\n    template: `\\r\\n    <button nz-button [nzSize]=\\"nzSize\\" [disabled]=\\"disabled\\" [nzType]=\\"nzType\\" [nzGhost]=\\"nzGhost\\" [nzxColor]=\\"nzxColor\\">\\r\\n      测试按钮\\r\\n    </button>\\r\\n    `\\r\\n  };\\r\\n}"}],"lib/between-time/BetweenTime.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template()"},{"name":"NzxDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxDisabled: true })"},{"name":"NzxEndDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxEndDisabled: true })"},{"name":"NzxSize","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxSize: \'large\' })"},{"name":"NzxStartDisabled","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template({ nzxStartDisabled: true })"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"lib/between-time/BetweenTime.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NzxBetweenTimeComponent>","defaultValue":"storyFactory"}],"lib/nzx-antd.service.ts":[{"name":"DEFAULT_RESPONSE_SETTING","ctype":"miscellaneous","subtype":"variable","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"ResponseSetting","defaultValue":"{\\r\\n  code: \'code\',\\r\\n  message: \'message\',\\r\\n  data: \'result\',\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  success: response => response.body.code == 200,\\r\\n  // tslint:disable-next-line:triple-equals\\r\\n  timeout: error => error.code == 401,\\r\\n  forceLogout: () => false,\\r\\n  defaultError: error => error.code < 1024\\r\\n}","rawdescription":"默认配置","description":"<p>默认配置</p>\\n"},{"name":"DEFAULT_STATUS_MESSAGE_MAP","ctype":"miscellaneous","subtype":"variable","file":"lib/nzx-antd.service.ts","deprecated":false,"deprecationMessage":"","type":"Record<string, string>","defaultValue":"{\\r\\n  0: \'请求网络错误，请检查网络是否正常\',\\r\\n  404: \'请求的地址不存在，请检查地址是否正确\',\\r\\n  403: \'您没有操作权限\',\\r\\n  other: \'请求发生错误，请联系管理员\'\\r\\n}","rawdescription":"默认状态错误信息","description":"<p>默认状态错误信息</p>\\n"}],"lib/util/utils.ts":[{"name":"defineProperty","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.defineProperty"},{"name":"gOPD","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.getOwnPropertyDescriptor"},{"name":"hasOwn","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.prototype.hasOwnProperty"},{"name":"NzxUtils","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new UtilsClass()"},{"name":"toStr","ctype":"miscellaneous","subtype":"variable","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.prototype.toString"}],"lib/directive/directive.module.ts":[{"name":"DIRECTIVE","ctype":"miscellaneous","subtype":"variable","file":"lib/directive/directive.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  NamedTemplate,\\r\\n  ClickOnceDirective,\\r\\n  FaIconDirective,\\r\\n  ClickOutsideDirective,\\r\\n  LetDirective,\\r\\n  DownFileDirective,\\r\\n  AuthDirective,\\r\\n  AuthNotDirective\\r\\n]"}],"stories/index.ts":[{"name":"EXCLUDE_PARAMS","ctype":"miscellaneous","subtype":"variable","file":"stories/index.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  \'setDisabledState\',\\r\\n  \'registerOnChange\',\\r\\n  \'registerOnTouched\',\\r\\n  \'onChange\',\\r\\n  \'onTouched\',\\r\\n  \'writeValue\',\\r\\n  \'ngModelChange\'\\r\\n]"},{"name":"HIDE_CONTROL","ctype":"miscellaneous","subtype":"variable","file":"stories/index.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  table: { defaultValue: { summary: null } },\\r\\n  control: false\\r\\n}"},{"name":"HIDE_CONTROL_COMMONS","ctype":"miscellaneous","subtype":"variable","file":"stories/index.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"hideControlArgType(\'nzxValue\')","rawdescription":"隐藏属性","description":"<p>隐藏属性</p>\\n"},{"name":"SIZE_ARG_TYPE","ctype":"miscellaneous","subtype":"variable","file":"stories/index.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  control: \'inline-radio\',\\r\\n  options: [\'large\', \'default\', \'small\'],\\r\\n  defaultValue: \'default\'\\r\\n}"}],"lib/table/const.ts":[{"name":"FETCH_SETTING","ctype":"miscellaneous","subtype":"variable","file":"lib/table/const.ts","deprecated":false,"deprecationMessage":"","type":"FetchSetting","defaultValue":"{\\r\\n  pageIndexField: \'pageIndex\',\\r\\n  pageSizeField: \'pageSize\',\\r\\n  listField: \'list\',\\r\\n  totalField: \'total\',\\r\\n  method: \'post\',\\r\\n  responseType: \'json\'\\r\\n}"}],"lib/http-interceptor/http-default-encoder.ts":[{"name":"HttpDefaultCodec","ctype":"miscellaneous","subtype":"variable","file":"lib/http-interceptor/http-default-encoder.ts","deprecated":false,"deprecationMessage":"","type":"HttpParameterCodec","defaultValue":"{\\r\\n  decodeKey: (key: string): string => {\\r\\n    return key;\\r\\n  },\\r\\n\\r\\n  decodeValue(value: string): string {\\r\\n    return value;\\r\\n  },\\r\\n\\r\\n  encodeKey(key: string): string {\\r\\n    return key;\\r\\n  },\\r\\n\\r\\n  encodeValue(value: string): string {\\r\\n    return value;\\r\\n  }\\r\\n}"}],"lib/http-interceptor/http-interceptor.config.ts":[{"name":"httpInterceptors","ctype":"miscellaneous","subtype":"variable","file":"lib/http-interceptor/http-interceptor.config.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpLoadingInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpUrlInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpHeaderInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpParamsInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpCustomServerErrorInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpResponseParseInterceptor, multi: true },\\r\\n  { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true }\\r\\n]","rawdescription":"注意，中间件是有序的，谨慎调整下列中间件的顺序","description":"<p>注意，中间件是有序的，谨慎调整下列中间件的顺序</p>\\n"}],".storybook/block/ImportInfo.tsx":[{"name":"ImportInfo","ctype":"miscellaneous","subtype":"variable","file":".storybook/block/ImportInfo.tsx","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"() => {\\r\\n  const context = useContext(DocsContext);\\r\\n  console.log(context);\\r\\n  // @ts-ignore\\r\\n  const componentName = context.component?.name;\\r\\n  if (!componentName) {\\r\\n    return null;\\r\\n  }\\r\\n  const moduleName = componentName.replace(/(Component|Directive|Service|Pipe)$/, \'Module\');\\r\\n  const importName = componentName\\r\\n    .replace(/(^Nzx)|((Component|Directive|Service|Pipe)$)/g, \'\')\\r\\n    .replace(/\\\\w([A-Z])/g, \'-$1\')\\r\\n    .toLowerCase();\\r\\n  const importStatement = `import { ${moduleName} } from \'@xmagic/nzx-antd/${importName}\';`;\\r\\n  return (\\r\\n    <SyntaxHighlighter copyable bordered language=\\"ts\\">\\r\\n      {importStatement}\\r\\n    </SyntaxHighlighter>\\r\\n  );\\r\\n}"}],"lib/service/fetcher.service.ts":[{"name":"LOADING_ENABLED","ctype":"miscellaneous","subtype":"variable","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new HttpContextToken<boolean>(() => true)","rawdescription":"是否启用loading","description":"<p>是否启用loading</p>\\n"},{"name":"SYNCED_ENABLED","ctype":"miscellaneous","subtype":"variable","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new HttpContextToken<boolean>(() => false)","rawdescription":"启用同步请求","description":"<p>启用同步请求</p>\\n"}],"lib/service/loading.service.ts":[{"name":"loadingService","ctype":"miscellaneous","subtype":"variable","file":"lib/service/loading.service.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new NzxLoadingService()"}],"stories/@types/index.ts":[{"name":"mdxMeta","ctype":"miscellaneous","subtype":"variable","file":"stories/@types/index.ts","deprecated":false,"deprecationMessage":"","type":"literal type"}],"lib/util/form-utils.ts":[{"name":"NzxFormUtils","ctype":"miscellaneous","subtype":"variable","file":"lib/util/form-utils.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new FormUtilsClass()"}],".storybook/block/docPage.tsx":[{"name":"page","ctype":"miscellaneous","subtype":"variable","file":".storybook/block/docPage.tsx","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"() => (\\r\\n  <>\\r\\n    <Title />\\r\\n    <Subtitle />\\r\\n    <Description />\\r\\n    <ImportInfo />\\r\\n    <Primary />\\r\\n    <H2>参数定义</H2>\\r\\n    <ArgsTable story={PRIMARY_STORY} />\\r\\n    <Stories title=\\"所有示例\\" includePrimary={false} />\\r\\n  </>\\r\\n)"}],"lib/pipe/pipe.module.ts":[{"name":"PIPE","ctype":"miscellaneous","subtype":"variable","file":"lib/pipe/pipe.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  MathPipe,\\r\\n  DefaultifyPipe,\\r\\n  TrustUrlPipe,\\r\\n  TrustHtmlPipe,\\r\\n  TrustScriptPipe,\\r\\n  TrustStylePipe,\\r\\n  TimeUnitPipe,\\r\\n  ToAsyncPipe,\\r\\n  FilterPipe,\\r\\n  DicPipe\\r\\n]"}],"lib/http-interceptor/xhr.ts":[{"name":"XSSI_PREFIX","ctype":"miscellaneous","subtype":"variable","file":"lib/http-interceptor/xhr.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"/^\\\\)]}\',?\\\\n/"}]},"groupedFunctions":{"lib/directive/auth.directive.ts":[{"name":"assertTemplate","file":"lib/directive/auth.directive.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"property","type":"string","deprecated":false,"deprecationMessage":""},{"name":"templateRef","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":"property","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"templateRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"lib/between-datetime/datetime-utils.ts":[{"name":"getEndDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getEndMonthDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getEndWeekDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getEndYearDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getRealDateTime","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>获取Datetime 真实值</p>\\n","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"disabledDateType","type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"Date | null | undefined","jsdoctags":[{"name":{"pos":1902,"end":1906,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"date"},"type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"pos":1896,"end":1901,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>,</p>\\n"},{"name":{"pos":1919,"end":1935,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"disabledDateType"},"type":"DisabledDateType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1913,"end":1918,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]},{"name":"getStartDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStartMonthDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStartWeekDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStartYearDate","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getTimeValue","file":"lib/between-datetime/datetime-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":""},{"name":"value","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"literal type | null","jsdoctags":[{"name":"date","type":"Date","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"value","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"lib/checkbox/Checkbox.stories.ts":[{"name":"getNzxOptions","file":"lib/checkbox/Checkbox.stories.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[],"returnType":"NzxCheckboxOption[]"}],"lib/http-interceptor/xhr.ts":[{"name":"getResponseUrl","file":"lib/http-interceptor/xhr.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determine an appropriate URL for the response, by checking either\\nXMLHttpRequest.responseURL or the X-Request-URL header.</p>\\n","args":[{"name":"xhr","type":"NzSafeAny","deprecated":false,"deprecationMessage":""}],"returnType":"string | null","jsdoctags":[{"name":"xhr","type":"NzSafeAny","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"stories/index.ts":[{"name":"hideControlArgType","file":"stories/index.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>隐藏指定属性的control,　属性不隐藏</p>\\n","args":[{"name":"props","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"Record<string, InputType>","jsdoctags":[{"name":{"pos":935,"end":940,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"props"},"deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":929,"end":934,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>属性名称列表</p>\\n"}]},{"name":"storyFactory","file":"stories/index.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>storybook 模板工程</p>\\n","args":[{"name":"props","type":"Partial","deprecated":false,"deprecationMessage":"","optional":true},{"name":"template","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"Story<T>","jsdoctags":[{"name":{"pos":609,"end":614,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"props"},"type":"Partial","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":603,"end":608,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>传递的参数</p>\\n"},{"name":{"pos":632,"end":640,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"template"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":626,"end":631,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>模板</p>\\n"}]}],"lib/layout-page/is-content-empty.ts":[{"name":"isContentEmpty","file":"lib/layout-page/is-content-empty.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>用于校验 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 是否为空，自定义组件时蛮有用。</p>\\n","args":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"element","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"lib/service/fetcher.service.ts":[{"name":"synced","file":"lib/service/fetcher.service.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>模板字符串函数, 构造同步请求URL</p>\\n","args":[{"name":"url","type":"TemplateStringsArray","deprecated":false,"deprecationMessage":""},{"name":"keys","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"string","jsdoctags":[{"name":"url","type":"TemplateStringsArray","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"keys","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"text":"param"}},{"tagName":{"pos":435,"end":442,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>let value!: string;\\nthis.http.get<string>(&#39;url&#39;, { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res =&gt; (value = res));\\nconsole.log(value);</p>\\n"}]}]},"groupedEnumerations":{"lib/upload/upload.component.ts":[{"name":"ErrorType","childs":[{"name":"FILE_SIZE","deprecated":false,"deprecationMessage":"","value":"FILE_SIZE"},{"name":"FILE_TOTAL_SIZE","deprecated":false,"deprecationMessage":"","value":"FILE_TOTAL_SIZE"},{"name":"FILE_TYPE","deprecated":false,"deprecationMessage":"","value":"FILE_TYPE"},{"name":"FILE_LIMIT","deprecated":false,"deprecationMessage":"","value":"FILE_LIMIT"},{"name":"FILE_NAME_LENGTH","deprecated":false,"deprecationMessage":"","value":"FILE_NAME_LENGTH"},{"name":"FILE_NAME_DUPLICATE","deprecated":false,"deprecationMessage":"","value":"FILE_NAME_DUPLICATE"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"","file":"lib/upload/upload.component.ts"}]},"groupedTypeAliases":{"lib/pipe/to-async.pipe.ts":[{"name":"AsyncOption","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"lib/pipe/to-async.pipe.ts","deprecated":false,"deprecationMessage":"","description":"<p>异步请求信息</p>\\n","kind":187}],"lib/service/auth-guard.service.ts":[{"name":"AuthGuardFnType","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"lib/service/auth-guard.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>权限路由守卫 使用函数处理</p>\\n","kind":178},{"name":"AuthGuardType","ctype":"miscellaneous","subtype":"typealias","rawtype":"AuthGuardFnType | T","file":"lib/service/auth-guard.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>权限路由守卫配置</p>\\n","kind":186}],"lib/table/table.type.ts":[{"name":"CellSpanArgType","ctype":"miscellaneous","subtype":"typealias","rawtype":"literal type","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"","kind":181},{"name":"CellSpanType","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"<p>合并单元格参数类型</p>\\n","kind":178},{"name":"NzxClassType","ctype":"miscellaneous","subtype":"typealias","rawtype":"string | string[] | Set<string> | literal type","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"NzxStyleType","ctype":"miscellaneous","subtype":"typealias","rawtype":"literal type | null","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"NzxTableSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"NzTableSize | \\"mini\\"","file":"lib/table/table.type.ts","deprecated":false,"deprecationMessage":"","description":"<p>表格大小</p>\\n","kind":186}],"lib/between-datetime/datetime-utils.ts":[{"name":"DatetimeValueType","ctype":"miscellaneous","subtype":"typealias","rawtype":"Record<string | Date | null>","file":"lib/between-datetime/datetime-utils.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177},{"name":"DisabledDateType","ctype":"miscellaneous","subtype":"typealias","rawtype":"Date | null | ","file":"lib/between-datetime/datetime-utils.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186}],"lib/service/dic.service.ts":[{"name":"DicItem","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"lib/service/dic.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>字典项定义, {label: string; value: any}</p>\\n","kind":187}],"lib/service/download.service.ts":[{"name":"DownloadOption","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"lib/service/download.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>下载文件配置信息</p>\\n","kind":187}],"lib/service/fetcher.service.ts":[{"name":"FetchParams","ctype":"miscellaneous","subtype":"typealias","rawtype":" | Promise<T> | T","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>请求参数</p>\\n","kind":186},{"name":"FetchValidatorParams","ctype":"miscellaneous","subtype":"typealias","rawtype":" | Promise<T> | T","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>验证器请求参数</p>\\n","kind":186},{"name":"Method","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"get\\" | \\"GET\\" | \\"delete\\" | \\"DELETE\\" | \\"head\\" | \\"HEAD\\" | \\"options\\" | \\"OPTIONS\\" | \\"post\\" | \\"POST\\" | \\"put\\" | \\"PUT\\" | \\"patch\\" | \\"PATCH\\" | \\"purge\\" | \\"PURGE\\" | \\"link\\" | \\"LINK\\" | \\"unlink\\" | \\"UNLINK\\"","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"ValidatorOption","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"lib/service/fetcher.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>远程验证器配置</p>\\n","kind":187}],"lib/pipe/filter.pipe.ts":[{"name":"FilterMatcherFn","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"lib/pipe/filter.pipe.ts","deprecated":false,"deprecationMessage":"","description":"","kind":178}],"lib/directive/fa-icon.directive.ts":[{"name":"IconSizeType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"xs\\" | \\"lg\\" | \\"sm\\" | \\"1x\\" | \\"2x\\" | \\"3x\\" | \\"4x\\" | \\"5x\\" | \\"6x\\" | \\"7x\\" | \\"8x\\" | \\"9x\\" | \\"10x\\"","file":"lib/directive/fa-icon.directive.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186}],"lib/between-input/between-input.component.ts":[{"name":"InputValueType","ctype":"miscellaneous","subtype":"typealias","rawtype":"Record<string | string | number | null> | null","file":"lib/between-input/between-input.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186}],"lib/button/button.directive.ts":[{"name":"NzxColorType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"success\\" | \\"warning\\" | \\"info\\" | \\"error\\" | \\"gray\\" | \\"teal\\" | \\"cyan\\" | string","file":"lib/button/button.directive.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186}],"lib/checkbox/checkbox.component.ts":[{"name":"OptionItem","ctype":"miscellaneous","subtype":"typealias","rawtype":"Omit<NzxCheckboxOption | \\"indeterminate\\" | \\"ngModelChange\\">","file":"lib/checkbox/checkbox.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177}],"lib/util/utils.ts":[{"name":"TreeChildren","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"lib/util/utils.ts","deprecated":false,"deprecationMessage":"","description":"","kind":178}]}},"routes":[],"coverage":{"count":26,"status":"medium","files":[{"filePath":".storybook/block/ImportInfo.tsx","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ImportInfo","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":".storybook/block/docPage.tsx","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"page","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"EndMaxDateTime","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzAllowClear","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzMode","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxEndDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxSize","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxStartDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ShowTime","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ShowTimeEnd","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ShowTimeStart","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ShowToday","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ShowTodayEnd","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ShowTodayStart","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"start","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"StartMinDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/BetweenDatetime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/between-datetime.component.ts","type":"component","linktype":"component","name":"NzxBetweenDatetimeComponent","coveragePercent":80,"coverageCount":"58/72","status":"very-good"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getEndDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getEndMonthDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getEndWeekDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getEndYearDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getRealDateTime","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getStartDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getStartMonthDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getStartWeekDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getStartYearDate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-datetime/datetime-utils.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getTimeValue","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-input/BetweenInput.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-input/BetweenInput.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-input/BetweenInput.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxEndDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-input/BetweenInput.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxSize","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-input/BetweenInput.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxStartDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-input/BetweenInput.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxType","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-input/BetweenInput.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-input/between-input.component.ts","type":"component","linktype":"component","name":"NzxBetweenInputComponent","coveragePercent":67,"coverageCount":"21/31","status":"good"},{"filePath":"lib/between-time/BetweenTime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-time/BetweenTime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-time/BetweenTime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxEndDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-time/BetweenTime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxSize","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-time/BetweenTime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxStartDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-time/BetweenTime.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between-time/between-time.component.ts","type":"component","linktype":"component","name":"NzxBetweenTimeComponent","coveragePercent":74,"coverageCount":"52/70","status":"good"},{"filePath":"lib/between/Between.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DatePickerControl","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between/Between.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between/Between.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxEndDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between/Between.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxSize","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between/Between.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxStartDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between/Between.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"SelectControl","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between/Between.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between/Between.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WidthFormItem","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/between/between.component.ts","type":"component","linktype":"component","name":"NzxBetweenComponent","coveragePercent":83,"coverageCount":"5/6","status":"very-good"},{"filePath":"lib/button/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/button/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzGhost","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/button/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzSize","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/button/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzType","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/button/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/button/button.directive.ts","type":"directive","linktype":"directive","name":"NzxButtonDirective","coveragePercent":50,"coverageCount":"3/6","status":"medium"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"component","linktype":"component","name":"FakeComponent","coveragePercent":0,"coverageCount":"0/8","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getNzxOptions","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Checked","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DisabledOption","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"HideOption","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"IndeterminateOption","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LabelOption","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NgModelChangeOption","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxDisabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/Checkbox.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/checkbox/checkbox.component.ts","type":"component","linktype":"component","name":"NzxCheckboxComponent","coveragePercent":33,"coverageCount":"6/18","status":"medium"},{"filePath":"lib/checkbox/checkbox.component.ts","type":"interface","linktype":"interface","name":"NzxCheckboxOption","coveragePercent":90,"coverageCount":"10/11","status":"very-good"},{"filePath":"lib/directive/auth.directive.ts","type":"directive","linktype":"directive","name":"AuthDirective","coveragePercent":28,"coverageCount":"6/21","status":"medium"},{"filePath":"lib/directive/auth.directive.ts","type":"class","linktype":"classe","name":"AuthContext","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"lib/directive/auth.directive.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"assertTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/directive/auth.not.directive.ts","type":"directive","linktype":"directive","name":"AuthNotDirective","coveragePercent":34,"coverageCount":"9/26","status":"medium"},{"filePath":"lib/directive/click-outside.directive.ts","type":"directive","linktype":"directive","name":"ClickOutsideDirective","coveragePercent":3,"coverageCount":"1/28","status":"low"},{"filePath":"lib/directive/click.once.directive.ts","type":"directive","linktype":"directive","name":"ClickOnceDirective","coveragePercent":44,"coverageCount":"4/9","status":"medium"},{"filePath":"lib/directive/directive.module.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DIRECTIVE","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/directive/down-file.directive.ts","type":"directive","linktype":"directive","name":"DownFileDirective","coveragePercent":63,"coverageCount":"7/11","status":"good"},{"filePath":"lib/directive/fa-icon.directive.ts","type":"directive","linktype":"directive","name":"FaIconDirective","coveragePercent":4,"coverageCount":"1/22","status":"low"},{"filePath":"lib/directive/let.directive.ts","type":"directive","linktype":"directive","name":"LetDirective","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"lib/directive/let.directive.ts","type":"class","linktype":"classe","name":"LetContext","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"lib/directive/named-template.ts","type":"directive","linktype":"directive","name":"NamedTemplate","coveragePercent":33,"coverageCount":"2/6","status":"medium"},{"filePath":"lib/http-interceptor/http-custom-server-error.interceptor.ts","type":"interceptor","linktype":"interceptor","name":"HttpCustomServerErrorInterceptor","coveragePercent":40,"coverageCount":"2/5","status":"medium"},{"filePath":"lib/http-interceptor/http-default-encoder.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"HttpDefaultCodec","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/http-interceptor/http-error.interceptor.ts","type":"interceptor","linktype":"interceptor","name":"HttpErrorInterceptor","coveragePercent":50,"coverageCount":"2/4","status":"medium"},{"filePath":"lib/http-interceptor/http-header.interceptor.ts","type":"interceptor","linktype":"interceptor","name":"HttpHeaderInterceptor","coveragePercent":33,"coverageCount":"1/3","status":"medium"},{"filePath":"lib/http-interceptor/http-interceptor.config.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"httpInterceptors","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/http-interceptor/http-loading.interceptor.ts","type":"interceptor","linktype":"interceptor","name":"HttpLoadingInterceptor","coveragePercent":42,"coverageCount":"3/7","status":"medium"},{"filePath":"lib/http-interceptor/http-loading.service.ts","type":"injectable","linktype":"injectable","name":"HttpLoadingService","coveragePercent":40,"coverageCount":"2/5","status":"medium"},{"filePath":"lib/http-interceptor/http-notify.service.ts","type":"injectable","linktype":"injectable","name":"HttpNotifyService","coveragePercent":37,"coverageCount":"3/8","status":"medium"},{"filePath":"lib/http-interceptor/http-params.interceptor.ts","type":"interceptor","linktype":"interceptor","name":"HttpParamsInterceptor","coveragePercent":20,"coverageCount":"1/5","status":"low"},{"filePath":"lib/http-interceptor/http-response-parse.interceptor.ts","type":"interceptor","linktype":"interceptor","name":"HttpResponseParseInterceptor","coveragePercent":20,"coverageCount":"1/5","status":"low"},{"filePath":"lib/http-interceptor/http-url.interceptor.ts","type":"interceptor","linktype":"interceptor","name":"HttpUrlInterceptor","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"lib/http-interceptor/http.model.ts","type":"class","linktype":"classe","name":"HttpError","coveragePercent":83,"coverageCount":"5/6","status":"very-good"},{"filePath":"lib/http-interceptor/http.model.ts","type":"interface","linktype":"interface","name":"ResponseModel","coveragePercent":50,"coverageCount":"2/4","status":"medium"},{"filePath":"lib/http-interceptor/logout.service.ts","type":"injectable","linktype":"injectable","name":"LogoutService","coveragePercent":37,"coverageCount":"3/8","status":"medium"},{"filePath":"lib/http-interceptor/logout.service.ts","type":"interface","linktype":"interface","name":"LogoutType","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"lib/http-interceptor/xhr.ts","type":"injectable","linktype":"injectable","name":"AsyncHttpXhrBackend","coveragePercent":66,"coverageCount":"2/3","status":"good"},{"filePath":"lib/http-interceptor/xhr.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getResponseUrl","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/http-interceptor/xhr.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"XSSI_PREFIX","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/layout-page/content.component.ts","type":"component","linktype":"component","name":"NzxContentComponent","coveragePercent":37,"coverageCount":"3/8","status":"medium"},{"filePath":"lib/layout-page/header.component.ts","type":"component","linktype":"component","name":"NzxHeaderComponent","coveragePercent":28,"coverageCount":"2/7","status":"medium"},{"filePath":"lib/layout-page/is-content-empty.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"isContentEmpty","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/layout-page/layout-page.module.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"COMPONENTS","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/layout-page/page.component.ts","type":"component","linktype":"component","name":"NzxPageComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"lib/modal/modal-drag.directive.ts","type":"directive","linktype":"directive","name":"NzxModalDragDirective","coveragePercent":33,"coverageCount":"1/3","status":"medium"},{"filePath":"lib/modal/modal-drag.service.ts","type":"injectable","linktype":"injectable","name":"NzxModalDragService","coveragePercent":54,"coverageCount":"6/11","status":"good"},{"filePath":"lib/modal/nz-modal-wrap.service.ts","type":"injectable","linktype":"injectable","name":"NzxModalWrapService","coveragePercent":7,"coverageCount":"1/13","status":"low"},{"filePath":"lib/nzx-antd.service.ts","type":"injectable","linktype":"injectable","name":"NzxAntdService","coveragePercent":81,"coverageCount":"9/11","status":"very-good"},{"filePath":"lib/nzx-antd.service.ts","type":"interface","linktype":"interface","name":"DicSetting","coveragePercent":100,"coverageCount":"4/4","status":"very-good"},{"filePath":"lib/nzx-antd.service.ts","type":"interface","linktype":"interface","name":"HttpErrorBean","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"lib/nzx-antd.service.ts","type":"interface","linktype":"interface","name":"HttpRequestOptions","coveragePercent":10,"coverageCount":"1/10","status":"low"},{"filePath":"lib/nzx-antd.service.ts","type":"interface","linktype":"interface","name":"ResponseSetting","coveragePercent":100,"coverageCount":"9/9","status":"very-good"},{"filePath":"lib/nzx-antd.service.ts","type":"interface","linktype":"interface","name":"TableSetting","coveragePercent":100,"coverageCount":"8/8","status":"very-good"},{"filePath":"lib/nzx-antd.service.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DEFAULT_RESPONSE_SETTING","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/nzx-antd.service.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DEFAULT_STATUS_MESSAGE_MAP","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/pipe/defaultify.pipe.ts","type":"pipe","linktype":"pipe","name":"DefaultifyPipe","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/pipe/dic.pipe.ts","type":"pipe","linktype":"pipe","name":"DicPipe","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/pipe/filter.pipe.ts","type":"pipe","linktype":"pipe","name":"FilterPipe","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/pipe/math.pipe.ts","type":"pipe","linktype":"pipe","name":"MathPipe","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/pipe/pipe.module.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"PIPE","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/pipe/time-unit.pipe.ts","type":"pipe","linktype":"pipe","name":"TimeUnitPipe","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/pipe/to-async.pipe.ts","type":"pipe","linktype":"pipe","name":"ToAsyncPipe","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/pipe/trust-resource.pipe.ts","type":"pipe","linktype":"pipe","name":"TrustHtmlPipe","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/pipe/trust-resource.pipe.ts","type":"pipe","linktype":"pipe","name":"TrustScriptPipe","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/pipe/trust-resource.pipe.ts","type":"pipe","linktype":"pipe","name":"TrustStylePipe","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/pipe/trust-resource.pipe.ts","type":"pipe","linktype":"pipe","name":"TrustUrlPipe","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/repeat/repeat.component.ts","type":"component","linktype":"component","name":"RepeatComponent","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"lib/service/auth-guard.service.ts","type":"guard","linktype":"guard","name":"NzxAuthGuardService","coveragePercent":14,"coverageCount":"1/7","status":"low"},{"filePath":"lib/service/dic.service.ts","type":"injectable","linktype":"injectable","name":"DicService","coveragePercent":84,"coverageCount":"11/13","status":"very-good"},{"filePath":"lib/service/download.service.ts","type":"injectable","linktype":"injectable","name":"NzxDownloadService","coveragePercent":60,"coverageCount":"3/5","status":"good"},{"filePath":"lib/service/fetcher.service.ts","type":"injectable","linktype":"injectable","name":"FetcherService","coveragePercent":75,"coverageCount":"6/8","status":"good"},{"filePath":"lib/service/fetcher.service.ts","type":"interface","linktype":"interface","name":"FetchOptions","coveragePercent":90,"coverageCount":"9/10","status":"very-good"},{"filePath":"lib/service/fetcher.service.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"synced","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/service/fetcher.service.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LOADING_ENABLED","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/service/fetcher.service.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"SYNCED_ENABLED","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"lib/service/loading.service.ts","type":"injectable","linktype":"injectable","name":"NzxLoadingService","coveragePercent":50,"coverageCount":"3/6","status":"medium"},{"filePath":"lib/service/loading.service.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"loadingService","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/service/storage.service.ts","type":"injectable","linktype":"injectable","name":"NzxStorageService","coveragePercent":62,"coverageCount":"5/8","status":"good"},{"filePath":"lib/switch/switch.component.ts","type":"component","linktype":"component","name":"NzxSwitchComponent","coveragePercent":44,"coverageCount":"8/18","status":"medium"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ColspanHead","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"IsIndex","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"IsIndexName","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"IsLoading","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"nzData","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzShowCheckbox","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ScrollTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/Table.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"xing","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/const.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"FETCH_SETTING","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/header/column-setting/column-setting.component.ts","type":"component","linktype":"component","name":"NzxColumnSettingComponent","coveragePercent":65,"coverageCount":"13/20","status":"good"},{"filePath":"lib/table/header/table-header/table-header.component.ts","type":"component","linktype":"component","name":"NzxTableHeaderComponent","coveragePercent":9,"coverageCount":"1/11","status":"low"},{"filePath":"lib/table/table.component.ts","type":"component","linktype":"component","name":"NzxTableComponent","coveragePercent":85,"coverageCount":"98/115","status":"very-good"},{"filePath":"lib/table/table.module.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"COMPONENT","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/table/table.type.ts","type":"interface","linktype":"interface","name":"CellEventArg","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"lib/table/table.type.ts","type":"interface","linktype":"interface","name":"FetchSetting","coveragePercent":100,"coverageCount":"7/7","status":"very-good"},{"filePath":"lib/table/table.type.ts","type":"interface","linktype":"interface","name":"HeaderEventArg","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"lib/table/table.type.ts","type":"interface","linktype":"interface","name":"IndexAttr","coveragePercent":83,"coverageCount":"5/6","status":"very-good"},{"filePath":"lib/table/table.type.ts","type":"interface","linktype":"interface","name":"NzxColumn","coveragePercent":24,"coverageCount":"12/49","status":"low"},{"filePath":"lib/table/table.type.ts","type":"interface","linktype":"interface","name":"PageInfo","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"lib/table/table.type.ts","type":"interface","linktype":"interface","name":"RowEventArg","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"lib/table/table.type.ts","type":"interface","linktype":"interface","name":"SorterResult","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"lib/test.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"context","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/test.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"require","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/upload/upload.component.ts","type":"component","linktype":"component","name":"NzxUploadComponent","coveragePercent":23,"coverageCount":"14/60","status":"low"},{"filePath":"lib/upload/upload.component.ts","type":"interface","linktype":"interface","name":"FileValidateError","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"lib/upload/upload.module.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"COMPONENT","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/util/base-control.ts","type":"class","linktype":"classe","name":"BaseControl","coveragePercent":0,"coverageCount":"0/7","status":"low"},{"filePath":"lib/util/form-utils.ts","type":"class","linktype":"classe","name":"FormUtilsClass","coveragePercent":100,"coverageCount":"27/27","status":"very-good"},{"filePath":"lib/util/form-utils.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxFormUtils","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/util/utils.ts","type":"class","linktype":"classe","name":"UtilsClass","coveragePercent":46,"coverageCount":"23/50","status":"medium"},{"filePath":"lib/util/utils.ts","type":"interface","linktype":"interface","name":"TreeNode","coveragePercent":100,"coverageCount":"2/2","status":"very-good"},{"filePath":"lib/util/utils.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"defineProperty","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/util/utils.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"gOPD","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/util/utils.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"hasOwn","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/util/utils.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"NzxUtils","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"lib/util/utils.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"toStr","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"stories/@types/index.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"mdxMeta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"stories/index.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"hideControlArgType","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"stories/index.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"storyFactory","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"stories/index.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"EXCLUDE_PARAMS","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"stories/index.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"HIDE_CONTROL","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"stories/index.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"HIDE_CONTROL_COMMONS","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"stories/index.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"SIZE_ARG_TYPE","coveragePercent":0,"coverageCount":"0/1","status":"low"}]}}');var common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),zh=__webpack_require__("./node_modules/@angular/common/locales/zh.mjs"),client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),animations=__webpack_require__("./node_modules/@angular/platform-browser/fesm2020/animations.mjs"),ng_zorro_antd_i18n=__webpack_require__("./node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-i18n.mjs"),platform_browser=__webpack_require__("./node_modules/@angular/platform-browser/fesm2020/platform-browser.mjs"),stories=__webpack_require__("./stories/index.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),esm=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),index_681e4b07=__webpack_require__("./node_modules/@storybook/components/dist/esm/index-681e4b07.js"),react=__webpack_require__("./node_modules/react/index.js");const ImportInfo=()=>{var _a;const context=(0,react.useContext)(esm.hv);console.log(context);const componentName=null===(_a=context.component)||void 0===_a?void 0:_a.name;if(!componentName)return null;const importStatement=`import { ${componentName.replace(/(Component|Directive|Service|Pipe)$/,"Module")} } from '@xmagic/nzx-antd/${componentName.replace(/(^Nzx)|((Component|Directive|Service|Pipe)$)/g,"").replace(/\w([A-Z])/g,"-$1").toLowerCase()}';`;return(0,jsx_runtime.jsx)(index_681e4b07.a5,Object.assign({copyable:!0,bordered:!0,language:"ts"},{children:importStatement}))};(0,angular.P)(documentation_namespaceObject),(0,common.qS)(zh.Z);var parameters={actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/(Date|Time)$/},exclude:stories.Ol},docs:{inlineStories:!0,source:{language:"typescript",format:!0},page:()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(esm.Dx,{}),(0,jsx_runtime.jsx)(esm.QE,{}),(0,jsx_runtime.jsx)(esm.dk,{}),(0,jsx_runtime.jsx)(ImportInfo,{}),(0,jsx_runtime.jsx)(esm.sq,{}),(0,jsx_runtime.jsx)(index_681e4b07.L,{children:"参数定义"}),(0,jsx_runtime.jsx)(esm.$4,{story:esm.Uh}),(0,jsx_runtime.jsx)(esm.fQ,{title:"所有示例",includePrimary:!1})]})},options:{storySort:{}}},decorators=[(0,client.moduleMetadata)({imports:[common.ez,platform_browser.BrowserModule,animations.PW,fesm2020_forms.FormsModule,fesm2020_forms.ReactiveFormsModule],providers:[{provide:ng_zorro_antd_i18n.u7,useValue:ng_zorro_antd_i18n.bF}]})],__namedExportsOrder=["parameters","decorators"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":return(0,ClientApi.uc)(value);case"argTypes":return(0,ClientApi.v9)(value);case"decorators":return value.forEach((function(decorator){return(0,ClientApi.$9)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return(0,ClientApi.HZ)(loader,!1)}));case"parameters":return(0,ClientApi.h1)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return(0,ClientApi.My)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return(0,ClientApi._C)(enhancer)}));case"render":return(0,ClientApi.$P)(value);case"globals":case"globalTypes":var v={};return v[key]=value,(0,ClientApi.h1)(v,!1);case"__namedExportsOrder":case"decorateStory":case"renderToDOM":return null;default:return console.log(key+" was not supported :( !")}}))},"./storybook-init-framework-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js")},"./stories/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Ol:()=>EXCLUDE_PARAMS,hM:()=>storyFactory,uQ:()=>hideControlArgType,w:()=>SIZE_ARG_TYPE});const EXCLUDE_PARAMS=["setDisabledState","registerOnChange","registerOnTouched","onChange","onTouched","writeValue","ngModelChange"],SIZE_ARG_TYPE={control:"inline-radio",options:["large","default","small"],defaultValue:"default"},HIDE_CONTROL={table:{defaultValue:{summary:null}},control:!1};function storyFactory(props,template){const fn=args=>({props:args,template});return props&&(fn.args=props),fn}function hideControlArgType(...props){return props.reduce(((prev,curr)=>(prev[curr]=Object.assign({},HIDE_CONTROL),prev)),{})}hideControlArgType("nzxValue")},"./lib/http-interceptor/HttpInterceptor.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{title:"HttpInterceptor",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"特性"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"URL")," 统一添加 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"context path")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"自动显示",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"loading"),"效果，请求发起前显示",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"loading"),", 请求结束隐藏",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"loading"),", 同时提供关闭",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"loading"),"参数配置"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"自动处理请求接口异常，",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"HTTP"),"异常自动显示错误提示框，允许自定义业务异常让框架提示错误，同时支持下载文件(Blob 数据)提示错误"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"允许自定义",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"HTTP"),"异常提示错误信息"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"登录",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"session"),"超时处理，自动跳转到登录页面"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"将请求错误信息统一包装成",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"HttpError"),"对象，方便业务处理异常"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"重新定义参数序列化，允许",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"queryParams"),"请求参数传复杂对象数据，比如数组对象等, 同时对参数值做编码处理, 防止乱码"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"修改正常业务接口的响应",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"body"),"体，直接拿到业务数据，比如取响应体的",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"result"),"属性返回给接口调用者"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"支持同步请求，通常情况下不建议开启，可以用在表单远程校验上， 使之变成同步校验")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"使用"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"import { NzxHttpInterceptorModule } from '@xmagic/nzx-antd/http-interceptor';\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"url 处理"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("blockquote",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",{parentName:"blockquote"},"建议使用",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"/"),"开头的",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"url"),"发起请求")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"在",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"NzxAntdService"),"中, 配置",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"basePath"),"属性，所有请求将自动添加前缀.例如:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"配置 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"basePath: '/ctxt'"),", 代码中请求地址 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"/api/test"),", 实际发起请求地址为 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"/ctx/api/test")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"请求参数为复杂对象"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"import { Injectable } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class TestService {\n  constructor(private http: HttpClient) {}\n  /**\n   * 请求参数为复杂对象\n   */\n  getInfo(): Observable<string> {\n    const data = { id: 1, details: [{ name: 'test', info: { level: 1, code: 'test code' } }] };\n    return this.http.get<string>('/api/test', { params: data as NzSafeAny });\n  }\n}\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"请求 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"h2"},"loading")," 配置"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("blockquote",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",{parentName:"blockquote"},"请求",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"loading"),"效果默认是开启状态，使用",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"LOADING_ENABLED"),"来控制是否显示",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"loading"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"import { Injectable } from '@angular/core';\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LOADING_ENABLED } from '@xmagic/nzx-antd/service';\n\n@Injectable()\nexport class TestService {\n  constructor(private http: HttpClient) {}\n\n  /**\n   * 请求时关闭loading\n   */\n  getInfo(): Observable<string> {\n    return this.http.get<string>('/api/test', { context: new HttpContext().set(LOADING_ENABLED, false) });\n  }\n}\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"同步请求配置"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("blockquote",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",{parentName:"blockquote"},"开启同步请求时 loading 效果会因为浏览器阻塞而显示不出来")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("blockquote",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",{parentName:"blockquote"},"同步请求默认为关闭状态, 即异步请求, 两种方式开启同步请求:")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",{parentName:"li"},"使用",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"HttpContext"),"的",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"SYNCED_ENABLED"),"方式")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",{parentName:"li"},"使用",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"synced"),"模板函数方式"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"import { Injectable } from '@angular/core';\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { NzxUtils } from '@xmagic/nzx-antd/util';\nimport { SYNCED_ENABLED, synced } from '@xmagic/nzx-antd/service';\n\n@Injectable()\nexport class TestService {\n  constructor(private http: HttpClient) {}\n\n  /**\n   * 使用`SYNCED_ENABLED`方式同步请求数据\n   */\n  getInfo(): string {\n    return NzxUtils.getAjaxValue(\n      this.http.get<string>('/api/test', { context: new HttpContext().set(SYNCED_ENABLED, true) })\n    );\n  }\n\n  /**\n   * 使用`synced`模板函数方式同步请求数据\n   */\n  getId(): string {\n    return NzxUtils.getAjaxValue(this.http.get<string>(synced`api/test`));\n  }\n\n  /**\n   * 使用原生Observable对象获取数据\n   */\n  getTest(): string {\n    let result!: string;\n    this.http.get<string>(synced`api/test`).subscribe(value => (result = value));\n    return result;\n  }\n}\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"表单远程验证变成同步验证器"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AbstractControl, FormBuilder, ValidatorFn } from '@angular/forms';\nimport { NzxUtils } from '@xmagic/nzx-antd/util';\nimport { synced } from '@xmagic/nzx-antd/service';\n\n@Component({...})\nexport class TestComponent  {\n  profileForm = this.fb.group({\n    id: ['', this.uniqueValidator('TEST')]\n  });\n\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n\n  /**\n   * 远程同步校验\n   * @param data\n   */\n  uniqueValidator(data: string): ValidatorFn {\n    return (control: AbstractControl) => {\n      if (NzxUtils.isEmpty(control.value)) {\n        return null;\n      }\n      const isUnique = NzxUtils.getAjaxValue(\n        this.http.get<boolean>(synced`/api/test`, { params: { data, id: control.value } })\n      );\n      return isUnique ? null : { unique: { message: '远程校验失败,不是唯一值' } };\n    };\n  }\n}\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("div",{className:"doc-tip-wrapper"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("span",{className:"doc-tip"},"提示"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",null,"NzxHttpInterceptorModule"),"对调用者透明，仍然使用",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",null,"HttpClient")," API"))}MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"HttpInterceptor",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["__page"]},"./stories/Introduction.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{title:"介绍",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",null,"NzxAntd"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"NzxAntd"),"是一个",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"angular"),"组件库，基于",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"ng-zorro-antd"),"进行二次扩展，并加入开发常用功能。全部代码开源并遵循 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"MIT")," 协议，任何企业、组织及个人均可免费使用。"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://npmjs.com/package/@xmagic/nzx-antd"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/ngx-fluent-form/latest.svg",alt:"npm version"})),"\n",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/License-MIT-blue.svg",alt:"License"}),"\n",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://www.github.com/angular/angular"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Build%20with-Angular%20CLI-red?logo=angular",alt:"Angular"})),"\n",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://m310851010.github.io/nzx-antd"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("img",{parentName:"a",src:"https://cdn.jsdelivr.net/gh/storybookjs/brand@main/badge/badge-storybook.svg",alt:"Storybook"}))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"✨特性"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"扩展",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"HttpInterceptor"),"拦截器，简化通用业务处理"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"封装常用组件 使之支持",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"FormControl"),"和",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"NgModal")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"封装表格组件, 简单易用, 功能强大"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"常用工具类， 服务， 指令，管道"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"集中化配置，统一配置入口")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"🖥使用环境"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"li",href:"https://angular.io"},"Angular")," >= v13.0.0"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"li",href:"https://ng.ant.design"},"ng-zorro-antd")," >= v13.0.0")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"📦安装"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-shell"},"npm i @xmagic/nzx-antd --save\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"🔨使用"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"🍏引入样式"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("blockquote",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",{parentName:"blockquote"},"有两种方式引入样式, 在 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"angular.json")," 中 或者 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"style.less"),"中, 任选其一")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"在 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"angular.json")," 中引入")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "styles": [\n    "node_modules/@xmagic/nzx-antd/nzx-antd.less"\n  ]\n}\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"在 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"style.less")," 中引入 ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"less")," 样式文件")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-css"},'@import "~@xmagic/nzx-antd/nzx-antd.less";\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"🍎引入模块"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ol",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ol"},"配置",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"NzxAntdService"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"// nzx-antd-config.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { NzxAntdService } from '@xmagic/nzx-antd';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NzxAntdConfigService extends NzxAntdService {\n  override basePath = environment.basePath;\n  override response = { data: 'data' };\n  constructor() {\n    super();\n  }\n}\n\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ol",{start:2},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ol"},"修改",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"AppModule"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"// app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { NzxModalModule } from '@xmagic/nzx-antd/modal';\nimport { NzxHttpInterceptorModule } from '@xmagic/nzx-antd/http-interceptor';\nimport { NzxAntdService } from '@xmagic/nzx-antd';\nimport { NzxAntdConfigService } from './nzx-antd-config.service';\n\n@NgModule({\n  imports: [\n    NzxModalModule,\n    NzxHttpInterceptorModule\n  ],\n  providers: [\n    { provide: NzxAntdService, useExisting: NzxAntdConfigService }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppComponent {}\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ol",{start:3},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ol"},"修改",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"AppComponent"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"//app.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpLoadingService, LogoutService } from '@xmagic/nzx-antd/http-interceptor';\nimport { NzMessageService } from 'ng-zorro-antd/message';\nimport { NzxModalWrapService } from '@xmagic/nzx-antd/modal';\nimport { loadingService } from '@xmagic/nzx-antd/service';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>',\n})\nexport class AppComponent implements OnInit {\n  constructor(\n    protected loading: HttpLoadingService,\n    protected notifyService: LogoutService,\n    protected modalService: NzxModalWrapService,\n    protected message: NzMessageService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loading.subscribe(status => loadingService.loading(status));\n\n    this.notifyService.onLogout(error => {\n      this.modalService.closeAll();\n      if (error.timeout) {\n        this.message.info(error.message || '登录超时，请重新登录');\n      }\n      window.top!.location.href = error?.url || '#/login';\n    });\n  }\n}\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"🏴授权协议"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/m310851010/nzx-antd/main/LICENSE"},"MIT")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",null,"👍支持"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("div",{className:"doc-tip-wrapper"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("span",{className:"doc-tip"},"提示")," 为该项目点个免费的星⭐"))}MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"介绍",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["__page"]},"./stories/styles.less":()=>{},"./stories sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./stories sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$",module.exports=webpackEmptyContext},"./stories sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./Introduction.stories.mdx":"./stories/Introduction.stories.mdx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./stories sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.mdx)$"},"./lib/between-datetime/between-datetime.component.html?ngResource":module=>{"use strict";module.exports='<nzx-between\r\n  [nzxDisabled]="nzxDisabled"\r\n  [nzxStartDisabled]="nzxStartDisabled"\r\n  [nzxEndDisabled]="nzxEndDisabled"\r\n  [nzxSize]="nzxSize"\r\n>\r\n  <ng-container\r\n    start\r\n    *ngTemplateOutlet="\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxStartReName,\r\n          disabled: nzxDisabled || nzxStartDisabled,\r\n          placeholder: nzxStartPlaceholder,\r\n          nzSuffixIcon: nzxStartSuffixIcon,\r\n          nzAllowClear: nzxStartAllowClear,\r\n          nzRenderExtraFooter: nzxStartRenderExtraFooter,\r\n          nzBackdrop: nzxStartBackdrop,\r\n          nzAutoFocus: nzxStartAutoFocus,\r\n          nzDateRender: nzxStartDateRender,\r\n          nzDefaultPickerValue: nzxStartDefaultPickerValue,\r\n          nzDisabledDate: nzxStartDisabledDate,\r\n          nzDisabledTime: nzxStartDisabledTime,\r\n          nzDropdownClassName: nzxStartDropdownClassName,\r\n          nzId: nzxStartId,\r\n          nzInputReadOnly: nzxStartInputReadOnly,\r\n          nzLocale: nzLocale,\r\n          nzPopupStyle: nzxStartPopupStyle,\r\n          nzShowNow: nzxStartShowNow,\r\n          nzShowTime: nzxStartShowTime,\r\n          nzShowToday: nzxStartShowToday,\r\n          nzOnOpenChange: nzxStartOnOpenChange,\r\n          nzOnOk: nzxStartOnOk,\r\n          nzOnCalendarChange: nzxStartOnCalendarChange,\r\n          nzOnPanelChange: nzxStartOnPanelChange\r\n        }\r\n      }\r\n    "\r\n  ></ng-container>\r\n  <ng-container\r\n    end\r\n    *ngTemplateOutlet="\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxEndReName,\r\n          disabled: nzxDisabled || nzxEndDisabled,\r\n          placeholder: nzxEndPlaceholder,\r\n          nzSuffixIcon: nzxEndSuffixIcon,\r\n          nzAllowClear: nzxEndAllowClear,\r\n          nzRenderExtraFooter: nzxEndRenderExtraFooter,\r\n          nzBackdrop: nzxEndBackdrop,\r\n          nzAutoFocus: nzxEndAutoFocus,\r\n          nzDateRender: nzxEndDateRender,\r\n          nzDefaultPickerValue: nzxEndDefaultPickerValue,\r\n          nzDisabledDate: nzxEndDisabledDate,\r\n          nzDisabledTime: nzxEndDisabledTime,\r\n          nzDropdownClassName: nzxEndDropdownClassName,\r\n          nzId: nzxEndId,\r\n          nzInputReadOnly: nzxEndInputReadOnly,\r\n          nzLocale: nzLocale,\r\n          nzPopupStyle: nzxEndPopupStyle,\r\n          nzShowNow: nzxEndShowNow,\r\n          nzShowTime: nzxEndShowTime,\r\n          nzShowToday: nzxEndShowToday,\r\n          nzOnOpenChange: nzxEndOnOpenChange,\r\n          nzOnOk: nzxEndOnOk,\r\n          nzOnCalendarChange: nzxEndOnCalendarChange,\r\n          nzOnPanelChange: nzxEndOnPanelChange\r\n        }\r\n      }\r\n    "\r\n  ></ng-container>\r\n</nzx-between>\r\n\r\n<ng-template #typeTemplate let-data>\r\n  <nz-date-picker\r\n    [(ngModel)]="nzxValue[data.dir]"\r\n    (ngModelChange)="ngModelChange()"\r\n    [nzDisabled]="data.disabled"\r\n    [nzPlaceHolder]="data.placeholder"\r\n    [nzSize]="nzxSize"\r\n    [nzMode]="nzMode"\r\n    [nzSuffixIcon]="data.nzSuffixIcon || \'calendar\'"\r\n    [nzAllowClear]="nzAllowClear || data.nzAllowClear"\r\n    [nzRenderExtraFooter]="data.nzRenderExtraFooter"\r\n    [nzBackdrop]="data.nzBackdrop"\r\n    [nzAutoFocus]="data.nzAutoFocus"\r\n    [nzDateRender]="data.nzDateRender"\r\n    [nzDefaultPickerValue]="data.nzDefaultPickerValue"\r\n    [nzDisabledDate]="data.nzDisabledDate"\r\n    [nzDisabledTime]="data.nzDisabledTime"\r\n    [nzDropdownClassName]="data.nzDropdownClassName"\r\n    [nzFormat]="nzFormat"\r\n    [nzId]="data.nzId"\r\n    [nzInputReadOnly]="data.nzInputReadOnly"\r\n    [nzLocale]="nzLocale"\r\n    [nzPopupStyle]="data.nzPopupStyle"\r\n    [nzShowNow]="data.nzShowNow"\r\n    [nzShowTime]="data.nzShowTime || nzShowTime"\r\n    [nzShowToday]="nzShowToday || data.nzShowToday"\r\n    (nzOnOpenChange)="data.nzOnOpenChange.emit($event)"\r\n    (nzOnOk)="data.nzOnOk.emit($event)"\r\n    (nzOnCalendarChange)="data.nzOnCalendarChange.emit($event)"\r\n    (nzOnPanelChange)="data.nzOnPanelChange.emit($event)"\r\n  ></nz-date-picker>\r\n</ng-template>\r\n'},"./lib/between-input/between-input.component.html?ngResource":module=>{"use strict";module.exports='<nzx-between\r\n  [nzxDisabled]="nzxDisabled"\r\n  [nzxStartDisabled]="nzxStartDisabled"\r\n  [nzxEndDisabled]="nzxEndDisabled"\r\n  [nzxSize]="nzxSize"\r\n>\r\n  <ng-container\r\n    start\r\n    *ngTemplateOutlet="\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxStartReName || \'start\',\r\n          disabled: nzxDisabled || nzxStartDisabled,\r\n          placeholder: nzxStartPlaceholder,\r\n          step: nzxStarStep,\r\n          id: nzxStarId,\r\n          formatter: nzxStartFormatter,\r\n          max: nzxStartMax,\r\n          min: nzxStartMin\r\n        }\r\n      }\r\n    "\r\n  ></ng-container>\r\n  <ng-container\r\n    end\r\n    *ngTemplateOutlet="\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxEndReName || \'end\',\r\n          disabled: nzxDisabled || nzxEndDisabled,\r\n          placeholder: nzxEndPlaceholder,\r\n          step: nzxEndStep,\r\n          id: nzxEndId,\r\n          formatter: nzxEndFormatter,\r\n          max: nzxEndMax,\r\n          min: nzxEndMin\r\n        }\r\n      }\r\n    "\r\n  ></ng-container>\r\n</nzx-between>\r\n\r\n<ng-template #typeTemplate let-data>\r\n  <ng-container [ngSwitch]="nzxType">\r\n    <input\r\n      *ngSwitchCase="\'input\'"\r\n      nz-input\r\n      [disabled]="data.disabled"\r\n      [nzSize]="nzxSize"\r\n      [(ngModel)]="nzxValue[data.dir]"\r\n      [attr.placeholder]="data.placeholder"\r\n      (ngModelChange)="ngModelChange()"\r\n    />\r\n    <nz-input-number\r\n      *ngSwitchCase="\'number\'"\r\n      [nzDisabled]="data.disabled"\r\n      [(ngModel)]="nzxValue[data.dir]"\r\n      [nzPlaceHolder]="data.placeholder"\r\n      [nzSize]="nzxSize"\r\n      [nzStep]="data.step"\r\n      [nzPrecision]="data.precision"\r\n      [nzId]="data.id"\r\n      [nzFormatter]="data.formatter"\r\n      [nzMax]="data.max"\r\n      [nzMin]="data.min"\r\n      (ngModelChange)="ngModelChange()"\r\n    ></nz-input-number>\r\n  </ng-container>\r\n</ng-template>\r\n'},"./lib/between-time/between-time.component.html?ngResource":module=>{"use strict";module.exports='<nzx-between\r\n  [nzxDisabled]="nzxDisabled"\r\n  [nzxStartDisabled]="nzxStartDisabled"\r\n  [nzxEndDisabled]="nzxEndDisabled"\r\n  [nzxSize]="nzxSize"\r\n>\r\n  <ng-container\r\n    start\r\n    *ngTemplateOutlet="\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxStartReName,\r\n          disabled: nzxDisabled || nzxStartDisabled,\r\n          placeholder: nzxStartPlaceholder,\r\n          nzSuffixIcon: nzxStartSuffixIcon,\r\n          nzBackdrop: nzxStartBackdrop,\r\n          nzAutoFocus: nzxStartAutoFocus,\r\n          nzId: nzxStartId,\r\n          nzAddOn: nzxStartAddOn,\r\n          nzAllowEmpty: nzxStartAllowEmpty,\r\n          nzClearText: nzxStartClearText,\r\n          nzDefaultOpenValue: nzxStartDefaultOpenValue,\r\n          nzDisabledHours: nzxStartDisabledHours,\r\n          nzDisabledMinutes: nzxStartDisabledMinutes,\r\n          nzDisabledSeconds: nzxStartDisabledSeconds,\r\n          nzHideDisabledOptions: nzxStartHideDisabledOptions,\r\n          nzHourStep: nzxStartHourStep,\r\n          nzMinuteStep: nzxStartMinuteStep,\r\n          nzNowText: nzxStartNowText,\r\n          nzOkText: nzxStartOkText,\r\n          nzPopupClassName: nzxStartPopupClassName,\r\n          nzSecondStep: nzxStartSecondStep,\r\n          nzUse12Hours: nzxStartUse12Hours,\r\n          nzOpenChange: nzxStartOpenChange,\r\n          nzStatus: nzxStartStatus\r\n        }\r\n      }\r\n    "\r\n  ></ng-container>\r\n  <ng-container\r\n    end\r\n    *ngTemplateOutlet="\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxEndReName,\r\n          disabled: nzxDisabled || nzxEndDisabled,\r\n          placeholder: nzxEndPlaceholder,\r\n          nzSuffixIcon: nzxEndSuffixIcon,\r\n          nzBackdrop: nzxEndBackdrop,\r\n          nzAutoFocus: nzxEndAutoFocus,\r\n          nzId: nzxEndId,\r\n          nzAddOn: nzxEndAddOn,\r\n          nzAllowEmpty: nzxEndAllowEmpty,\r\n          nzClearText: nzxEndClearText,\r\n          nzDefaultOpenValue: nzxEndDefaultOpenValue,\r\n          nzDisabledHours: nzxEndDisabledHours,\r\n          nzDisabledMinutes: nzxEndDisabledMinutes,\r\n          nzDisabledSeconds: nzxEndDisabledSeconds,\r\n          nzHideDisabledOptions: nzxEndHideDisabledOptions,\r\n          nzHourStep: nzxEndHourStep,\r\n          nzMinuteStep: nzxEndMinuteStep,\r\n          nzNowText: nzxEndNowText,\r\n          nzOkText: nzxEndOkText,\r\n          nzPopupClassName: nzxEndPopupClassName,\r\n          nzSecondStep: nzxEndSecondStep,\r\n          nzUse12Hours: nzxEndUse12Hours,\r\n          nzOpenChange: nzxEndOpenChange,\r\n          nzStatus: nzxEndStatus\r\n        }\r\n      }\r\n    "\r\n  ></ng-container>\r\n</nzx-between>\r\n\r\n<ng-template #typeTemplate let-data>\r\n  <nz-time-picker\r\n    [(ngModel)]="nzxValue[data.dir]"\r\n    (ngModelChange)="ngModelChange()"\r\n    [nzDisabled]="data.disabled"\r\n    [nzPlaceHolder]="data.placeholder"\r\n    [nzSize]="nzxSize"\r\n    [nzSuffixIcon]="data.nzSuffixIcon || \'clock-circle\'"\r\n    [nzBackdrop]="data.nzBackdrop"\r\n    [nzAutoFocus]="data.nzAutoFocus"\r\n    [nzFormat]="nzFormat == null ? \'HH:mm:ss\' : nzFormat"\r\n    [nzId]="data.nzId"\r\n    [nzAddOn]="data.nzAddOn"\r\n    [nzAllowEmpty]="data.nzAllowEmpty == null ? true : data.nzAllowEmpty"\r\n    [nzClearText]="data.nzClearText == null ? \'清空\' : data.nzClearText"\r\n    [nzDefaultOpenValue]="data.nzDefaultOpenValue || nzDefaultOpenValue"\r\n    [nzDisabledHours]="data.nzDisabledHours"\r\n    [nzDisabledMinutes]="data.nzDisabledMinutes"\r\n    [nzDisabledSeconds]="data.nzDisabledSeconds"\r\n    [nzHideDisabledOptions]="data.nzHideDisabledOptions"\r\n    [nzHourStep]="data.nzHourStep == null ? 1 : data.nzHourStep"\r\n    [nzMinuteStep]="data.nzMinuteStep == null ? 1 : data.nzMinuteStep"\r\n    [nzNowText]="data.nzNowText"\r\n    [nzOkText]="data.nzOkText"\r\n    [nzPopupClassName]="data.nzPopupClassName"\r\n    [nzSecondStep]="data.nzSecondStep == null ? 1 : data.nzSecondStep"\r\n    [nzUse12Hours]="data.nzUse12Hours"\r\n    (nzOpenChange)="data.nzOpenChange.emit($event)"\r\n    [nzStatus]="data.nzStatus"\r\n  ></nz-time-picker>\r\n</ng-template>\r\n'},"./lib/between/between.component.html?ngResource":module=>{"use strict";module.exports='<nz-input-group\r\n  nzCompact\r\n  class="nzx-between"\r\n  [class.nzx-between-disabled]="nzxDisabled || (nzxStartDisabled && nzxEndDisabled)"\r\n  [nzSize]="nzxSize"\r\n>\r\n  <ng-content select="[start]"></ng-content>\r\n  <input type="text" disabled nz-input placeholder="~" class="nzx-between-placeholder" />\r\n  <ng-content select="[end]"></ng-content>\r\n</nz-input-group>\r\n'},"./lib/checkbox/checkbox.component.html?ngResource":module=>{"use strict";module.exports='<nz-checkbox-wrapper (nzOnChange)="ngModelChange($event)">\r\n  <ng-container *ngIf="nzxLayout === \'vertical\'; else horizontalTpl">\r\n    <div *ngFor="let item of nzxOptions" [ngStyle]="item.wrapperNStyle" [ngClass]="item.wrapperNgClass">\r\n      <ng-container *ngTemplateOutlet="labelTpl; context: { $implicit: item }"></ng-container>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-template #horizontalTpl>\r\n    <ng-container *ngFor="let item of nzxOptions">\r\n      <ng-container *ngTemplateOutlet="labelTpl; context: { $implicit: item }"></ng-container>\r\n    </ng-container>\r\n  </ng-template>\r\n</nz-checkbox-wrapper>\r\n\r\n<ng-template #labelTpl let-item>\r\n  <label\r\n    *ngIf="item.hide !== true"\r\n    nz-checkbox\r\n    [ngStyle]="item.ngStyle"\r\n    [ngClass]="item.ngClass"\r\n    (focus)="nzxFocus.emit(item)"\r\n    (blur)="nzxBlur.emit(item)"\r\n    [nzValue]="item.value"\r\n    [ngModel]="item.checked"\r\n    [nzDisabled]="nzxDisabled || item.disabled"\r\n    [nzIndeterminate]="item.indeterminate"\r\n    (ngModelChange)="item.ngModelChange && item.ngModelChange($event, item)"\r\n  >\r\n    <ng-container *nzStringTemplateOutlet="item.label; context: { $implicit: item, options: nzxOptions }">\r\n      {{ item.label }}\r\n    </ng-container>\r\n  </label>\r\n</ng-template>\r\n'},"./lib/table/header/column-setting/column-setting.component.html?ngResource":module=>{"use strict";module.exports='<i\r\n  nz-icon\r\n  nzType="setting"\r\n  nzTheme="outline"\r\n  tabindex="-1"\r\n  nz-popover\r\n  nzPopoverTrigger="click"\r\n  nzPopoverOverlayClassName="nzx-column-setting__cloumn-box"\r\n  [nzPopoverTitle]="titleTemplate"\r\n  [nzPopoverPlacement]="\'bottomRight\'"\r\n  [nzPopoverContent]="contentTemplate"\r\n  nz-tooltip\r\n  nzTooltipTitle="列设置"\r\n></i>\r\n\r\n<ng-template #titleTemplate>\r\n  <div class="nzx-column-setting__popover-title">\r\n    <div class="nzx-column-setting__flex" style="flex: 1">\r\n      <label\r\n        *ngIf="columnNameVisible !== false"\r\n        nz-checkbox\r\n        [(ngModel)]="_columnNameChecked"\r\n        [nzIndeterminate]="_indeterminate"\r\n        (ngModelChange)="columnNameChange($event)"\r\n      >\r\n        展示列\r\n      </label>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #contentTemplate>\r\n  <ul\r\n    style="min-width: 315px"\r\n    cdkDropList\r\n    (cdkDropListDropped)="dropColumn($event, _nzxColumns)"\r\n    class="nzx-column-setting__column-list"\r\n  >\r\n    <ng-container *ngFor="let item of _nzxColumns">\r\n      <li\r\n        *ngIf="item.settingVisible !== false"\r\n        class="nzx-column-setting__check-item"\r\n        cdkDrag\r\n        cdkDragLockAxis="y"\r\n        cdkDragBoundary=".nzx-column-setting__column-list"\r\n        (cdkDragStarted)="cdkDragStarted($event)"\r\n        (cdkDragReleased)="cdkDragReleased($event)"\r\n      >\r\n        <div class="drag-box">\r\n          <i cdkDragHandle nz-icon nzType="drag" class="nzx-column-setting__drag-icon"></i>\r\n          <label\r\n            nz-checkbox\r\n            [nzDisabled]="item.settingDisabled === true"\r\n            [(ngModel)]="item.visible"\r\n            (ngModelChange)="columnVisible(item, $event)"\r\n          >\r\n            {{ item.settingText || item.thText }}\r\n          </label>\r\n        </div>\r\n\r\n        <div class="nzx-column-setting__flex">\r\n          <i\r\n            nz-icon\r\n            nzType="vertical-align-top"\r\n            class="nzx-column-setting__fixed-left"\r\n            [class.active]="item.fixed === \'left\'"\r\n            [class.disabled]="item.visible === false"\r\n            (click)="fixedColumn(item, item.fixed == \'left\' ? null : \'left\')"\r\n            nz-tooltip\r\n            nzTooltipTitle="固定到左侧"\r\n          ></i>\r\n          <nz-divider nzType="vertical"></nz-divider>\r\n          <i\r\n            nz-icon\r\n            nzType="vertical-align-bottom"\r\n            class="nzx-column-setting__fixed-right"\r\n            [class.active]="item.fixed === \'right\'"\r\n            [class.disabled]="item.visible === false"\r\n            (click)="fixedColumn(item, item.fixed == \'right\' ? null : \'right\')"\r\n            nz-tooltip\r\n            nzTooltipTitle="固定到右侧"\r\n          ></i>\r\n        </div>\r\n      </li>\r\n    </ng-container>\r\n  </ul>\r\n</ng-template>\r\n'},"./lib/table/header/table-header/table-header.component.html?ngResource":module=>{"use strict";module.exports='<div class="nzx-table__header">\r\n  <div class="nzx-table__title">\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <div class="nzx-table__toolbar">\r\n    <ng-content select="[setting-before]"></ng-content>\r\n    <ng-container *ngIf="actionVisible !== false">\r\n      <i\r\n        *ngIf="refreshVisible"\r\n        (click)="refreshClick.emit()"\r\n        nz-icon\r\n        nzType="reload"\r\n        nzTheme="outline"\r\n        nz-tooltip\r\n        nzTooltipTitle="刷新"\r\n        tabindex="-1"\r\n      ></i>\r\n      <i\r\n        *ngIf="resizeVisible"\r\n        nzTrigger="click"\r\n        nz-dropdown\r\n        [nzDropdownMenu]="tableSizeMenu"\r\n        nz-icon\r\n        nzType="column-height"\r\n        nzTheme="outline"\r\n        nz-tooltip\r\n        tabindex="-1"\r\n        nzTooltipTitle="密度"\r\n      ></i>\r\n\r\n      <ng-content select="[setting]"></ng-content>\r\n    </ng-container>\r\n\r\n    <ng-content select="[toolbar]"></ng-content>\r\n  </div>\r\n</div>\r\n\r\n<nz-dropdown-menu #tableSizeMenu>\r\n  <ul nz-menu>\r\n    <li\r\n      nz-menu-item\r\n      (click)="item.value !== tableSize && tableSizeChange.emit(item.value)"\r\n      [nzSelected]="item.selected"\r\n      *ngFor="let item of tableSizeOptions"\r\n    >\r\n      <span>{{ item.sizeName }}</span>\r\n    </li>\r\n  </ul>\r\n</nz-dropdown-menu>\r\n'},"./lib/table/table.component.html?ngResource":module=>{"use strict";module.exports='<nzx-table-header\r\n  *ngIf="toolbarVisible !== false"\r\n  [actionVisible]="actionVisible"\r\n  [tableSize]="nzSize"\r\n  [refreshVisible]="nzxRefreshVisible"\r\n  [resizeVisible]="nzxResizeVisible"\r\n  (tableSizeChange)="tableSizeChange($event, basicTable)"\r\n  (refreshClick)="onRefreshClick()"\r\n>\r\n  <ng-container *nzStringTemplateOutlet="title; context: { $implicit: { context: this } }">\r\n    {{ title }}\r\n  </ng-container>\r\n  <ng-content select="[title]"></ng-content>\r\n\r\n  <ng-container setting-before>\r\n    <ng-container *nzStringTemplateOutlet="toolbarBefore; context: { $implicit: { context: this } }">\r\n      {{ toolbarBefore }}\r\n    </ng-container>\r\n    <ng-content select="[toolbarBefore]"></ng-content>\r\n  </ng-container>\r\n\r\n  <nzx-column-setting\r\n    setting\r\n    *ngIf="nzxSettingVisible"\r\n    [nzxColumns]="_bodyColumns"\r\n    (sortedColumn)="sortedColumn($event)"\r\n    (fixedClick)="fixedClick($event)"\r\n  ></nzx-column-setting>\r\n\r\n  <ng-container toolbar>\r\n    <ng-container *nzStringTemplateOutlet="toolbar; context: { $implicit: { context: this } }">\r\n      {{ toolbar }}\r\n    </ng-container>\r\n    <ng-content select="[toolbar]"></ng-content>\r\n  </ng-container>\r\n</nzx-table-header>\r\n\r\n<nz-table\r\n  #basicTable\r\n  [nzData]="nzData"\r\n  [nzTableLayout]="nzTableLayout"\r\n  [nzFrontPagination]="nzFrontPagination"\r\n  [nzTotal]="nzTotal"\r\n  [(nzPageIndex)]="nzPageIndex"\r\n  [(nzPageSize)]="nzPageSize"\r\n  [nzShowPagination]="nzShowPagination"\r\n  [nzPaginationPosition]="nzPaginationPosition"\r\n  [nzPaginationType]="nzPaginationType"\r\n  [nzBordered]="nzBordered"\r\n  [nzOuterBordered]="nzOuterBordered"\r\n  [nzWidthConfig]="nzWidthConfig"\r\n  [nzSize]="$any(nzSize)"\r\n  [nzLoading]="nzLoading"\r\n  [nzLoadingIndicator]="nzLoadingIndicator"\r\n  [nzLoadingDelay]="nzLoadingDelay"\r\n  [nzScroll]="{ x: scrollX, y: scrollY }"\r\n  [nzTitle]="nzTitle"\r\n  [nzFooter]="nzFooter"\r\n  [nzNoResult]="nzNoResult"\r\n  [nzPageSizeOptions]="nzPageSizeOptions || defaultPageSizeOptions"\r\n  [nzShowQuickJumper]="nzShowQuickJumper"\r\n  [nzShowSizeChanger]="nzShowSizeChanger"\r\n  [nzShowTotal]="nzShowTotal === undefined ? totalTemplate : nzShowTotal"\r\n  [nzItemRender]="nzItemRender"\r\n  [nzHideOnSinglePage]="nzHideOnSinglePage"\r\n  [nzSimple]="nzSimple"\r\n  [nzTemplateMode]="nzTemplateMode"\r\n  [nzVirtualItemSize]="nzVirtualItemSize"\r\n  [nzVirtualMaxBufferPx]="nzVirtualMaxBufferPx"\r\n  [nzVirtualMinBufferPx]="nzVirtualMinBufferPx"\r\n  [nzVirtualForTrackBy]="nzVirtualForTrackBy"\r\n  (nzPageIndexChange)="nzPageIndexChange.emit($event); fetch(false)"\r\n  (nzPageSizeChange)="nzPageSizeChange.emit($event); fetch(false)"\r\n  (nzCurrentPageDataChange)="onCurrentPageDataChange($event)"\r\n  (nzQueryParams)="nzQueryParams.emit($event)"\r\n>\r\n  <thead *ngIf="nzxShowHeader !== false">\r\n    <ng-container *ngIf="nzxDefaultRenderHeader !== false">\r\n      <tr *ngFor="let row of _headerColumns">\r\n        <ng-container *ngFor="let col of row">\r\n          <th\r\n            *ngIf="!col.nzShowCheckbox && col.visible !== false"\r\n            nz-resizable\r\n            [nzDisabled]="nzxResizable === false"\r\n            nzBounds="window"\r\n            (nzResize)="onResize($event, col)"\r\n            (click)="headerClick.emit({ column: col, event: $event })"\r\n            (dblclick)="headerDblclick.emit({ column: col, event: $event })"\r\n            (contextmenu)="headerContextmenu.emit({ column: col, event: $event })"\r\n            [nzShowSort]="col.nzShowSort"\r\n            [nzCustomFilter]="col.nzCustomFilter"\r\n            [nzSortFn]="col.nzSortFn == null ? true : col.nzSortFn"\r\n            [nzSortDirections]="col.nzSortDirections"\r\n            [(nzSortOrder)]="col.nzSortOrder"\r\n            (nzSortOrderChange)="sortOrderChange($event, col)"\r\n            [nzColumnKey]="col.nzColumnKey || col.name"\r\n            [nzShowFilter]="col.nzShowFilter"\r\n            [nzSortPriority]="col.nzSortPriority === true"\r\n            [nzFilterFn]="col.nzFilterFn"\r\n            [nzFilters]="col.nzFilters"\r\n            [nzFilterMultiple]="col.nzFilterMultiple !== false"\r\n            [nzWidth]="col.nzWidth == null && col.isIndex ? \'60px\' : col.nzWidth"\r\n            [nzLeft]="col.fixed === \'left\'"\r\n            [nzRight]="col.fixed === \'right\'"\r\n            [nzAlign]="col.thAlign"\r\n            [nzBreakWord]="col.nzBreakWord"\r\n            [nzEllipsis]="col.nzEllipsis"\r\n            [colspan]="col.colspan"\r\n            [rowspan]="col.rowspan"\r\n            [ngClass]="col.thNgClass"\r\n            [ngStyle]="col.thNgStyle"\r\n          >\r\n            <nz-resize-handles [nzDirections]="[\'right\']"></nz-resize-handles>\r\n            <ng-container\r\n              *ngTemplateOutlet="\r\n                thRenderTemplate;\r\n                context: { $implicit: { col: col, row: row, context: this }, row: row }\r\n              "\r\n            ></ng-container>\r\n          </th>\r\n\r\n          <th\r\n            *ngIf="col.nzShowCheckbox && col.visible !== false"\r\n            nz-resizable\r\n            [nzDisabled]="nzxResizable === false"\r\n            nzBounds="window"\r\n            (nzResize)="onResize($event, col)"\r\n            (click)="headerClick.emit({ column: col, event: $event })"\r\n            (dblclick)="headerDblclick.emit({ column: col, event: $event })"\r\n            (contextmenu)="headerContextmenu.emit({ column: col, event: $event })"\r\n            [nzShowCheckbox]="col.nzShowCheckbox"\r\n            [nzIndeterminate]="col.nzIndeterminate"\r\n            [(nzChecked)]="col.checked"\r\n            (nzCheckedChange)="thCheckedChange($event, col)"\r\n            [nzShowRowSelection]="col.nzShowRowSelection"\r\n            [nzSelections]="col.nzSelections"\r\n            [nzWidth]="col.nzWidth == null && col.nzShowCheckbox ? \'60px\' : col.nzWidth"\r\n            [nzLeft]="col.fixed === \'left\'"\r\n            [nzRight]="col.fixed === \'right\'"\r\n            [nzAlign]="col.nzAlign"\r\n            [nzBreakWord]="col.nzBreakWord"\r\n            [nzEllipsis]="col.nzEllipsis"\r\n            [colspan]="col.colspan"\r\n            [rowspan]="col.rowspan"\r\n            [ngClass]="col.thClassName"\r\n            [ngStyle]="col.thStyle"\r\n          >\r\n            <nz-resize-handles [nzDirections]="[\'right\']"></nz-resize-handles>\r\n            <ng-container\r\n              *ngTemplateOutlet="\r\n                thRenderTemplate;\r\n                context: { $implicit: { col: col, row: row, context: this }, row: row }\r\n              "\r\n            ></ng-container>\r\n          </th>\r\n        </ng-container>\r\n      </tr>\r\n    </ng-container>\r\n  </thead>\r\n\r\n  <tbody class="nzx-table-striped-tbody" [class.nzx-table-striped-tbody]="nzxStripe">\r\n    <ng-container\r\n      *ngFor="let row of basicTable.data; index as index; first as first; last as last; even as even; odd as odd"\r\n    >\r\n      <tr\r\n        *ngIf="row.parent?.expand || !row.parent"\r\n        (click)="\r\n          onRowClick({\r\n            row: row,\r\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n            event: $event\r\n          })\r\n        "\r\n        (dblclick)="\r\n          rowDblclick.emit({\r\n            row: row,\r\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n            event: $event\r\n          })\r\n        "\r\n        (contextmenu)="\r\n          rowContextmenu.emit({\r\n            row: row,\r\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n            event: $event\r\n          })\r\n        "\r\n        [ngClass]="row.className"\r\n        [ngStyle]="row.style"\r\n        [class.ant-table-row-selected]="row.checked || _selectRow === row"\r\n      >\r\n        <ng-container\r\n          *ngFor="let col of _bodyColumns; index as _index; first as _first; last as _last; even as _even; odd as _odd"\r\n        >\r\n          <td\r\n            *ngIf="col.visible !== false"\r\n            (click)="\r\n              cellClick.emit({\r\n                row: row,\r\n                column: col,\r\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n                columnIndex: {\r\n                  index: _index,\r\n                  first: _first,\r\n                  last: _last,\r\n                  even: _even,\r\n                  odd: _odd\r\n                },\r\n                event: $event\r\n              })\r\n            "\r\n            (dblclick)="\r\n              cellDblclick.emit({\r\n                row: row,\r\n                column: col,\r\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n                columnIndex: {\r\n                  index: _index,\r\n                  first: _first,\r\n                  last: _last,\r\n                  even: _even,\r\n                  odd: _odd\r\n                },\r\n                event: $event\r\n              })\r\n            "\r\n            (contextmenu)="\r\n              cellContextmenu.emit({\r\n                row: row,\r\n                column: col,\r\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n                columnIndex: {\r\n                  index: _index,\r\n                  first: _first,\r\n                  last: _last,\r\n                  even: _even,\r\n                  odd: _odd\r\n                },\r\n                event: $event\r\n              })\r\n            "\r\n            [nzShowCheckbox]="col.nzShowCheckbox || row.showCheckbox"\r\n            [nzDisabled]="row.disabled"\r\n            [nzIndeterminate]="row.indeterminate"\r\n            [(nzChecked)]="row.checked"\r\n            (nzCheckedChange)="tdCheckedChange($event, col, row, {index, first, last, even, odd})"\r\n            [nzShowExpand]="col.showExpand && row.showExpand"\r\n            [(nzExpand)]="row.expand"\r\n            (nzExpandChange)="col.nzExpandChange && col.nzExpandChange($event, col, row, {index, first, last, even, odd})"\r\n            [nzIndentSize]="col.showExpand && row.nzIndentSize ? row.nzIndentSize : null"\r\n            [nzLeft]="col.fixed === \'left\'"\r\n            [nzRight]="col.fixed === \'right\'"\r\n            [nzAlign]="col.tdAlign || col.nzAlign"\r\n            [nzBreakWord]="col.nzBreakWord"\r\n            [nzEllipsis]="col.nzEllipsis"\r\n            [attr.colspan]="row.colspan"\r\n            [attr.rowspan]="row.rowspan"\r\n            [ngClass]="col.tdNgClass"\r\n            [ngStyle]="col.tdNgStyle"\r\n          >\r\n            <ng-container\r\n              *ngTemplateOutlet="\r\n                tdDataRender;\r\n                context: {\r\n                  $implicit: {\r\n                    col: col,\r\n                    row: row,\r\n                    context: this,\r\n                    indexAttr: { index: index, first: first, last: last, even: even, odd: odd }\r\n                  },\r\n                  row: row\r\n                }\r\n              "\r\n            ></ng-container>\r\n          </td>\r\n        </ng-container>\r\n      </tr>\r\n    </ng-container>\r\n  </tbody>\r\n</nz-table>\r\n\r\n<ng-template #thRenderTemplate let-data>\r\n  <ng-container *ngIf="data.col._thTemplate; else textThTemplate">\r\n    <ng-container *ngTemplateOutlet="data.col._thTemplate; context: { $implicit: data }"></ng-container>\r\n  </ng-container>\r\n\r\n  <ng-template #textThTemplate>\r\n    {{ data.col.thText == null && data.col.isIndex ? \'序号\' : data.col.thText }}\r\n  </ng-template>\r\n</ng-template>\r\n\r\n<ng-template #tdDataRender let-data let-row="row">\r\n  <ng-container *ngIf="!data.col.isIndex; else tdTemplateTemplate">\r\n    <ng-container *ngIf="data.col._tdTemplate; else buttonControlTemplate">\r\n      <ng-container *ngTemplateOutlet="data.col._tdTemplate; context: { $implicit: data, row: row }"></ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <ng-template #tdTemplateTemplate>\r\n    {{ nzPageSize * (nzPageIndex - 1) + data.indexAttr.index + 1 }}\r\n  </ng-template>\r\n\r\n  <ng-template #buttonControlTemplate>\r\n    <ng-container *ngIf="data.col.buttons?.length; else textValueTemplate">\r\n      <ng-container *ngFor="let btn of data.col.buttons; index as index; count as count; last as last">\r\n        <button\r\n          *ngIf="btn.link === false && (btn.visible !== false || row.buttons?.[index]?.visible !== false)"\r\n          type="button"\r\n          nz-button\r\n          [type]="btn.type"\r\n          [nzBlock]="btn.nzBlock"\r\n          [nzDanger]="btn.nzDanger"\r\n          [nzGhost]="btn.nzGhost"\r\n          [nzSize]="btn.nzSize || \'small\'"\r\n          [nzLoading]="btn.nzLoading || row.buttons?.[index]?.nzLoading"\r\n          [nzSearch]="btn.nzSearch"\r\n          [nzShape]="btn.nzShape"\r\n          [nzType]="btn.nzType || \'link\'"\r\n          [disabled]="row.buttons?.[index]?.disabled"\r\n          (click)="btn.click && btn.click(row, data, $event)"\r\n        >\r\n          {{ row.buttons?.[index]?.text || btn.text }}\r\n        </button>\r\n        <a\r\n          *ngIf="btn.link !== false && (btn.visible !== false || row.buttons?.[index]?.visible !== false)"\r\n          [attr.href]="getLinkHref(btn, row, data)"\r\n          [attr.target]="btn.target || row.buttons?.[index]?.target"\r\n          (click)="btn.click && row.buttons?.[index]?.disabled !== true && btn.click(row, data, $event)"\r\n        >\r\n          {{ btn.text || row.buttons?.[index]?.text }}\r\n        </a>\r\n        <nz-divider nzType="vertical" *ngIf="count > 1 && !last"></nz-divider>\r\n      </ng-container>\r\n\r\n      <ng-container *ngTemplateOutlet="data.col._tdTemplate; context: { $implicit: data, row: row }"></ng-container>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #textValueTemplate>\r\n    <ng-container *ngIf="data.col.name">\r\n      \x3c!--处理异步数据--\x3e\r\n      <ng-container *ngIf="data.row[\'$ASYNC-\' + data.col.name] != null; else formatValue">\r\n        {{ data.row[\'$ASYNC-\' + data.col.name] | async | defaultify }}\r\n      </ng-container>\r\n\r\n      <ng-template #formatValue>\r\n        <ng-container *ngIf="data.row[\'$FORMAT-\' + data.col.name] != null; else simpleValue">\r\n          {{ data.row[\'$FORMAT-\' + data.col.name] }}\r\n        </ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template #simpleValue>\r\n        {{ data.row[data.col.name] | defaultify }}\r\n      </ng-template>\r\n    </ng-container>\r\n  </ng-template>\r\n</ng-template>\r\n\r\n<ng-template #totalTemplate let-range="range" let-total>\r\n  第 {{ range[0] / nzPageSize | math: \'ceil\' }}/{{ total / nzPageSize | math: \'ceil\' }} 页 共 {{ total }} 条\r\n</ng-template>\r\n'},"./lib/table/header/table-header/table-header.component.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=Omhvc3R7ZGlzcGxheTogYmxvY2t9!./lib/table/header/table-header/table-header.component.ts":module=>{"use strict";module.exports=":host{display: block}"},"?4f7e":()=>{},"./generated-stories-entry.cjs":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module=__webpack_require__.nmd(module),(0,__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js").configure)([__webpack_require__("./stories sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.mdx)$"),__webpack_require__("./stories sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$"),__webpack_require__("./lib sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.mdx)$"),__webpack_require__("./lib sync recursive ^\\.(?:(?:^%7C[\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/])(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")],module,!1)}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[568],(()=>(__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js"),__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/globals.js"),__webpack_exec__("./storybook-init-framework-entry.js"),__webpack_exec__("./node_modules/@storybook/angular/dist/ts3.9/client/docs/config-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/angular/dist/ts3.9/client/preview/config.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-links/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-docs/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-actions/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-backgrounds/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-measure/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-outline/preview.js-generated-config-entry.js"),__webpack_exec__("./.storybook/preview.js-generated-config-entry.js"),__webpack_exec__("./generated-stories-entry.cjs"),__webpack_exec__("./stories/styles.less"),__webpack_exec__("./node_modules/core-js/proposals/reflect-metadata.js"))));__webpack_require__.O()}]);